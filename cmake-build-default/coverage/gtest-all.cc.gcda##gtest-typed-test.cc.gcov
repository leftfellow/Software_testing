        -:    0:Source:/Users/maxbazarov/Documents/Software_testing/ctest/tests/googletest/googletest/src/gtest-typed-test.cc
        -:    0:Graph:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2008 Google Inc.
        -:    2:// All Rights Reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:
        -:   31:#include "gtest/gtest-typed-test.h"
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:namespace testing {
        -:   36:namespace internal {
        -:   37:
        -:   38:// Skips to the first non-space char in str. Returns an empty string if str
        -:   39:// contains only whitespace characters.
function _ZN7testing8internalL10SkipSpacesEPKc called 0 returned 0% blocks executed 0%
    #####:   40:static const char* SkipSpaces(const char* str) {
    #####:   41:  while (IsSpace(*str))
    $$$$$:   41-block  0
    $$$$$:   41-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   41-block  2
    #####:   42:    str++;
    #####:   43:  return str;
    $$$$$:   43-block  0
        -:   44:}
        -:   45:
function _ZN7testing8internalL18SplitIntoTestNamesEPKc called 0 returned 0% blocks executed 0%
    #####:   46:static std::vector<std::string> SplitIntoTestNames(const char* src) {
    #####:   47:  std::vector<std::string> name_vec;
    #####:   48:  src = SkipSpaces(src);
    $$$$$:   48-block  0
    #####:   49:  for (; src != nullptr; src = SkipComma(src)) {
    $$$$$:   49-block  0
    $$$$$:   49-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   49-block  2
    $$$$$:   49-block  3
    #####:   50:    name_vec.push_back(StripTrailingSpaces(GetPrefixUntilComma(src)));
    $$$$$:   50-block  0
    $$$$$:   50-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   50-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    #####:   51:  }
    $$$$$:   51-block  0
    #####:   52:  return name_vec;
    #####:   53:}
    $$$$$:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
    $$$$$:   53-block  3
    $$$$$:   53-block  4
    $$$$$:   53-block  5
    $$$$$:   53-block  6
    $$$$$:   53-block  7
        -:   54:
        -:   55:// Verifies that registered_tests match the test names in
        -:   56:// registered_tests_; returns registered_tests if successful, or
        -:   57:// aborts the program otherwise.
function _ZN7testing8internal20TypedTestSuitePState25VerifyRegisteredTestNamesEPKcS3_iS3_ called 0 returned 0% blocks executed 0%
    #####:   58:const char* TypedTestSuitePState::VerifyRegisteredTestNames(
        -:   59:    const char* test_suite_name, const char* file, int line,
        -:   60:    const char* registered_tests) {
    #####:   61:  RegisterTypeParameterizedTestSuite(test_suite_name, CodeLocation(file, line));
    $$$$$:   61-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   61-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
        -:   62:
        -:   63:  typedef RegisteredTestsMap::const_iterator RegisteredTestIter;
    #####:   64:  registered_ = true;
        -:   65:
    #####:   66:  std::vector<std::string> name_vec = SplitIntoTestNames(registered_tests);
        -:   67:
    #####:   68:  Message errors;
    $$$$$:   68-block  0
branch  0 never executed
branch  1 never executed
        -:   69:
    #####:   70:  std::set<std::string> tests;
    #####:   71:  for (std::vector<std::string>::const_iterator name_it = name_vec.begin();
    $$$$$:   71-block  0
    $$$$$:   71-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   71-block  2
    #####:   72:       name_it != name_vec.end(); ++name_it) {
    #####:   73:    const std::string& name = *name_it;
    #####:   74:    if (tests.count(name) != 0) {
    $$$$$:   74-block  0
    $$$$$:   74-block  1
branch  0 never executed
branch  1 never executed
    #####:   75:      errors << "Test " << name << " is listed more than once.\n";
    $$$$$:   75-block  0
    $$$$$:   75-block  1
    $$$$$:   75-block  2
    #####:   76:      continue;
    $$$$$:   76-block  0
        -:   77:    }
        -:   78:
    #####:   79:    if (registered_tests_.count(name) != 0) {
    $$$$$:   79-block  0
    $$$$$:   79-block  1
branch  0 never executed
branch  1 never executed
    #####:   80:      tests.insert(name);
    $$$$$:   80-block  0
    #####:   81:    } else {
    $$$$$:   81-block  0
    #####:   82:      errors << "No test named " << name
    $$$$$:   82-block  0
    $$$$$:   82-block  1
    #####:   83:             << " can be found in this test suite.\n";
    $$$$$:   83-block  0
        -:   84:    }
    #####:   85:  }
    $$$$$:   85-block  0
        -:   86:
    #####:   87:  for (RegisteredTestIter it = registered_tests_.begin();
    $$$$$:   87-block  0
    $$$$$:   87-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   87-block  2
    #####:   88:       it != registered_tests_.end();
    $$$$$:   88-block  0
    #####:   89:       ++it) {
    $$$$$:   89-block  0
    #####:   90:    if (tests.count(it->first) == 0) {
    $$$$$:   90-block  0
    $$$$$:   90-block  1
    $$$$$:   90-block  2
    $$$$$:   90-block  3
    #####:   91:      errors << "You forgot to list test " << it->first << ".\n";
    $$$$$:   91-block  0
    $$$$$:   91-block  1
    $$$$$:   91-block  2
    $$$$$:   91-block  3
    #####:   92:    }
    $$$$$:   92-block  0
    #####:   93:  }
    $$$$$:   93-block  0
        -:   94:
    #####:   95:  const std::string& errors_str = errors.GetString();
    $$$$$:   95-block  0
    #####:   96:  if (errors_str != "") {
    $$$$$:   96-block  0
branch  0 never executed
branch  1 never executed
    #####:   97:    fprintf(stderr, "%s %s", FormatFileLocation(file, line).c_str(),
    $$$$$:   97-block  0
    $$$$$:   97-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   97-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:   97-block  3
    #####:   98:            errors_str.c_str());
    #####:   99:    fflush(stderr);
    $$$$$:   99-block  0
    #####:  100:    posix::Abort();
    $$$$$:  100-block  0
    $$$$$:  100-block  1
        -:  101:  }
        -:  102:
    #####:  103:  return registered_tests;
    #####:  104:}
    $$$$$:  104-block  0
    $$$$$:  104-block  1
    $$$$$:  104-block  2
    $$$$$:  104-block  3
    $$$$$:  104-block  4
    $$$$$:  104-block  5
    $$$$$:  104-block  6
    $$$$$:  104-block  7
        -:  105:
        -:  106:}  // namespace internal
        -:  107:}  // namespace testing
