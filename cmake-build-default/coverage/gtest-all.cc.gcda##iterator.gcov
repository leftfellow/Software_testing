        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/iterator
        -:    0:Graph:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- iterator ----------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_ITERATOR
        -:   11:#define _LIBCPP_ITERATOR
        -:   12:
        -:   13:/*
        -:   14:    iterator synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template<class Iterator>
        -:   20:struct iterator_traits
        -:   21:{
        -:   22:    typedef typename Iterator::difference_type difference_type;
        -:   23:    typedef typename Iterator::value_type value_type;
        -:   24:    typedef typename Iterator::pointer pointer;
        -:   25:    typedef typename Iterator::reference reference;
        -:   26:    typedef typename Iterator::iterator_category iterator_category;
        -:   27:};
        -:   28:
        -:   29:template<class T>
        -:   30:struct iterator_traits<T*>
        -:   31:{
        -:   32:    typedef ptrdiff_t difference_type;
        -:   33:    typedef T value_type;
        -:   34:    typedef T* pointer;
        -:   35:    typedef T& reference;
        -:   36:    typedef random_access_iterator_tag iterator_category;
        -:   37:};
        -:   38:
        -:   39:template<class Category, class T, class Distance = ptrdiff_t,
        -:   40:         class Pointer = T*, class Reference = T&>
        -:   41:struct iterator
        -:   42:{
        -:   43:    typedef T         value_type;
        -:   44:    typedef Distance  difference_type;
        -:   45:    typedef Pointer   pointer;
        -:   46:    typedef Reference reference;
        -:   47:    typedef Category  iterator_category;
        -:   48:};
        -:   49:
        -:   50:struct input_iterator_tag  {};
        -:   51:struct output_iterator_tag {};
        -:   52:struct forward_iterator_tag       : public input_iterator_tag         {};
        -:   53:struct bidirectional_iterator_tag : public forward_iterator_tag       {};
        -:   54:struct random_access_iterator_tag : public bidirectional_iterator_tag {};
        -:   55:
        -:   56:// 27.4.3, iterator operations
        -:   57:template <class InputIterator, class Distance>  // constexpr in C++17
        -:   58:  constexpr void advance(InputIterator& i, Distance n);
        -:   59:
        -:   60:template <class InputIterator>  // constexpr in C++17
        -:   61:  constexpr typename iterator_traits<InputIterator>::difference_type
        -:   62:    distance(InputIterator first, InputIterator last);
        -:   63:
        -:   64:template <class InputIterator>  // constexpr in C++17
        -:   65:  constexpr InputIterator next(InputIterator x,
        -:   66:typename iterator_traits<InputIterator>::difference_type n = 1);
        -:   67:
        -:   68:template <class BidirectionalIterator>  // constexpr in C++17
        -:   69:  constexpr BidirectionalIterator prev(BidirectionalIterator x,
        -:   70:    typename iterator_traits<BidirectionalIterator>::difference_type n = 1);
        -:   71:
        -:   72:template <class Iterator>
        -:   73:class reverse_iterator
        -:   74:    : public iterator<typename iterator_traits<Iterator>::iterator_category,
        -:   75:                      typename iterator_traits<Iterator>::value_type,
        -:   76:                      typename iterator_traits<Iterator>::difference_type,
        -:   77:                      typename iterator_traits<Iterator>::pointer,
        -:   78:                      typename iterator_traits<Iterator>::reference>
        -:   79:{
        -:   80:protected:
        -:   81:    Iterator current;
        -:   82:public:
        -:   83:    typedef Iterator                                            iterator_type;
        -:   84:    typedef typename iterator_traits<Iterator>::difference_type difference_type;
        -:   85:    typedef typename iterator_traits<Iterator>::reference       reference;
        -:   86:    typedef typename iterator_traits<Iterator>::pointer         pointer;
        -:   87:
        -:   88:    constexpr reverse_iterator();
        -:   89:    constexpr explicit reverse_iterator(Iterator x);
        -:   90:    template <class U> constexpr reverse_iterator(const reverse_iterator<U>& u);
        -:   91:    template <class U> constexpr reverse_iterator& operator=(const reverse_iterator<U>& u);
        -:   92:    constexpr Iterator base() const;
        -:   93:    constexpr reference operator*() const;
        -:   94:    constexpr pointer   operator->() const;
        -:   95:    constexpr reverse_iterator& operator++();
        -:   96:    constexpr reverse_iterator  operator++(int);
        -:   97:    constexpr reverse_iterator& operator--();
        -:   98:    constexpr reverse_iterator  operator--(int);
        -:   99:    constexpr reverse_iterator  operator+ (difference_type n) const;
        -:  100:    constexpr reverse_iterator& operator+=(difference_type n);
        -:  101:    constexpr reverse_iterator  operator- (difference_type n) const;
        -:  102:    constexpr reverse_iterator& operator-=(difference_type n);
        -:  103:    constexpr reference         operator[](difference_type n) const;
        -:  104:};
        -:  105:
        -:  106:template <class Iterator1, class Iterator2>
        -:  107:constexpr bool                          // constexpr in C++17
        -:  108:operator==(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  109:
        -:  110:template <class Iterator1, class Iterator2>
        -:  111:constexpr bool                          // constexpr in C++17
        -:  112:operator<(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  113:
        -:  114:template <class Iterator1, class Iterator2>
        -:  115:constexpr bool                          // constexpr in C++17
        -:  116:operator!=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  117:
        -:  118:template <class Iterator1, class Iterator2>
        -:  119:constexpr bool                          // constexpr in C++17
        -:  120:operator>(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  121:
        -:  122:template <class Iterator1, class Iterator2>
        -:  123:constexpr bool                          // constexpr in C++17
        -:  124:operator>=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  125:
        -:  126:template <class Iterator1, class Iterator2>
        -:  127:constexpr bool                          // constexpr in C++17
        -:  128:operator<=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  129:
        -:  130:template <class Iterator1, class Iterator2>
        -:  131:constexpr auto
        -:  132:operator-(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y)
        -:  133:-> decltype(__y.base() - __x.base());   // constexpr in C++17
        -:  134:
        -:  135:template <class Iterator>
        -:  136:constexpr reverse_iterator<Iterator>
        -:  137:operator+(typename reverse_iterator<Iterator>::difference_type n,
        -:  138:          const reverse_iterator<Iterator>& x);   // constexpr in C++17
        -:  139:
        -:  140:template <class Iterator>
        -:  141:constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i); // C++14, constexpr in C++17
        -:  142:
        -:  143:template <class Container>
        -:  144:class back_insert_iterator
        -:  145:{
        -:  146:protected:
        -:  147:    Container* container;
        -:  148:public:
        -:  149:    typedef Container                   container_type;
        -:  150:    typedef void                        value_type;
        -:  151:    typedef void                        difference_type;
        -:  152:    typedef void                        reference;
        -:  153:    typedef void                        pointer;
        -:  154:
        -:  155:    explicit back_insert_iterator(Container& x);
        -:  156:    back_insert_iterator& operator=(const typename Container::value_type& value);
        -:  157:    back_insert_iterator& operator*();
        -:  158:    back_insert_iterator& operator++();
        -:  159:    back_insert_iterator  operator++(int);
        -:  160:};
        -:  161:
        -:  162:template <class Container> back_insert_iterator<Container> back_inserter(Container& x);
        -:  163:
        -:  164:template <class Container>
        -:  165:class front_insert_iterator
        -:  166:{
        -:  167:protected:
        -:  168:    Container* container;
        -:  169:public:
        -:  170:    typedef Container                    container_type;
        -:  171:    typedef void                         value_type;
        -:  172:    typedef void                         difference_type;
        -:  173:    typedef void                         reference;
        -:  174:    typedef void                         pointer;
        -:  175:
        -:  176:    explicit front_insert_iterator(Container& x);
        -:  177:    front_insert_iterator& operator=(const typename Container::value_type& value);
        -:  178:    front_insert_iterator& operator*();
        -:  179:    front_insert_iterator& operator++();
        -:  180:    front_insert_iterator  operator++(int);
        -:  181:};
        -:  182:
        -:  183:template <class Container> front_insert_iterator<Container> front_inserter(Container& x);
        -:  184:
        -:  185:template <class Container>
        -:  186:class insert_iterator
        -:  187:{
        -:  188:protected:
        -:  189:    Container* container;
        -:  190:    typename Container::iterator iter;
        -:  191:public:
        -:  192:    typedef Container              container_type;
        -:  193:    typedef void                   value_type;
        -:  194:    typedef void                   difference_type;
        -:  195:    typedef void                   reference;
        -:  196:    typedef void                   pointer;
        -:  197:
        -:  198:    insert_iterator(Container& x, typename Container::iterator i);
        -:  199:    insert_iterator& operator=(const typename Container::value_type& value);
        -:  200:    insert_iterator& operator*();
        -:  201:    insert_iterator& operator++();
        -:  202:    insert_iterator& operator++(int);
        -:  203:};
        -:  204:
        -:  205:template <class Container, class Iterator>
        -:  206:insert_iterator<Container> inserter(Container& x, Iterator i);
        -:  207:
        -:  208:template <class Iterator>
        -:  209:class move_iterator {
        -:  210:public:
        -:  211:    typedef Iterator                                              iterator_type;
        -:  212:    typedef typename iterator_traits<Iterator>::difference_type   difference_type;
        -:  213:    typedef Iterator                                              pointer;
        -:  214:    typedef typename iterator_traits<Iterator>::value_type        value_type;
        -:  215:    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;
        -:  216:    typedef value_type&&                                          reference;
        -:  217:
        -:  218:    constexpr move_iterator();  // all the constexprs are in C++17
        -:  219:    constexpr explicit move_iterator(Iterator i);
        -:  220:    template <class U>
        -:  221:      constexpr move_iterator(const move_iterator<U>& u);
        -:  222:    template <class U>
        -:  223:      constexpr move_iterator& operator=(const move_iterator<U>& u);
        -:  224:    constexpr iterator_type base() const;
        -:  225:    constexpr reference operator*() const;
        -:  226:    constexpr pointer operator->() const;
        -:  227:    constexpr move_iterator& operator++();
        -:  228:    constexpr move_iterator operator++(int);
        -:  229:    constexpr move_iterator& operator--();
        -:  230:    constexpr move_iterator operator--(int);
        -:  231:    constexpr move_iterator operator+(difference_type n) const;
        -:  232:    constexpr move_iterator& operator+=(difference_type n);
        -:  233:    constexpr move_iterator operator-(difference_type n) const;
        -:  234:    constexpr move_iterator& operator-=(difference_type n);
        -:  235:    constexpr unspecified operator[](difference_type n) const;
        -:  236:private:
        -:  237:    Iterator current; // exposition only
        -:  238:};
        -:  239:
        -:  240:template <class Iterator1, class Iterator2>
        -:  241:constexpr bool   // constexpr in C++17
        -:  242:operator==(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  243:
        -:  244:template <class Iterator1, class Iterator2>
        -:  245:constexpr bool   // constexpr in C++17
        -:  246:operator!=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  247:
        -:  248:template <class Iterator1, class Iterator2>
        -:  249:constexpr bool   // constexpr in C++17
        -:  250:operator<(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  251:
        -:  252:template <class Iterator1, class Iterator2>
        -:  253:constexpr bool   // constexpr in C++17
        -:  254:operator<=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  255:
        -:  256:template <class Iterator1, class Iterator2>
        -:  257:constexpr bool   // constexpr in C++17
        -:  258:operator>(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  259:
        -:  260:template <class Iterator1, class Iterator2>
        -:  261:constexpr bool   // constexpr in C++17
        -:  262:operator>=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  263:
        -:  264:template <class Iterator1, class Iterator2>
        -:  265:constexpr auto   // constexpr in C++17
        -:  266:operator-(const move_iterator<Iterator1>& x,
        -:  267:          const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base());
        -:  268:
        -:  269:template <class Iterator>
        -:  270:constexpr move_iterator<Iterator> operator+(   // constexpr in C++17
        -:  271:            typename move_iterator<Iterator>::difference_type n,
        -:  272:            const move_iterator<Iterator>& x);
        -:  273:
        -:  274:template <class Iterator>   // constexpr in C++17
        -:  275:constexpr  move_iterator<Iterator> make_move_iterator(const Iterator& i);
        -:  276:
        -:  277:
        -:  278:template <class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>
        -:  279:class istream_iterator
        -:  280:    : public iterator<input_iterator_tag, T, Distance, const T*, const T&>
        -:  281:{
        -:  282:public:
        -:  283:    typedef charT char_type;
        -:  284:    typedef traits traits_type;
        -:  285:    typedef basic_istream<charT,traits> istream_type;
        -:  286:
        -:  287:    constexpr istream_iterator();
        -:  288:    istream_iterator(istream_type& s);
        -:  289:    istream_iterator(const istream_iterator& x);
        -:  290:    ~istream_iterator();
        -:  291:
        -:  292:    const T& operator*() const;
        -:  293:    const T* operator->() const;
        -:  294:    istream_iterator& operator++();
        -:  295:    istream_iterator  operator++(int);
        -:  296:};
        -:  297:
        -:  298:template <class T, class charT, class traits, class Distance>
        -:  299:bool operator==(const istream_iterator<T,charT,traits,Distance>& x,
        -:  300:                const istream_iterator<T,charT,traits,Distance>& y);
        -:  301:template <class T, class charT, class traits, class Distance>
        -:  302:bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,
        -:  303:                const istream_iterator<T,charT,traits,Distance>& y);
        -:  304:
        -:  305:template <class T, class charT = char, class traits = char_traits<charT> >
        -:  306:class ostream_iterator
        -:  307:    : public iterator<output_iterator_tag, void, void, void ,void>
        -:  308:{
        -:  309:public:
        -:  310:    typedef charT char_type;
        -:  311:    typedef traits traits_type;
        -:  312:    typedef basic_ostream<charT,traits> ostream_type;
        -:  313:
        -:  314:    ostream_iterator(ostream_type& s);
        -:  315:    ostream_iterator(ostream_type& s, const charT* delimiter);
        -:  316:    ostream_iterator(const ostream_iterator& x);
        -:  317:    ~ostream_iterator();
        -:  318:    ostream_iterator& operator=(const T& value);
        -:  319:
        -:  320:    ostream_iterator& operator*();
        -:  321:    ostream_iterator& operator++();
        -:  322:    ostream_iterator& operator++(int);
        -:  323:};
        -:  324:
        -:  325:template<class charT, class traits = char_traits<charT> >
        -:  326:class istreambuf_iterator
        -:  327:    : public iterator<input_iterator_tag, charT,
        -:  328:                      typename traits::off_type, unspecified,
        -:  329:                      charT>
        -:  330:{
        -:  331:public:
        -:  332:    typedef charT                         char_type;
        -:  333:    typedef traits                        traits_type;
        -:  334:    typedef typename traits::int_type     int_type;
        -:  335:    typedef basic_streambuf<charT,traits> streambuf_type;
        -:  336:    typedef basic_istream<charT,traits>   istream_type;
        -:  337:
        -:  338:    istreambuf_iterator() noexcept;
        -:  339:    istreambuf_iterator(istream_type& s) noexcept;
        -:  340:    istreambuf_iterator(streambuf_type* s) noexcept;
        -:  341:    istreambuf_iterator(a-private-type) noexcept;
        -:  342:
        -:  343:    charT                operator*() const;
        -:  344:    pointer operator->() const;
        -:  345:    istreambuf_iterator& operator++();
        -:  346:    a-private-type       operator++(int);
        -:  347:
        -:  348:    bool equal(const istreambuf_iterator& b) const;
        -:  349:};
        -:  350:
        -:  351:template <class charT, class traits>
        -:  352:bool operator==(const istreambuf_iterator<charT,traits>& a,
        -:  353:                const istreambuf_iterator<charT,traits>& b);
        -:  354:template <class charT, class traits>
        -:  355:bool operator!=(const istreambuf_iterator<charT,traits>& a,
        -:  356:                const istreambuf_iterator<charT,traits>& b);
        -:  357:
        -:  358:template <class charT, class traits = char_traits<charT> >
        -:  359:class ostreambuf_iterator
        -:  360:    : public iterator<output_iterator_tag, void, void, void, void>
        -:  361:{
        -:  362:public:
        -:  363:    typedef charT                         char_type;
        -:  364:    typedef traits                        traits_type;
        -:  365:    typedef basic_streambuf<charT,traits> streambuf_type;
        -:  366:    typedef basic_ostream<charT,traits>   ostream_type;
        -:  367:
        -:  368:    ostreambuf_iterator(ostream_type& s) noexcept;
        -:  369:    ostreambuf_iterator(streambuf_type* s) noexcept;
        -:  370:    ostreambuf_iterator& operator=(charT c);
        -:  371:    ostreambuf_iterator& operator*();
        -:  372:    ostreambuf_iterator& operator++();
        -:  373:    ostreambuf_iterator& operator++(int);
        -:  374:    bool failed() const noexcept;
        -:  375:};
        -:  376:
        -:  377:template <class C> constexpr auto begin(C& c) -> decltype(c.begin());
        -:  378:template <class C> constexpr auto begin(const C& c) -> decltype(c.begin());
        -:  379:template <class C> constexpr auto end(C& c) -> decltype(c.end());
        -:  380:template <class C> constexpr auto end(const C& c) -> decltype(c.end());
        -:  381:template <class T, size_t N> constexpr T* begin(T (&array)[N]);
        -:  382:template <class T, size_t N> constexpr T* end(T (&array)[N]);
        -:  383:
        -:  384:template <class C> auto constexpr cbegin(const C& c) -> decltype(std::begin(c));        // C++14
        -:  385:template <class C> auto constexpr cend(const C& c) -> decltype(std::end(c));            // C++14
        -:  386:template <class C> auto constexpr rbegin(C& c) -> decltype(c.rbegin());                 // C++14
        -:  387:template <class C> auto constexpr rbegin(const C& c) -> decltype(c.rbegin());           // C++14
        -:  388:template <class C> auto constexpr rend(C& c) -> decltype(c.rend());                     // C++14
        -:  389:template <class C> constexpr auto rend(const C& c) -> decltype(c.rend());               // C++14
        -:  390:template <class E> reverse_iterator<const E*> constexpr rbegin(initializer_list<E> il); // C++14
        -:  391:template <class E> reverse_iterator<const E*> constexpr rend(initializer_list<E> il);   // C++14
        -:  392:template <class T, size_t N> reverse_iterator<T*> constexpr rbegin(T (&array)[N]);      // C++14
        -:  393:template <class T, size_t N> reverse_iterator<T*> constexpr rend(T (&array)[N]);        // C++14
        -:  394:template <class C> constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));      // C++14
        -:  395:template <class C> constexpr auto crend(const C& c) -> decltype(std::rend(c));          // C++14
        -:  396:
        -:  397:// 24.8, container access:
        -:  398:template <class C> constexpr auto size(const C& c) -> decltype(c.size());         // C++17
        -:  399:template <class T, size_t N> constexpr size_t size(const T (&array)[N]) noexcept; // C++17
        -:  400:
        -:  401:template <class C> constexpr auto ssize(const C& c)
        -:  402:    -> common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>;				       // C++20
        -:  403:template <class T, ptrdiff_t> constexpr ptrdiff_t ssize(const T (&array)[N]) noexcept; // C++20
        -:  404:
        -:  405:template <class C> constexpr auto empty(const C& c) -> decltype(c.empty());       // C++17
        -:  406:template <class T, size_t N> constexpr bool empty(const T (&array)[N]) noexcept;  // C++17
        -:  407:template <class E> constexpr bool empty(initializer_list<E> il) noexcept;         // C++17
        -:  408:template <class C> constexpr auto data(C& c) -> decltype(c.data());               // C++17
        -:  409:template <class C> constexpr auto data(const C& c) -> decltype(c.data());         // C++17
        -:  410:template <class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;           // C++17
        -:  411:template <class E> constexpr const E* data(initializer_list<E> il) noexcept;      // C++17
        -:  412:
        -:  413:}  // std
        -:  414:
        -:  415:*/
        -:  416:
        -:  417:#include <__config>
        -:  418:#include <iosfwd> // for forward declarations of vector and string.
        -:  419:#include <__functional_base>
        -:  420:#include <type_traits>
        -:  421:#include <cstddef>
        -:  422:#include <initializer_list>
        -:  423:#include <__memory/base.h>
        -:  424:#include <version>
        -:  425:
        -:  426:#include <__debug>
        -:  427:
        -:  428:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  429:#pragma GCC system_header
        -:  430:#endif
        -:  431:
        -:  432:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  433:template <class _Iter>
        -:  434:struct _LIBCPP_TEMPLATE_VIS iterator_traits;
        -:  435:
        -:  436:struct _LIBCPP_TEMPLATE_VIS input_iterator_tag {};
        -:  437:struct _LIBCPP_TEMPLATE_VIS output_iterator_tag {};
        -:  438:struct _LIBCPP_TEMPLATE_VIS forward_iterator_tag       : public input_iterator_tag {};
        -:  439:struct _LIBCPP_TEMPLATE_VIS bidirectional_iterator_tag : public forward_iterator_tag {};
        -:  440:struct _LIBCPP_TEMPLATE_VIS random_access_iterator_tag : public bidirectional_iterator_tag {};
        -:  441:#if _LIBCPP_STD_VER > 17
        -:  442:// TODO(EricWF)  contiguous_iterator_tag is provided as an extension prior to
        -:  443://  C++20 to allow optimizations for users providing wrapped iterator types.
        -:  444:struct _LIBCPP_TEMPLATE_VIS contiguous_iterator_tag: public random_access_iterator_tag { };
        -:  445:#endif
        -:  446:
        -:  447:template <class _Iter>
        -:  448:struct __iter_traits_cache {
        -:  449:  using type = _If<
        -:  450:    __is_primary_template<iterator_traits<_Iter> >::value,
        -:  451:    _Iter,
        -:  452:    iterator_traits<_Iter>
        -:  453:  >;
        -:  454:};
        -:  455:template <class _Iter>
        -:  456:using _ITER_TRAITS = typename __iter_traits_cache<_Iter>::type;
        -:  457:
        -:  458:struct __iter_concept_concept_test {
        -:  459:  template <class _Iter>
        -:  460:  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_concept;
        -:  461:};
        -:  462:struct __iter_concept_category_test {
        -:  463:  template <class _Iter>
        -:  464:  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_category;
        -:  465:};
        -:  466:struct __iter_concept_random_fallback {
        -:  467:  template <class _Iter>
        -:  468:  using _Apply = _EnableIf<
        -:  469:                          __is_primary_template<iterator_traits<_Iter> >::value,
        -:  470:                          random_access_iterator_tag
        -:  471:                        >;
        -:  472:};
        -:  473:
        -:  474:template <class _Iter, class _Tester> struct __test_iter_concept
        -:  475:    : _IsValidExpansion<_Tester::template _Apply, _Iter>,
        -:  476:      _Tester
        -:  477:{
        -:  478:};
        -:  479:
        -:  480:template <class _Iter>
        -:  481:struct __iter_concept_cache {
        -:  482:  using type = _Or<
        -:  483:    __test_iter_concept<_Iter, __iter_concept_concept_test>,
        -:  484:    __test_iter_concept<_Iter, __iter_concept_category_test>,
        -:  485:    __test_iter_concept<_Iter, __iter_concept_random_fallback>
        -:  486:  >;
        -:  487:};
        -:  488:
        -:  489:template <class _Iter>
        -:  490:using _ITER_CONCEPT = typename __iter_concept_cache<_Iter>::type::template _Apply<_Iter>;
        -:  491:
        -:  492:
        -:  493:template <class _Tp>
        -:  494:struct __has_iterator_typedefs
        -:  495:{
        -:  496:private:
        -:  497:    struct __two {char __lx; char __lxx;};
        -:  498:    template <class _Up> static __two __test(...);
        -:  499:    template <class _Up> static char __test(typename __void_t<typename _Up::iterator_category>::type* = 0,
        -:  500:                                            typename __void_t<typename _Up::difference_type>::type* = 0,
        -:  501:                                            typename __void_t<typename _Up::value_type>::type* = 0,
        -:  502:                                            typename __void_t<typename _Up::reference>::type* = 0,
        -:  503:                                            typename __void_t<typename _Up::pointer>::type* = 0);
        -:  504:public:
        -:  505:    static const bool value = sizeof(__test<_Tp>(0,0,0,0,0)) == 1;
        -:  506:};
        -:  507:
        -:  508:
        -:  509:template <class _Tp>
        -:  510:struct __has_iterator_category
        -:  511:{
        -:  512:private:
        -:  513:    struct __two {char __lx; char __lxx;};
        -:  514:    template <class _Up> static __two __test(...);
        -:  515:    template <class _Up> static char __test(typename _Up::iterator_category* = nullptr);
        -:  516:public:
        -:  517:    static const bool value = sizeof(__test<_Tp>(nullptr)) == 1;
        -:  518:};
        -:  519:
        -:  520:template <class _Iter, bool> struct __iterator_traits_impl {};
        -:  521:
        -:  522:template <class _Iter>
        -:  523:struct __iterator_traits_impl<_Iter, true>
        -:  524:{
        -:  525:    typedef typename _Iter::difference_type   difference_type;
        -:  526:    typedef typename _Iter::value_type        value_type;
        -:  527:    typedef typename _Iter::pointer           pointer;
        -:  528:    typedef typename _Iter::reference         reference;
        -:  529:    typedef typename _Iter::iterator_category iterator_category;
        -:  530:};
        -:  531:
        -:  532:template <class _Iter, bool> struct __iterator_traits {};
        -:  533:
        -:  534:template <class _Iter>
        -:  535:struct __iterator_traits<_Iter, true>
        -:  536:    :  __iterator_traits_impl
        -:  537:      <
        -:  538:        _Iter,
        -:  539:        is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||
        -:  540:        is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value
        -:  541:      >
        -:  542:{};
        -:  543:
        -:  544:// iterator_traits<Iterator> will only have the nested types if Iterator::iterator_category
        -:  545://    exists.  Else iterator_traits<Iterator> will be an empty class.  This is a
        -:  546://    conforming extension which allows some programs to compile and behave as
        -:  547://    the client expects instead of failing at compile time.
        -:  548:
        -:  549:template <class _Iter>
        -:  550:struct _LIBCPP_TEMPLATE_VIS iterator_traits
        -:  551:    : __iterator_traits<_Iter, __has_iterator_typedefs<_Iter>::value> {
        -:  552:
        -:  553:  using __primary_template = iterator_traits;
        -:  554:};
        -:  555:
        -:  556:template<class _Tp>
        -:  557:struct _LIBCPP_TEMPLATE_VIS iterator_traits<_Tp*>
        -:  558:{
        -:  559:    typedef ptrdiff_t difference_type;
        -:  560:    typedef typename remove_cv<_Tp>::type value_type;
        -:  561:    typedef _Tp* pointer;
        -:  562:    typedef _Tp& reference;
        -:  563:    typedef random_access_iterator_tag iterator_category;
        -:  564:#if _LIBCPP_STD_VER > 17
        -:  565:    typedef contiguous_iterator_tag    iterator_concept;
        -:  566:#endif
        -:  567:};
        -:  568:
        -:  569:template <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>
        -:  570:struct __has_iterator_category_convertible_to
        -:  571:    : public integral_constant<bool, is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up>::value>
        -:  572:{};
        -:  573:
        -:  574:template <class _Tp, class _Up>
        -:  575:struct __has_iterator_category_convertible_to<_Tp, _Up, false> : public false_type {};
        -:  576:
        -:  577:template <class _Tp>
        -:  578:struct __is_cpp17_input_iterator : public __has_iterator_category_convertible_to<_Tp, input_iterator_tag> {};
        -:  579:
        -:  580:template <class _Tp>
        -:  581:struct __is_cpp17_forward_iterator : public __has_iterator_category_convertible_to<_Tp, forward_iterator_tag> {};
        -:  582:
        -:  583:template <class _Tp>
        -:  584:struct __is_cpp17_bidirectional_iterator : public __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag> {};
        -:  585:
        -:  586:template <class _Tp>
        -:  587:struct __is_cpp17_random_access_iterator : public __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag> {};
        -:  588:
        -:  589:#if _LIBCPP_STD_VER > 17
        -:  590:template <class _Tp>
        -:  591:struct __is_cpp17_contiguous_iterator : public __has_iterator_category_convertible_to<_Tp, contiguous_iterator_tag> {};
        -:  592:#else
        -:  593:template <class _Tp>
        -:  594:struct __is_cpp17_contiguous_iterator : public false_type {};
        -:  595:#endif
        -:  596:
        -:  597:
        -:  598:template <class _Tp>
        -:  599:struct __is_exactly_cpp17_input_iterator
        -:  600:    : public integral_constant<bool,
        -:  601:         __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value &&
        -:  602:        !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value> {};
        -:  603:
        -:  604:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -:  605:template<class _InputIterator>
        -:  606:using __iter_value_type = typename iterator_traits<_InputIterator>::value_type;
        -:  607:
        -:  608:template<class _InputIterator>
        -:  609:using __iter_key_type = remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>;
        -:  610:
        -:  611:template<class _InputIterator>
        -:  612:using __iter_mapped_type = typename iterator_traits<_InputIterator>::value_type::second_type;
        -:  613:
        -:  614:template<class _InputIterator>
        -:  615:using __iter_to_alloc_type = pair<
        -:  616:    add_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>,
        -:  617:    typename iterator_traits<_InputIterator>::value_type::second_type>;
        -:  618:#endif
        -:  619:
        -:  620:template<class _Category, class _Tp, class _Distance = ptrdiff_t,
        -:  621:         class _Pointer = _Tp*, class _Reference = _Tp&>
        -:  622:struct _LIBCPP_TEMPLATE_VIS iterator
        -:  623:{
        -:  624:    typedef _Tp        value_type;
        -:  625:    typedef _Distance  difference_type;
        -:  626:    typedef _Pointer   pointer;
        -:  627:    typedef _Reference reference;
        -:  628:    typedef _Category  iterator_category;
        -:  629:};
        -:  630:
        -:  631:template <class _InputIter>
        -:  632:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  633:void __advance(_InputIter& __i,
        -:  634:             typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag)
        -:  635:{
        -:  636:    for (; __n > 0; --__n)
        -:  637:        ++__i;
        -:  638:}
        -:  639:
        -:  640:template <class _BiDirIter>
        -:  641:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  642:void __advance(_BiDirIter& __i,
        -:  643:             typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag)
        -:  644:{
        -:  645:    if (__n >= 0)
        -:  646:        for (; __n > 0; --__n)
        -:  647:            ++__i;
        -:  648:    else
        -:  649:        for (; __n < 0; ++__n)
        -:  650:            --__i;
        -:  651:}
        -:  652:
        -:  653:template <class _RandIter>
        -:  654:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__1L9__advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE called 6 returned 100% blocks executed 100%
        6:  655:void __advance(_RandIter& __i,
        -:  656:             typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag)
        -:  657:{
        6:  658:   __i += __n;
        6:  659:}
        6:  659-block  0
        -:  660:
        -:  661:template <class _InputIter, class _Distance>
        -:  662:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__1L7advanceINS_11__wrap_iterIPcEElEEvRT_T0_ called 6 returned 100% blocks executed 100%
        6:  663:void advance(_InputIter& __i, _Distance __orig_n)
        -:  664:{
        -:  665:    _LIBCPP_ASSERT(__orig_n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,
        -:  666:                   "Attempt to advance(it, n) with negative n on a non-bidirectional iterator");
        -:  667:    typedef decltype(_VSTD::__convert_to_integral(__orig_n)) _IntegralSize;
        6:  668:    _IntegralSize __n = __orig_n;
        6:  669:    _VSTD::__advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
        6:  670:}
        6:  670-block  0
        -:  671:
        -:  672:template <class _InputIter>
        -:  673:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  674:typename iterator_traits<_InputIter>::difference_type
        -:  675:__distance(_InputIter __first, _InputIter __last, input_iterator_tag)
        -:  676:{
        -:  677:    typename iterator_traits<_InputIter>::difference_type __r(0);
        -:  678:    for (; __first != __last; ++__first)
        -:  679:        ++__r;
        -:  680:    return __r;
        -:  681:}
        -:  682:
        -:  683:template <class _RandIter>
        -:  684:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  685:typename iterator_traits<_RandIter>::difference_type
function _ZNSt3__1L10__distanceINS_11__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_NS_26random_access_iterator_tagE called 6 returned 100% blocks executed 100%
function _ZNSt3__1L10__distanceINS_13move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceIPKPKcEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceINS_13move_iteratorIPPcEEEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceINS_13move_iteratorIPPN7testing9TestSuiteEEEEENS_15iterator_traitsIT_E15difference_typeES8_S8_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceINS_11__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESC_SC_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
        6:  686:__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag)
        -:  687:{
        6:  688:    return __last - __first;
        6:  688-block  0
    $$$$$:  688-block  1
    $$$$$:  688-block  2
    $$$$$:  688-block  3
    $$$$$:  688-block  4
    $$$$$:  688-block  5
    $$$$$:  688-block  6
    $$$$$:  688-block  7
        -:  689:}
        -:  690:
        -:  691:template <class _InputIter>
        -:  692:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  693:typename iterator_traits<_InputIter>::difference_type
function _ZNSt3__1L8distanceINS_11__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_ called 6 returned 100% blocks executed 100%
function _ZNSt3__1L8distanceINS_13move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceIPKPKcEENS_15iterator_traitsIT_E15difference_typeES6_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceINS_13move_iteratorIPPcEEEENS_15iterator_traitsIT_E15difference_typeES6_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceINS_13move_iteratorIPPN7testing9TestSuiteEEEEENS_15iterator_traitsIT_E15difference_typeES8_S8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceINS_11__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESC_SC_ called 0 returned 0% blocks executed 0%
        6:  694:distance(_InputIter __first, _InputIter __last)
        -:  695:{
        6:  696:    return _VSTD::__distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
        6:  696-block  0
    $$$$$:  696-block  1
    $$$$$:  696-block  2
    $$$$$:  696-block  3
    $$$$$:  696-block  4
    $$$$$:  696-block  5
    $$$$$:  696-block  6
    $$$$$:  696-block  7
        -:  697:}
        -:  698:
        -:  699:template <class _InputIter>
        -:  700:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  701:typename enable_if
        -:  702:<
        -:  703:    __is_cpp17_input_iterator<_InputIter>::value,
        -:  704:    _InputIter
        -:  705:>::type
        -:  706:next(_InputIter __x,
        -:  707:     typename iterator_traits<_InputIter>::difference_type __n = 1)
        -:  708:{
        -:  709:    _LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,
        -:  710:                       "Attempt to next(it, n) with negative n on a non-bidirectional iterator");
        -:  711:
        -:  712:    _VSTD::advance(__x, __n);
        -:  713:    return __x;
        -:  714:}
        -:  715:
        -:  716:template <class _InputIter>
        -:  717:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  718:typename enable_if
        -:  719:<
        -:  720:    __is_cpp17_input_iterator<_InputIter>::value,
        -:  721:    _InputIter
        -:  722:>::type
function _ZNSt3__1L4prevINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE called 6 returned 100% blocks executed 100%
        6:  723:prev(_InputIter __x,
        -:  724:     typename iterator_traits<_InputIter>::difference_type __n = 1)
        -:  725:{
        -:  726:    _LIBCPP_ASSERT(__n <= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,
        -:  727:                       "Attempt to prev(it, n) with a positive n on a non-bidirectional iterator");
        6:  728:    _VSTD::advance(__x, -__n);
        6:  729:    return __x;
        6:  729-block  0
        -:  730:}
        -:  731:
        -:  732:
        -:  733:template <class _Tp, class = void>
        -:  734:struct __is_stashing_iterator : false_type {};
        -:  735:
        -:  736:template <class _Tp>
        -:  737:struct __is_stashing_iterator<_Tp, typename __void_t<typename _Tp::__stashing_iterator_tag>::type>
        -:  738:  : true_type {};
        -:  739:
        -:  740:template <class _Iter>
        -:  741:class _LIBCPP_TEMPLATE_VIS reverse_iterator
        -:  742:    : public iterator<typename iterator_traits<_Iter>::iterator_category,
        -:  743:                      typename iterator_traits<_Iter>::value_type,
        -:  744:                      typename iterator_traits<_Iter>::difference_type,
        -:  745:                      typename iterator_traits<_Iter>::pointer,
        -:  746:                      typename iterator_traits<_Iter>::reference>
        -:  747:{
        -:  748:private:
        -:  749:    /*mutable*/ _Iter __t;  // no longer used as of LWG #2360, not removed due to ABI break
        -:  750:
        -:  751:    static_assert(!__is_stashing_iterator<_Iter>::value,
        -:  752:      "The specified iterator type cannot be used with reverse_iterator; "
        -:  753:      "Using stashing iterators with reverse_iterator causes undefined behavior");
        -:  754:
        -:  755:protected:
        -:  756:    _Iter current;
        -:  757:public:
        -:  758:    typedef _Iter                                            iterator_type;
        -:  759:    typedef typename iterator_traits<_Iter>::difference_type difference_type;
        -:  760:    typedef typename iterator_traits<_Iter>::reference       reference;
        -:  761:    typedef typename iterator_traits<_Iter>::pointer         pointer;
        -:  762:
        -:  763:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  764:    reverse_iterator() : __t(), current() {}
        -:  765:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEC1ES6_ called 27 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEC2ES6_ called 27 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEC1ES6_ called 2 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEC2ES6_ called 2 returned 100% blocks executed 100%
       58:  766:    explicit reverse_iterator(_Iter __x) : __t(__x), current(__x) {}
       27:  766-block  0
       27:  766-block  1
        2:  766-block  2
        2:  766-block  3
        -:  767:    template <class _Up>
        -:  768:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  769:        reverse_iterator(const reverse_iterator<_Up>& __u) : __t(__u.base()), current(__u.base()) {}
        -:  770:    template <class _Up>
        -:  771:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  772:        reverse_iterator& operator=(const reverse_iterator<_Up>& __u)
        -:  773:            { __t = current = __u.base(); return *this; }
        -:  774:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEE4baseEv called 50 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEE4baseEv called 2 returned 100% blocks executed 100%
       52:  775:    _Iter base() const {return current;}
       50:  775-block  0
        2:  775-block  1
        -:  776:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEdeEv called 17 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEdeEv called 0 returned 0% blocks executed 0%
       17:  777:    reference operator*() const {_Iter __tmp = current; return *--__tmp;}
       17:  777-block  0
    $$$$$:  777-block  1
        -:  778:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  779:    pointer  operator->() const {return _VSTD::addressof(operator*());}
        -:  780:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEppEv called 7 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEppEv called 0 returned 0% blocks executed 0%
        7:  781:    reverse_iterator& operator++() {--current; return *this;}
        7:  781-block  0
    $$$$$:  781-block  1
        -:  782:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  783:    reverse_iterator  operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}
        -:  784:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  785:    reverse_iterator& operator--() {++current; return *this;}
        -:  786:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  787:    reverse_iterator  operator--(int) {reverse_iterator __tmp(*this); ++current; return __tmp;}
        -:  788:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  789:    reverse_iterator  operator+ (difference_type __n) const {return reverse_iterator(current - __n);}
        -:  790:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  791:    reverse_iterator& operator+=(difference_type __n) {current -= __n; return *this;}
        -:  792:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  793:    reverse_iterator  operator- (difference_type __n) const {return reverse_iterator(current + __n);}
        -:  794:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  795:    reverse_iterator& operator-=(difference_type __n) {current += __n; return *this;}
        -:  796:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  797:    reference         operator[](difference_type __n) const {return *(*this + __n);}
        -:  798:};
        -:  799:
        -:  800:template <class _Iter1, class _Iter2>
        -:  801:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  802:bool
        -:  803:operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  804:{
        -:  805:    return __x.base() == __y.base();
        -:  806:}
        -:  807:
        -:  808:template <class _Iter1, class _Iter2>
        -:  809:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  810:bool
        -:  811:operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  812:{
        -:  813:    return __x.base() > __y.base();
        -:  814:}
        -:  815:
        -:  816:template <class _Iter1, class _Iter2>
        -:  817:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  818:bool
function _ZNSt3__1neINS_11__wrap_iterIPPN7testing9TestSuiteEEES6_EEbRKNS_16reverse_iteratorIT_EERKNS7_IT0_EE called 25 returned 100% blocks executed 100%
function _ZNSt3__1neINS_11__wrap_iterIPPN7testing11EnvironmentEEES6_EEbRKNS_16reverse_iteratorIT_EERKNS7_IT0_EE called 1 returned 100% blocks executed 100%
       26:  819:operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  820:{
       26:  821:    return __x.base() != __y.base();
       25:  821-block  0
        1:  821-block  1
        -:  822:}
        -:  823:
        -:  824:template <class _Iter1, class _Iter2>
        -:  825:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  826:bool
        -:  827:operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  828:{
        -:  829:    return __x.base() < __y.base();
        -:  830:}
        -:  831:
        -:  832:template <class _Iter1, class _Iter2>
        -:  833:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  834:bool
        -:  835:operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  836:{
        -:  837:    return __x.base() <= __y.base();
        -:  838:}
        -:  839:
        -:  840:template <class _Iter1, class _Iter2>
        -:  841:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  842:bool
        -:  843:operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  844:{
        -:  845:    return __x.base() >= __y.base();
        -:  846:}
        -:  847:
        -:  848:#ifndef _LIBCPP_CXX03_LANG
        -:  849:template <class _Iter1, class _Iter2>
        -:  850:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  851:auto
        -:  852:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  853:-> decltype(__y.base() - __x.base())
        -:  854:{
        -:  855:    return __y.base() - __x.base();
        -:  856:}
        -:  857:#else
        -:  858:template <class _Iter1, class _Iter2>
        -:  859:inline _LIBCPP_INLINE_VISIBILITY
        -:  860:typename reverse_iterator<_Iter1>::difference_type
        -:  861:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  862:{
        -:  863:    return __y.base() - __x.base();
        -:  864:}
        -:  865:#endif
        -:  866:
        -:  867:template <class _Iter>
        -:  868:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  869:reverse_iterator<_Iter>
        -:  870:operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x)
        -:  871:{
        -:  872:    return reverse_iterator<_Iter>(__x.base() - __n);
        -:  873:}
        -:  874:
        -:  875:#if _LIBCPP_STD_VER > 11
        -:  876:template <class _Iter>
        -:  877:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  878:reverse_iterator<_Iter> make_reverse_iterator(_Iter __i)
        -:  879:{
        -:  880:    return reverse_iterator<_Iter>(__i);
        -:  881:}
        -:  882:#endif
        -:  883:
        -:  884:template <class _Container>
        -:  885:class _LIBCPP_TEMPLATE_VIS back_insert_iterator
        -:  886:    : public iterator<output_iterator_tag,
        -:  887:                      void,
        -:  888:                      void,
        -:  889:                      void,
        -:  890:                      void>
        -:  891:{
        -:  892:protected:
        -:  893:    _Container* container;
        -:  894:public:
        -:  895:    typedef _Container container_type;
        -:  896:
        -:  897:    _LIBCPP_INLINE_VISIBILITY explicit back_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}
        -:  898:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  899:        {container->push_back(__value_); return *this;}
        -:  900:#ifndef _LIBCPP_CXX03_LANG
        -:  901:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  902:        {container->push_back(_VSTD::move(__value_)); return *this;}
        -:  903:#endif  // _LIBCPP_CXX03_LANG
        -:  904:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator*()     {return *this;}
        -:  905:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator++()    {return *this;}
        -:  906:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator  operator++(int) {return *this;}
        -:  907:};
        -:  908:
        -:  909:template <class _Container>
        -:  910:inline _LIBCPP_INLINE_VISIBILITY
        -:  911:back_insert_iterator<_Container>
        -:  912:back_inserter(_Container& __x)
        -:  913:{
        -:  914:    return back_insert_iterator<_Container>(__x);
        -:  915:}
        -:  916:
        -:  917:template <class _Container>
        -:  918:class _LIBCPP_TEMPLATE_VIS front_insert_iterator
        -:  919:    : public iterator<output_iterator_tag,
        -:  920:                      void,
        -:  921:                      void,
        -:  922:                      void,
        -:  923:                      void>
        -:  924:{
        -:  925:protected:
        -:  926:    _Container* container;
        -:  927:public:
        -:  928:    typedef _Container container_type;
        -:  929:
        -:  930:    _LIBCPP_INLINE_VISIBILITY explicit front_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}
        -:  931:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  932:        {container->push_front(__value_); return *this;}
        -:  933:#ifndef _LIBCPP_CXX03_LANG
        -:  934:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  935:        {container->push_front(_VSTD::move(__value_)); return *this;}
        -:  936:#endif  // _LIBCPP_CXX03_LANG
        -:  937:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator*()     {return *this;}
        -:  938:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator++()    {return *this;}
        -:  939:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator  operator++(int) {return *this;}
        -:  940:};
        -:  941:
        -:  942:template <class _Container>
        -:  943:inline _LIBCPP_INLINE_VISIBILITY
        -:  944:front_insert_iterator<_Container>
        -:  945:front_inserter(_Container& __x)
        -:  946:{
        -:  947:    return front_insert_iterator<_Container>(__x);
        -:  948:}
        -:  949:
        -:  950:template <class _Container>
        -:  951:class _LIBCPP_TEMPLATE_VIS insert_iterator
        -:  952:    : public iterator<output_iterator_tag,
        -:  953:                      void,
        -:  954:                      void,
        -:  955:                      void,
        -:  956:                      void>
        -:  957:{
        -:  958:protected:
        -:  959:    _Container* container;
        -:  960:    typename _Container::iterator iter;
        -:  961:public:
        -:  962:    typedef _Container container_type;
        -:  963:
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEC1ERS9_NS_11__wrap_iterIPS7_EE called 6 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEC2ERS9_NS_11__wrap_iterIPS7_EE called 6 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEC1ERSD_NS_21__hash_const_iteratorIPNS_11__hash_nodeIS7_PvEEEE called 6 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEC2ERSD_NS_21__hash_const_iteratorIPNS_11__hash_nodeIS7_PvEEEE called 6 returned 100% blocks executed 100%
       24:  964:    _LIBCPP_INLINE_VISIBILITY insert_iterator(_Container& __x, typename _Container::iterator __i)
       24:  965:        : container(_VSTD::addressof(__x)), iter(__i) {}
        6:  965-block  0
        6:  965-block  1
        6:  965-block  2
        6:  965-block  3
        -:  966:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  967:        {iter = container->insert(iter, __value_); ++iter; return *this;}
        -:  968:#ifndef _LIBCPP_CXX03_LANG
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEaSEOS7_ called 11 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEaSEOS7_ called 0 returned 0% blocks executed 0%
       11:  969:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(typename _Container::value_type&& __value_)
       11:  970:        {iter = container->insert(iter, _VSTD::move(__value_)); ++iter; return *this;}
       11:  970-block  0
    $$$$$:  970-block  1
        -:  971:#endif  // _LIBCPP_CXX03_LANG
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEdeEv called 11 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEdeEv called 0 returned 0% blocks executed 0%
       11:  972:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator*()        {return *this;}
       11:  972-block  0
    $$$$$:  972-block  1
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEppEv called 11 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEppEv called 0 returned 0% blocks executed 0%
       11:  973:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++()       {return *this;}
       11:  973-block  0
    $$$$$:  973-block  1
        -:  974:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++(int)    {return *this;}
        -:  975:};
        -:  976:
        -:  977:template <class _Container>
        -:  978:inline _LIBCPP_INLINE_VISIBILITY
        -:  979:insert_iterator<_Container>
function _ZNSt3__1L8inserterINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEENS_15insert_iteratorIT_EERSB_NSB_8iteratorE called 6 returned 100% blocks executed 100%
function _ZNSt3__1L8inserterINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEENS_15insert_iteratorIT_EERSF_NSF_8iteratorE called 6 returned 100% blocks executed 100%
       12:  980:inserter(_Container& __x, typename _Container::iterator __i)
        -:  981:{
       12:  982:    return insert_iterator<_Container>(__x, __i);
        6:  982-block  0
        6:  982-block  1
        -:  983:}
        -:  984:
        -:  985:template <class _Tp, class _CharT = char,
        -:  986:          class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>
        -:  987:class _LIBCPP_TEMPLATE_VIS istream_iterator
        -:  988:    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>
        -:  989:{
        -:  990:public:
        -:  991:    typedef _CharT char_type;
        -:  992:    typedef _Traits traits_type;
        -:  993:    typedef basic_istream<_CharT,_Traits> istream_type;
        -:  994:private:
        -:  995:    istream_type* __in_stream_;
        -:  996:    _Tp __value_;
        -:  997:public:
        -:  998:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istream_iterator() : __in_stream_(nullptr), __value_() {}
        -:  999:    _LIBCPP_INLINE_VISIBILITY istream_iterator(istream_type& __s) : __in_stream_(_VSTD::addressof(__s))
        -: 1000:        {
        -: 1001:            if (!(*__in_stream_ >> __value_))
        -: 1002:                __in_stream_ = nullptr;
        -: 1003:        }
        -: 1004:
        -: 1005:    _LIBCPP_INLINE_VISIBILITY const _Tp& operator*() const {return __value_;}
        -: 1006:    _LIBCPP_INLINE_VISIBILITY const _Tp* operator->() const {return _VSTD::addressof((operator*()));}
        -: 1007:    _LIBCPP_INLINE_VISIBILITY istream_iterator& operator++()
        -: 1008:        {
        -: 1009:            if (!(*__in_stream_ >> __value_))
        -: 1010:                __in_stream_ = nullptr;
        -: 1011:            return *this;
        -: 1012:        }
        -: 1013:    _LIBCPP_INLINE_VISIBILITY istream_iterator  operator++(int)
        -: 1014:        {istream_iterator __t(*this); ++(*this); return __t;}
        -: 1015:
        -: 1016:    template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
        -: 1017:    friend _LIBCPP_INLINE_VISIBILITY
        -: 1018:    bool
        -: 1019:    operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
        -: 1020:               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);
        -: 1021:
        -: 1022:    template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
        -: 1023:    friend _LIBCPP_INLINE_VISIBILITY
        -: 1024:    bool
        -: 1025:    operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
        -: 1026:               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);
        -: 1027:};
        -: 1028:
        -: 1029:template <class _Tp, class _CharT, class _Traits, class _Distance>
        -: 1030:inline _LIBCPP_INLINE_VISIBILITY
        -: 1031:bool
        -: 1032:operator==(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
        -: 1033:           const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y)
        -: 1034:{
        -: 1035:    return __x.__in_stream_ == __y.__in_stream_;
        -: 1036:}
        -: 1037:
        -: 1038:template <class _Tp, class _CharT, class _Traits, class _Distance>
        -: 1039:inline _LIBCPP_INLINE_VISIBILITY
        -: 1040:bool
        -: 1041:operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
        -: 1042:           const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y)
        -: 1043:{
        -: 1044:    return !(__x == __y);
        -: 1045:}
        -: 1046:
        -: 1047:template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >
        -: 1048:class _LIBCPP_TEMPLATE_VIS ostream_iterator
        -: 1049:    : public iterator<output_iterator_tag, void, void, void, void>
        -: 1050:{
        -: 1051:public:
        -: 1052:    typedef output_iterator_tag             iterator_category;
        -: 1053:    typedef void                            value_type;
        -: 1054:#if _LIBCPP_STD_VER > 17
        -: 1055:    typedef std::ptrdiff_t                  difference_type;
        -: 1056:#else
        -: 1057:    typedef void                            difference_type;
        -: 1058:#endif
        -: 1059:    typedef void                            pointer;
        -: 1060:    typedef void                            reference;
        -: 1061:    typedef _CharT                          char_type;
        -: 1062:    typedef _Traits                         traits_type;
        -: 1063:    typedef basic_ostream<_CharT, _Traits>  ostream_type;
        -: 1064:
        -: 1065:private:
        -: 1066:    ostream_type* __out_stream_;
        -: 1067:    const char_type* __delim_;
        -: 1068:public:
        -: 1069:    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s) _NOEXCEPT
        -: 1070:        : __out_stream_(_VSTD::addressof(__s)), __delim_(nullptr) {}
        -: 1071:    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s, const _CharT* __delimiter) _NOEXCEPT
        -: 1072:        : __out_stream_(_VSTD::addressof(__s)), __delim_(__delimiter) {}
        -: 1073:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator=(const _Tp& __value_)
        -: 1074:        {
        -: 1075:            *__out_stream_ << __value_;
        -: 1076:            if (__delim_)
        -: 1077:                *__out_stream_ << __delim_;
        -: 1078:            return *this;
        -: 1079:        }
        -: 1080:
        -: 1081:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator*()     {return *this;}
        -: 1082:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++()    {return *this;}
        -: 1083:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++(int) {return *this;}
        -: 1084:};
        -: 1085:
        -: 1086:template<class _CharT, class _Traits>
        -: 1087:class _LIBCPP_TEMPLATE_VIS istreambuf_iterator
        -: 1088:    : public iterator<input_iterator_tag, _CharT,
        -: 1089:                      typename _Traits::off_type, _CharT*,
        -: 1090:                      _CharT>
        -: 1091:{
        -: 1092:public:
        -: 1093:    typedef _CharT                          char_type;
        -: 1094:    typedef _Traits                         traits_type;
        -: 1095:    typedef typename _Traits::int_type      int_type;
        -: 1096:    typedef basic_streambuf<_CharT,_Traits> streambuf_type;
        -: 1097:    typedef basic_istream<_CharT,_Traits>   istream_type;
        -: 1098:private:
        -: 1099:    mutable streambuf_type* __sbuf_;
        -: 1100:
        -: 1101:    class __proxy
        -: 1102:    {
        -: 1103:        char_type __keep_;
        -: 1104:        streambuf_type* __sbuf_;
        -: 1105:        _LIBCPP_INLINE_VISIBILITY __proxy(char_type __c, streambuf_type* __s)
        -: 1106:            : __keep_(__c), __sbuf_(__s) {}
        -: 1107:        friend class istreambuf_iterator;
        -: 1108:    public:
        -: 1109:        _LIBCPP_INLINE_VISIBILITY char_type operator*() const {return __keep_;}
        -: 1110:    };
        -: 1111:
        -: 1112:    _LIBCPP_INLINE_VISIBILITY
        -: 1113:    bool __test_for_eof() const
        -: 1114:    {
        -: 1115:        if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))
        -: 1116:            __sbuf_ = nullptr;
        -: 1117:        return __sbuf_ == nullptr;
        -: 1118:    }
        -: 1119:public:
        -: 1120:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istreambuf_iterator() _NOEXCEPT : __sbuf_(nullptr) {}
        -: 1121:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(istream_type& __s) _NOEXCEPT
        -: 1122:        : __sbuf_(__s.rdbuf()) {}
        -: 1123:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(streambuf_type* __s) _NOEXCEPT
        -: 1124:        : __sbuf_(__s) {}
        -: 1125:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(const __proxy& __p) _NOEXCEPT
        -: 1126:        : __sbuf_(__p.__sbuf_) {}
        -: 1127:
        -: 1128:    _LIBCPP_INLINE_VISIBILITY char_type  operator*() const
        -: 1129:        {return static_cast<char_type>(__sbuf_->sgetc());}
        -: 1130:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator& operator++()
        -: 1131:        {
        -: 1132:            __sbuf_->sbumpc();
        -: 1133:            return *this;
        -: 1134:        }
        -: 1135:    _LIBCPP_INLINE_VISIBILITY __proxy              operator++(int)
        -: 1136:        {
        -: 1137:            return __proxy(__sbuf_->sbumpc(), __sbuf_);
        -: 1138:        }
        -: 1139:
        -: 1140:    _LIBCPP_INLINE_VISIBILITY bool equal(const istreambuf_iterator& __b) const
        -: 1141:        {return __test_for_eof() == __b.__test_for_eof();}
        -: 1142:};
        -: 1143:
        -: 1144:template <class _CharT, class _Traits>
        -: 1145:inline _LIBCPP_INLINE_VISIBILITY
        -: 1146:bool operator==(const istreambuf_iterator<_CharT,_Traits>& __a,
        -: 1147:                const istreambuf_iterator<_CharT,_Traits>& __b)
        -: 1148:                {return __a.equal(__b);}
        -: 1149:
        -: 1150:template <class _CharT, class _Traits>
        -: 1151:inline _LIBCPP_INLINE_VISIBILITY
        -: 1152:bool operator!=(const istreambuf_iterator<_CharT,_Traits>& __a,
        -: 1153:                const istreambuf_iterator<_CharT,_Traits>& __b)
        -: 1154:                {return !__a.equal(__b);}
        -: 1155:
        -: 1156:template <class _CharT, class _Traits>
        -: 1157:class _LIBCPP_TEMPLATE_VIS ostreambuf_iterator
        -: 1158:    : public iterator<output_iterator_tag, void, void, void, void>
        -: 1159:{
        -: 1160:public:
        -: 1161:    typedef output_iterator_tag                 iterator_category;
        -: 1162:    typedef void                                value_type;
        -: 1163:#if _LIBCPP_STD_VER > 17
        -: 1164:    typedef std::ptrdiff_t                      difference_type;
        -: 1165:#else
        -: 1166:    typedef void                                difference_type;
        -: 1167:#endif
        -: 1168:    typedef void                                pointer;
        -: 1169:    typedef void                                reference;
        -: 1170:    typedef _CharT                              char_type;
        -: 1171:    typedef _Traits                             traits_type;
        -: 1172:    typedef basic_streambuf<_CharT, _Traits>    streambuf_type;
        -: 1173:    typedef basic_ostream<_CharT, _Traits>      ostream_type;
        -: 1174:
        -: 1175:private:
        -: 1176:    streambuf_type* __sbuf_;
        -: 1177:public:
function _ZNSt3__119ostreambuf_iteratorIcNS_11char_traitsIcEEEC1ERNS_13basic_ostreamIcS2_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__119ostreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_ostreamIcS2_EE called 0 returned 0% blocks executed 0%
    #####: 1178:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(ostream_type& __s) _NOEXCEPT
    #####: 1179:        : __sbuf_(__s.rdbuf()) {}
    $$$$$: 1179-block  0
    $$$$$: 1179-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1179-block  2
    $$$$$: 1179-block  3
        -: 1180:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(streambuf_type* __s) _NOEXCEPT
        -: 1181:        : __sbuf_(__s) {}
        -: 1182:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator=(_CharT __c)
        -: 1183:        {
        -: 1184:            if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
        -: 1185:                __sbuf_ = nullptr;
        -: 1186:            return *this;
        -: 1187:        }
        -: 1188:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator*()     {return *this;}
        -: 1189:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++()    {return *this;}
        -: 1190:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++(int) {return *this;}
function _ZNKSt3__119ostreambuf_iteratorIcNS_11char_traitsIcEEE6failedEv called 0 returned 0% blocks executed 0%
    #####: 1191:    _LIBCPP_INLINE_VISIBILITY bool failed() const _NOEXCEPT {return __sbuf_ == nullptr;}
    $$$$$: 1191-block  0
        -: 1192:
        -: 1193:    template <class _Ch, class _Tr>
        -: 1194:    friend
        -: 1195:    _LIBCPP_HIDDEN
        -: 1196:    ostreambuf_iterator<_Ch, _Tr>
        -: 1197:    __pad_and_output(ostreambuf_iterator<_Ch, _Tr> __s,
        -: 1198:                     const _Ch* __ob, const _Ch* __op, const _Ch* __oe,
        -: 1199:                     ios_base& __iob, _Ch __fl);
        -: 1200:};
        -: 1201:
        -: 1202:template <class _Iter>
        -: 1203:class _LIBCPP_TEMPLATE_VIS move_iterator
        -: 1204:{
        -: 1205:private:
        -: 1206:    _Iter __i;
        -: 1207:public:
        -: 1208:    typedef _Iter                                            iterator_type;
        -: 1209:    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
        -: 1210:    typedef typename iterator_traits<iterator_type>::value_type value_type;
        -: 1211:    typedef typename iterator_traits<iterator_type>::difference_type difference_type;
        -: 1212:    typedef iterator_type pointer;
        -: 1213:#ifndef _LIBCPP_CXX03_LANG
        -: 1214:    typedef typename iterator_traits<iterator_type>::reference __reference;
        -: 1215:    typedef typename conditional<
        -: 1216:            is_reference<__reference>::value,
        -: 1217:            typename remove_reference<__reference>::type&&,
        -: 1218:            __reference
        -: 1219:        >::type reference;
        -: 1220:#else
        -: 1221:    typedef typename iterator_traits<iterator_type>::reference reference;
        -: 1222:#endif
        -: 1223:
        -: 1224:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1225:    move_iterator() : __i() {}
        -: 1226:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPcEC1ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPcEC2ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPN7testing9TestSuiteEEC1ES4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPN7testing9TestSuiteEEC2ES4_ called 0 returned 0% blocks executed 0%
    #####: 1227:    explicit move_iterator(_Iter __x) : __i(__x) {}
    $$$$$: 1227-block  0
    $$$$$: 1227-block  1
    $$$$$: 1227-block  2
    $$$$$: 1227-block  3
    $$$$$: 1227-block  4
    $$$$$: 1227-block  5
        -: 1228:    template <class _Up>
        -: 1229:      _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1230:      move_iterator(const move_iterator<_Up>& __u) : __i(__u.base()) {}
function _ZNKSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPPcE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPPN7testing9TestSuiteEE4baseEv called 0 returned 0% blocks executed 0%
    #####: 1231:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 _Iter base() const {return __i;}
    $$$$$: 1231-block  0
    $$$$$: 1231-block  1
    $$$$$: 1231-block  2
        -: 1232:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNKSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPPcEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPPN7testing9TestSuiteEEdeEv called 0 returned 0% blocks executed 0%
    #####: 1233:    reference operator*() const { return static_cast<reference>(*__i); }
    $$$$$: 1233-block  0
    $$$$$: 1233-block  1
    $$$$$: 1233-block  2
        -: 1234:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1235:    pointer  operator->() const { return __i;}
        -: 1236:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPcEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPN7testing9TestSuiteEEppEv called 0 returned 0% blocks executed 0%
    #####: 1237:    move_iterator& operator++() {++__i; return *this;}
    $$$$$: 1237-block  0
    $$$$$: 1237-block  1
    $$$$$: 1237-block  2
        -: 1238:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1239:    move_iterator  operator++(int) {move_iterator __tmp(*this); ++__i; return __tmp;}
        -: 1240:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1241:    move_iterator& operator--() {--__i; return *this;}
        -: 1242:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1243:    move_iterator  operator--(int) {move_iterator __tmp(*this); --__i; return __tmp;}
        -: 1244:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1245:    move_iterator  operator+ (difference_type __n) const {return move_iterator(__i + __n);}
        -: 1246:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1247:    move_iterator& operator+=(difference_type __n) {__i += __n; return *this;}
        -: 1248:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1249:    move_iterator  operator- (difference_type __n) const {return move_iterator(__i - __n);}
        -: 1250:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1251:    move_iterator& operator-=(difference_type __n) {__i -= __n; return *this;}
        -: 1252:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1253:    reference operator[](difference_type __n) const { return static_cast<reference>(__i[__n]); }
        -: 1254:};
        -: 1255:
        -: 1256:template <class _Iter1, class _Iter2>
        -: 1257:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1258:bool
        -: 1259:operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1260:{
        -: 1261:    return __x.base() == __y.base();
        -: 1262:}
        -: 1263:
        -: 1264:template <class _Iter1, class _Iter2>
        -: 1265:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1266:bool
        -: 1267:operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1268:{
        -: 1269:    return __x.base() < __y.base();
        -: 1270:}
        -: 1271:
        -: 1272:template <class _Iter1, class _Iter2>
        -: 1273:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1274:bool
        -: 1275:operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1276:{
        -: 1277:    return __x.base() != __y.base();
        -: 1278:}
        -: 1279:
        -: 1280:template <class _Iter1, class _Iter2>
        -: 1281:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1282:bool
        -: 1283:operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1284:{
        -: 1285:    return __x.base() > __y.base();
        -: 1286:}
        -: 1287:
        -: 1288:template <class _Iter1, class _Iter2>
        -: 1289:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1290:bool
        -: 1291:operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1292:{
        -: 1293:    return __x.base() >= __y.base();
        -: 1294:}
        -: 1295:
        -: 1296:template <class _Iter1, class _Iter2>
        -: 1297:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1298:bool
        -: 1299:operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1300:{
        -: 1301:    return __x.base() <= __y.base();
        -: 1302:}
        -: 1303:
        -: 1304:#ifndef _LIBCPP_CXX03_LANG
        -: 1305:template <class _Iter1, class _Iter2>
        -: 1306:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1307:auto
function _ZNSt3__1miIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS9_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPPcS2_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS4_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPPN7testing9TestSuiteES4_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
    #####: 1308:operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1309:-> decltype(__x.base() - __y.base())
        -: 1310:{
    #####: 1311:    return __x.base() - __y.base();
    $$$$$: 1311-block  0
    $$$$$: 1311-block  1
    $$$$$: 1311-block  2
        -: 1312:}
        -: 1313:#else
        -: 1314:template <class _Iter1, class _Iter2>
        -: 1315:inline _LIBCPP_INLINE_VISIBILITY
        -: 1316:typename move_iterator<_Iter1>::difference_type
        -: 1317:operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1318:{
        -: 1319:    return __x.base() - __y.base();
        -: 1320:}
        -: 1321:#endif
        -: 1322:
        -: 1323:template <class _Iter>
        -: 1324:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1325:move_iterator<_Iter>
        -: 1326:operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)
        -: 1327:{
        -: 1328:    return move_iterator<_Iter>(__x.base() + __n);
        -: 1329:}
        -: 1330:
        -: 1331:template <class _Iter>
        -: 1332:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1333:move_iterator<_Iter>
        -: 1334:make_move_iterator(_Iter __i)
        -: 1335:{
        -: 1336:    return move_iterator<_Iter>(__i);
        -: 1337:}
        -: 1338:
        -: 1339:// __wrap_iter
        -: 1340:
        -: 1341:template <class _Iter> class __wrap_iter;
        -: 1342:
        -: 1343:template <class _Iter1, class _Iter2>
        -: 1344:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1345:bool
        -: 1346:operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1347:
        -: 1348:template <class _Iter1, class _Iter2>
        -: 1349:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1350:bool
        -: 1351:operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1352:
        -: 1353:template <class _Iter1, class _Iter2>
        -: 1354:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1355:bool
        -: 1356:operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1357:
        -: 1358:template <class _Iter1, class _Iter2>
        -: 1359:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1360:bool
        -: 1361:operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1362:
        -: 1363:template <class _Iter1, class _Iter2>
        -: 1364:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1365:bool
        -: 1366:operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1367:
        -: 1368:template <class _Iter1, class _Iter2>
        -: 1369:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1370:bool
        -: 1371:operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1372:
        -: 1373:#ifndef _LIBCPP_CXX03_LANG
        -: 1374:template <class _Iter1, class _Iter2>
        -: 1375:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1376:auto
        -: 1377:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1378:-> decltype(__x.base() - __y.base());
        -: 1379:#else
        -: 1380:template <class _Iter1, class _Iter2>
        -: 1381:_LIBCPP_INLINE_VISIBILITY
        -: 1382:typename __wrap_iter<_Iter1>::difference_type
        -: 1383:operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1384:#endif
        -: 1385:
        -: 1386:template <class _Iter>
        -: 1387:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1388:__wrap_iter<_Iter>
        -: 1389:operator+(typename __wrap_iter<_Iter>::difference_type, __wrap_iter<_Iter>) _NOEXCEPT;
        -: 1390:
        -: 1391:template <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 copy(_Ip, _Ip, _Op);
        -: 1392:template <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 copy_backward(_B1, _B1, _B2);
        -: 1393:template <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 move(_Ip, _Ip, _Op);
        -: 1394:template <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 move_backward(_B1, _B1, _B2);
        -: 1395:
        -: 1396:#if _LIBCPP_DEBUG_LEVEL < 2
        -: 1397:
        -: 1398:template <class _Tp>
        -: 1399:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1400:typename enable_if
        -: 1401:<
        -: 1402:    is_trivially_copy_assignable<_Tp>::value,
        -: 1403:    _Tp*
        -: 1404:>::type
        -: 1405:__unwrap_iter(__wrap_iter<_Tp*>);
        -: 1406:
        -: 1407:#else
        -: 1408:
        -: 1409:template <class _Tp>
        -: 1410:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1411:typename enable_if
        -: 1412:<
        -: 1413:    is_trivially_copy_assignable<_Tp>::value,
        -: 1414:    __wrap_iter<_Tp*>
        -: 1415:>::type
        -: 1416:__unwrap_iter(__wrap_iter<_Tp*> __i);
        -: 1417:
        -: 1418:#endif
        -: 1419:
        -: 1420:template <class _Iter>
        -: 1421:class __wrap_iter
        -: 1422:{
        -: 1423:public:
        -: 1424:    typedef _Iter                                                      iterator_type;
        -: 1425:    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
        -: 1426:    typedef typename iterator_traits<iterator_type>::value_type        value_type;
        -: 1427:    typedef typename iterator_traits<iterator_type>::difference_type   difference_type;
        -: 1428:    typedef typename iterator_traits<iterator_type>::pointer           pointer;
        -: 1429:    typedef typename iterator_traits<iterator_type>::reference         reference;
        -: 1430:private:
        -: 1431:    iterator_type __i;
        -: 1432:public:
        -: 1433:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter() _NOEXCEPT
        -: 1434:#if _LIBCPP_STD_VER > 11
        -: 1435:                : __i{}
        -: 1436:#endif
        -: 1437:    {
        -: 1438:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1439:        __get_db()->__insert_i(this);
        -: 1440:#endif
        -: 1441:    }
        -: 1442:    template <class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC1IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC1IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKcEC1IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1IPS6_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleISC_S8_EE5valueEvE4typeE called 11 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC2IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC2IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPcEC1IPS1_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS7_S3_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPcEC2IPS1_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS7_S3_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKcEC2IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2IPS6_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleISC_S8_EE5valueEvE4typeE called 11 returned 100% blocks executed 100%
       26: 1443:        __wrap_iter(const __wrap_iter<_Up>& __u,
        -: 1444:            typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = nullptr) _NOEXCEPT
       13: 1445:            : __i(__u.base())
       13: 1446:    {
        -: 1447:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1448:        __get_db()->__iterator_copy(this, &__u);
        -: 1449:#endif
       26: 1450:    }
    $$$$$: 1450-block  0
    $$$$$: 1450-block  1
        2: 1450-block  2
       11: 1450-block  3
    $$$$$: 1450-block  4
    $$$$$: 1450-block  5
    $$$$$: 1450-block  6
    $$$$$: 1450-block  7
        2: 1450-block  8
       11: 1450-block  9
        -: 1451:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1452:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1453:    __wrap_iter(const __wrap_iter& __x)
        -: 1454:        : __i(__x.base())
        -: 1455:    {
        -: 1456:        __get_db()->__iterator_copy(this, &__x);
        -: 1457:    }
        -: 1458:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1459:    __wrap_iter& operator=(const __wrap_iter& __x)
        -: 1460:    {
        -: 1461:        if (this != &__x)
        -: 1462:        {
        -: 1463:            __get_db()->__iterator_copy(this, &__x);
        -: 1464:            __i = __x.__i;
        -: 1465:        }
        -: 1466:        return *this;
        -: 1467:    }
        -: 1468:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1469:    ~__wrap_iter()
        -: 1470:    {
        -: 1471:        __get_db()->__erase_i(this);
        -: 1472:    }
        -: 1473:#endif
function _ZNKSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKcEdeEv called 20 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing9TestSuiteEEdeEv called 20 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing9TestSuiteEEdeEv called 21 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPcEdeEv called 158 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv called 53 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv called 22 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPcEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPN7testing12TestPropertyEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKN7testing14TestPartResultEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKPN7testing8TestInfoEEdeEv called 90 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKPN7testing11EnvironmentEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing11EnvironmentEEdeEv called 0 returned 0% blocks executed 0%
      384: 1474:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference operator*() const _NOEXCEPT
        -: 1475:    {
        -: 1476:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1477:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1478:                       "Attempted to dereference a non-dereferenceable iterator");
        -: 1479:#endif
      384: 1480:        return *__i;
    $$$$$: 1480-block  0
       20: 1480-block  1
       20: 1480-block  2
       21: 1480-block  3
      158: 1480-block  4
       53: 1480-block  5
       22: 1480-block  6
    $$$$$: 1480-block  7
    $$$$$: 1480-block  8
    $$$$$: 1480-block  9
    $$$$$: 1480-block 10
    $$$$$: 1480-block 11
       90: 1480-block 12
    $$$$$: 1480-block 13
    $$$$$: 1480-block 14
    $$$$$: 1480-block 15
        -: 1481:    }
function _ZNKSt3__111__wrap_iterIPN7testing12TestPropertyEEptEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEptEv called 0 returned 0% blocks executed 0%
    #####: 1482:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG pointer  operator->() const _NOEXCEPT
        -: 1483:    {
        -: 1484:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1485:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1486:                       "Attempted to dereference a non-dereferenceable iterator");
        -: 1487:#endif
    #####: 1488:        return (pointer)_VSTD::addressof(*__i);
    $$$$$: 1488-block  0
    $$$$$: 1488-block  1
        -: 1489:    }
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKcEppEv called 9 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEppEv called 20 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEppEv called 4 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPcEppEv called 152 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv called 44 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv called 33 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPcEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing12TestPropertyEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing14TestPartResultEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing8TestInfoEEppEv called 90 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing11EnvironmentEEppEv called 0 returned 0% blocks executed 0%
      352: 1490:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator++() _NOEXCEPT
        -: 1491:    {
        -: 1492:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1493:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1494:                       "Attempted to increment non-incrementable iterator");
        -: 1495:#endif
      352: 1496:        ++__i;
      352: 1497:        return *this;
    $$$$$: 1497-block  0
        9: 1497-block  1
       20: 1497-block  2
        4: 1497-block  3
      152: 1497-block  4
       44: 1497-block  5
       33: 1497-block  6
    $$$$$: 1497-block  7
    $$$$$: 1497-block  8
    $$$$$: 1497-block  9
    $$$$$: 1497-block 10
    $$$$$: 1497-block 11
       90: 1497-block 12
    $$$$$: 1497-block 13
    $$$$$: 1497-block 14
        -: 1498:    }
function _ZNSt3__111__wrap_iterIPcEppEi called 76 returned 100% blocks executed 100%
       76: 1499:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator++(int) _NOEXCEPT
       76: 1500:        {__wrap_iter __tmp(*this); ++(*this); return __tmp;}
       76: 1500-block  0
        -: 1501:
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEmmEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPcEmmEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEmmEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEmmEv called 24 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing11EnvironmentEEmmEv called 0 returned 0% blocks executed 0%
       24: 1502:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator--() _NOEXCEPT
        -: 1503:    {
        -: 1504:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1505:        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),
        -: 1506:                       "Attempted to decrement non-decrementable iterator");
        -: 1507:#endif
       24: 1508:        --__i;
       24: 1509:        return *this;
    $$$$$: 1509-block  0
    $$$$$: 1509-block  1
    $$$$$: 1509-block  2
       24: 1509-block  3
    $$$$$: 1509-block  4
        -: 1510:    }
        -: 1511:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator--(int) _NOEXCEPT
        -: 1512:        {__wrap_iter __tmp(*this); --(*this); return __tmp;}
function _ZNKSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing17TestEventListenerEEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing9TestSuiteEEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPcEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPcEplEl called 1 returned 100% blocks executed 100%
        1: 1513:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator+ (difference_type __n) const _NOEXCEPT
        1: 1514:        {__wrap_iter __w(*this); __w += __n; return __w;}
    $$$$$: 1514-block  0
    $$$$$: 1514-block  1
    $$$$$: 1514-block  2
    $$$$$: 1514-block  3
        1: 1514-block  4
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing17TestEventListenerEEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPcEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPcEpLEl called 7 returned 100% blocks executed 100%
        7: 1515:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator+=(difference_type __n) _NOEXCEPT
        -: 1516:    {
        -: 1517:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1518:        _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n),
        -: 1519:                   "Attempted to add/subtract iterator outside of valid range");
        -: 1520:#endif
        7: 1521:        __i += __n;
        7: 1522:        return *this;
    $$$$$: 1522-block  0
    $$$$$: 1522-block  1
    $$$$$: 1522-block  2
    $$$$$: 1522-block  3
        7: 1522-block  4
        -: 1523:    }
function _ZNKSt3__111__wrap_iterIPPcEmiEl called 0 returned 0% blocks executed 0%
    #####: 1524:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator- (difference_type __n) const _NOEXCEPT
    #####: 1525:        {return *this + (-__n);}
    $$$$$: 1525-block  0
        -: 1526:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator-=(difference_type __n) _NOEXCEPT
        -: 1527:        {*this += -__n; return *this;}
        -: 1528:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference    operator[](difference_type __n) const _NOEXCEPT
        -: 1529:    {
        -: 1530:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1531:        _LIBCPP_ASSERT(__get_const_db()->__subscriptable(this, __n),
        -: 1532:                   "Attempted to subscript iterator outside of valid range");
        -: 1533:#endif
        -: 1534:        return __i[__n];
        -: 1535:    }
        -: 1536:
function _ZNKSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE4baseEv called 114 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE4baseEv called 179 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPN7testing12TestPropertyEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEE4baseEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing17TestEventListenerEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKcE4baseEv called 43 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing9TestSuiteEE4baseEv called 50 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing9TestSuiteEE4baseEv called 60 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPcE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPcE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPcE4baseEv called 171 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKN7testing14TestPartResultEE4baseEv called 130 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing8TestInfoEE4baseEv called 260 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing17TestEventListenerEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKPN7testing11EnvironmentEE4baseEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing11EnvironmentEE4baseEv called 2 returned 100% blocks executed 100%
     1013: 1537:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG iterator_type base() const _NOEXCEPT {return __i;}
      114: 1537-block  0
      179: 1537-block  1
    $$$$$: 1537-block  2
    $$$$$: 1537-block  3
        2: 1537-block  4
    $$$$$: 1537-block  5
       43: 1537-block  6
       50: 1537-block  7
       60: 1537-block  8
    $$$$$: 1537-block  9
    $$$$$: 1537-block 10
      171: 1537-block 11
    $$$$$: 1537-block 12
      130: 1537-block 13
      260: 1537-block 14
    $$$$$: 1537-block 15
        2: 1537-block 16
        2: 1537-block 17
        -: 1538:
        -: 1539:private:
        -: 1540:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1541:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(const void* __p, iterator_type __x) : __i(__x)
        -: 1542:    {
        -: 1543:        __get_db()->__insert_ic(this, __p);
        -: 1544:    }
        -: 1545:#else
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ES7_ called 58 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ES7_ called 58 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC1ES5_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC2ES5_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPcEC1ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPcEC2ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPcEC1ES1_ called 12 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPcEC2ES1_ called 12 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKcEC1ES2_ called 22 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKcEC2ES2_ called 22 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ES8_ called 80 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ES8_ called 80 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEC1ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEC2ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEC1ES6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEC2ES6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing12TestPropertyEEC1ES3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing12TestPropertyEEC2ES3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing14TestPartResultEEC1ES4_ called 130 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKN7testing14TestPartResultEEC2ES4_ called 130 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing8TestInfoEEC1ES5_ called 161 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing8TestInfoEEC2ES5_ called 161 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC1ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC2ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing17TestEventListenerEEC1ES4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing17TestEventListenerEEC2ES4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC1ES5_ called 26 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC2ES5_ called 26 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing11EnvironmentEEC1ES5_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing11EnvironmentEEC2ES5_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEC1ES4_ called 29 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEC2ES4_ called 29 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing11EnvironmentEEC1ES4_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing11EnvironmentEEC2ES4_ called 2 returned 100% blocks executed 100%
     1048: 1546:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(iterator_type __x) _NOEXCEPT : __i(__x) {}
       58: 1546-block  0
       58: 1546-block  1
        2: 1546-block  2
        2: 1546-block  3
    $$$$$: 1546-block  4
    $$$$$: 1546-block  5
       12: 1546-block  6
       12: 1546-block  7
       22: 1546-block  8
       22: 1546-block  9
       80: 1546-block 10
       80: 1546-block 11
    $$$$$: 1546-block 12
    $$$$$: 1546-block 13
    $$$$$: 1546-block 14
    $$$$$: 1546-block 15
    $$$$$: 1546-block 16
    $$$$$: 1546-block 17
      130: 1546-block 18
      130: 1546-block 19
      161: 1546-block 20
      161: 1546-block 21
    $$$$$: 1546-block 22
    $$$$$: 1546-block 23
    $$$$$: 1546-block 24
    $$$$$: 1546-block 25
       26: 1546-block 26
       26: 1546-block 27
        2: 1546-block 28
        2: 1546-block 29
       29: 1546-block 30
       29: 1546-block 31
        2: 1546-block 32
        2: 1546-block 33
        -: 1547:#endif
        -: 1548:
        -: 1549:    template <class _Up> friend class __wrap_iter;
        -: 1550:    template <class _CharT, class _Traits, class _Alloc> friend class basic_string;
        -: 1551:    template <class _Tp, class _Alloc> friend class _LIBCPP_TEMPLATE_VIS vector;
        -: 1552:    template <class _Tp, size_t> friend class _LIBCPP_TEMPLATE_VIS span;
        -: 1553:
        -: 1554:    template <class _Iter1, class _Iter2>
        -: 1555:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1556:    bool
        -: 1557:    operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1558:
        -: 1559:    template <class _Iter1, class _Iter2>
        -: 1560:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1561:    bool
        -: 1562:    operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1563:
        -: 1564:    template <class _Iter1, class _Iter2>
        -: 1565:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1566:    bool
        -: 1567:    operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1568:
        -: 1569:    template <class _Iter1, class _Iter2>
        -: 1570:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1571:    bool
        -: 1572:    operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1573:
        -: 1574:    template <class _Iter1, class _Iter2>
        -: 1575:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1576:    bool
        -: 1577:    operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1578:
        -: 1579:    template <class _Iter1, class _Iter2>
        -: 1580:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1581:    bool
        -: 1582:    operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1583:
        -: 1584:#ifndef _LIBCPP_CXX03_LANG
        -: 1585:    template <class _Iter1, class _Iter2>
        -: 1586:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1587:    auto
        -: 1588:    operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1589:    -> decltype(__x.base() - __y.base());
        -: 1590:#else
        -: 1591:    template <class _Iter1, class _Iter2>
        -: 1592:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1593:    typename __wrap_iter<_Iter1>::difference_type
        -: 1594:    operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1595:#endif
        -: 1596:
        -: 1597:    template <class _Iter1>
        -: 1598:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1599:    __wrap_iter<_Iter1>
        -: 1600:    operator+(typename __wrap_iter<_Iter1>::difference_type, __wrap_iter<_Iter1>) _NOEXCEPT;
        -: 1601:
        -: 1602:    template <class _Ip, class _Op> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _Op copy(_Ip, _Ip, _Op);
        -: 1603:    template <class _B1, class _B2> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _B2 copy_backward(_B1, _B1, _B2);
        -: 1604:    template <class _Ip, class _Op> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _Op move(_Ip, _Ip, _Op);
        -: 1605:    template <class _B1, class _B2> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _B2 move_backward(_B1, _B1, _B2);
        -: 1606:
        -: 1607:#if _LIBCPP_DEBUG_LEVEL < 2
        -: 1608:    template <class _Tp>
        -: 1609:    _LIBCPP_CONSTEXPR friend
        -: 1610:    typename enable_if
        -: 1611:    <
        -: 1612:        is_trivially_copy_assignable<_Tp>::value,
        -: 1613:        _Tp*
        -: 1614:    >::type
        -: 1615:    __unwrap_iter(__wrap_iter<_Tp*>);
        -: 1616:#else
        -: 1617:  template <class _Tp>
        -: 1618:  inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR friend
        -: 1619:  typename enable_if
        -: 1620:  <
        -: 1621:      is_trivially_copy_assignable<_Tp>::value,
        -: 1622:      __wrap_iter<_Tp*>
        -: 1623:  >::type
        -: 1624:  __unwrap_iter(__wrap_iter<_Tp*> __i);
        -: 1625:#endif
        -: 1626:};
        -: 1627:
        -: 1628:template <class _Iter1, class _Iter2>
        -: 1629:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1630:bool
function _ZNSt3__1eqIPKN7testing8internal13edit_distance8EditTypeES6_EEbRKNS_11__wrap_iterIT_EERKNS7_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPN7testing12TestPropertyES3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPcS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE called 84 returned 100% blocks executed 100%
function _ZNSt3__1eqIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EEbRKNS_11__wrap_iterIT_EERKNS8_IT0_EE called 40 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPN7testing8internal30ParameterizedTestSuiteInfoBaseES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKcS2_EEbRKNS_11__wrap_iterIT_EERKNS3_IT0_EE called 20 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEbRKNS_11__wrap_iterIT_EERKNS9_IT0_EE called 84 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing9TestSuiteES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 25 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPN7testing9TestSuiteES4_EEbRKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 30 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPcS2_EEbRKNS_11__wrap_iterIT_EERKNS3_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS6_EEbRKNS_11__wrap_iterIT_EERKNSA_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPN7testing8internal13edit_distance8EditTypeES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPKN7testing14TestPartResultES4_EEbRKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 65 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing8TestInfoES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 130 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing17TestEventListenerES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPKPN7testing11EnvironmentES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPN7testing11EnvironmentES4_EEbRKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 1 returned 100% blocks executed 100%
      481: 1631:operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1632:{
      481: 1633:    return __x.base() == __y.base();
    $$$$$: 1633-block  0
    $$$$$: 1633-block  1
       84: 1633-block  2
       40: 1633-block  3
        1: 1633-block  4
       20: 1633-block  5
       84: 1633-block  6
       25: 1633-block  7
       30: 1633-block  8
    $$$$$: 1633-block  9
    $$$$$: 1633-block 10
    $$$$$: 1633-block 11
       65: 1633-block 12
      130: 1633-block 13
    $$$$$: 1633-block 14
        1: 1633-block 15
        1: 1633-block 16
        -: 1634:}
        -: 1635:
        -: 1636:template <class _Iter1, class _Iter2>
        -: 1637:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1638:bool
function _ZNSt3__1ltIPN7testing8internal13edit_distance8EditTypeES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
    #####: 1639:operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1640:{
        -: 1641:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1642:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1643:                   "Attempted to compare incomparable iterators");
        -: 1644:#endif
    #####: 1645:    return __x.base() < __y.base();
    $$$$$: 1645-block  0
        -: 1646:}
        -: 1647:
        -: 1648:template <class _Iter1, class _Iter2>
        -: 1649:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1650:bool
function _ZNSt3__1neIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS6_EEbRKNS_11__wrap_iterIT_EERKNSA_IT0_EE called 0 returned 0% blocks executed 0%
    #####: 1651:operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1652:{
    #####: 1653:    return !(__x == __y);
    $$$$$: 1653-block  0
        -: 1654:}
        -: 1655:
        -: 1656:template <class _Iter1, class _Iter2>
        -: 1657:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1658:bool
        -: 1659:operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1660:{
        -: 1661:    return __y < __x;
        -: 1662:}
        -: 1663:
        -: 1664:template <class _Iter1, class _Iter2>
        -: 1665:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1666:bool
        -: 1667:operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1668:{
        -: 1669:    return !(__x < __y);
        -: 1670:}
        -: 1671:
        -: 1672:template <class _Iter1, class _Iter2>
        -: 1673:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1674:bool
        -: 1675:operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1676:{
        -: 1677:    return !(__y < __x);
        -: 1678:}
        -: 1679:
        -: 1680:template <class _Iter1>
        -: 1681:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1682:bool
function _ZNSt3__1neIPKN7testing8internal13edit_distance8EditTypeEEEbRKNS_11__wrap_iterIT_EESB_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPKcEEbRKNS_11__wrap_iterIT_EES7_ called 20 returned 100% blocks executed 100%
function _ZNSt3__1neIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEbRKNS_11__wrap_iterIT_EESD_ called 84 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing9TestSuiteEEEbRKNS_11__wrap_iterIT_EESA_ called 25 returned 100% blocks executed 100%
function _ZNSt3__1neIPPN7testing9TestSuiteEEEbRKNS_11__wrap_iterIT_EES9_ called 30 returned 100% blocks executed 100%
function _ZNSt3__1neIPcEEbRKNS_11__wrap_iterIT_EES6_ called 77 returned 100% blocks executed 100%
function _ZNSt3__1neIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEbRKNS_11__wrap_iterIT_EESC_ called 23 returned 100% blocks executed 100%
function _ZNSt3__1neIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEEbRKNS_11__wrap_iterIT_EESA_ called 1 returned 100% blocks executed 100%
function _ZNSt3__1neIPPcEEbRKNS_11__wrap_iterIT_EES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPN7testing8internal13edit_distance8EditTypeEEEbRKNS_11__wrap_iterIT_EESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPN7testing12TestPropertyEEEbRKNS_11__wrap_iterIT_EES8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPKN7testing14TestPartResultEEEbRKNS_11__wrap_iterIT_EES9_ called 65 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing8TestInfoEEEbRKNS_11__wrap_iterIT_EESA_ called 130 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing17TestEventListenerEEEbRKNS_11__wrap_iterIT_EESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPKPN7testing11EnvironmentEEEbRKNS_11__wrap_iterIT_EESA_ called 1 returned 100% blocks executed 100%
function _ZNSt3__1neIPPN7testing11EnvironmentEEEbRKNS_11__wrap_iterIT_EES9_ called 1 returned 100% blocks executed 100%
      457: 1683:operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1684:{
      457: 1685:    return !(__x == __y);
    $$$$$: 1685-block  0
       20: 1685-block  1
       84: 1685-block  2
       25: 1685-block  3
       30: 1685-block  4
       77: 1685-block  5
       23: 1685-block  6
        1: 1685-block  7
    $$$$$: 1685-block  8
    $$$$$: 1685-block  9
    $$$$$: 1685-block 10
       65: 1685-block 11
      130: 1685-block 12
    $$$$$: 1685-block 13
        1: 1685-block 14
        1: 1685-block 15
        -: 1686:}
        -: 1687:
        -: 1688:template <class _Iter1>
        -: 1689:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1690:bool
        -: 1691:operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1692:{
        -: 1693:    return __y < __x;
        -: 1694:}
        -: 1695:
        -: 1696:template <class _Iter1>
        -: 1697:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1698:bool
        -: 1699:operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1700:{
        -: 1701:    return !(__x < __y);
        -: 1702:}
        -: 1703:
        -: 1704:template <class _Iter1>
        -: 1705:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1706:bool
        -: 1707:operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1708:{
        -: 1709:    return !(__y < __x);
        -: 1710:}
        -: 1711:
        -: 1712:#ifndef _LIBCPP_CXX03_LANG
        -: 1713:template <class _Iter1, class _Iter2>
        -: 1714:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1715:auto
function _ZNSt3__1miIPKN7testing8internal13edit_distance8EditTypeES6_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS8_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS9_IT0_EE called 6 returned 100% blocks executed 100%
function _ZNSt3__1miIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS6_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNSB_IT0_EE called 11 returned 100% blocks executed 100%
function _ZNSt3__1miIPKPcPS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKcPcEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1miIPKPN7testing17TestEventListenerES5_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS7_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKPN7testing9TestSuiteEPS3_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS8_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKcS2_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS4_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1miIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNSA_IT0_EE called 0 returned 0% blocks executed 0%
       19: 1716:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1717:-> decltype(__x.base() - __y.base())
        -: 1718:{
        -: 1719:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1720:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1721:                   "Attempted to subtract incompatible iterators");
        -: 1722:#endif
       19: 1723:    return __x.base() - __y.base();
    $$$$$: 1723-block  0
        6: 1723-block  1
       11: 1723-block  2
    $$$$$: 1723-block  3
        1: 1723-block  4
    $$$$$: 1723-block  5
    $$$$$: 1723-block  6
        1: 1723-block  7
    $$$$$: 1723-block  8
        -: 1724:}
        -: 1725:#else
        -: 1726:template <class _Iter1, class _Iter2>
        -: 1727:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1728:typename __wrap_iter<_Iter1>::difference_type
        -: 1729:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1730:{
        -: 1731:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1732:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1733:                   "Attempted to subtract incompatible iterators");
        -: 1734:#endif
        -: 1735:    return __x.base() - __y.base();
        -: 1736:}
        -: 1737:#endif
        -: 1738:
        -: 1739:template <class _Iter>
        -: 1740:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1741:__wrap_iter<_Iter>
        -: 1742:operator+(typename __wrap_iter<_Iter>::difference_type __n,
        -: 1743:          __wrap_iter<_Iter> __x) _NOEXCEPT
        -: 1744:{
        -: 1745:    __x += __n;
        -: 1746:    return __x;
        -: 1747:}
        -: 1748:
        -: 1749:template <class _Iter>
        -: 1750:struct __libcpp_is_trivial_iterator
        -: 1751:    : public _LIBCPP_BOOL_CONSTANT(is_pointer<_Iter>::value) {};
        -: 1752:
        -: 1753:template <class _Iter>
        -: 1754:struct __libcpp_is_trivial_iterator<move_iterator<_Iter> >
        -: 1755:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1756:
        -: 1757:template <class _Iter>
        -: 1758:struct __libcpp_is_trivial_iterator<reverse_iterator<_Iter> >
        -: 1759:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1760:
        -: 1761:template <class _Iter>
        -: 1762:struct __libcpp_is_trivial_iterator<__wrap_iter<_Iter> >
        -: 1763:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1764:
        -: 1765:
        -: 1766:template <class _Tp, size_t _Np>
        -: 1767:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1768:_Tp*
        -: 1769:begin(_Tp (&__array)[_Np])
        -: 1770:{
        -: 1771:    return __array;
        -: 1772:}
        -: 1773:
        -: 1774:template <class _Tp, size_t _Np>
        -: 1775:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1776:_Tp*
        -: 1777:end(_Tp (&__array)[_Np])
        -: 1778:{
        -: 1779:    return __array + _Np;
        -: 1780:}
        -: 1781:
        -: 1782:#if !defined(_LIBCPP_CXX03_LANG)
        -: 1783:
        -: 1784:template <class _Cp>
        -: 1785:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1786:auto
        -: 1787:begin(_Cp& __c) -> decltype(__c.begin())
        -: 1788:{
        -: 1789:    return __c.begin();
        -: 1790:}
        -: 1791:
        -: 1792:template <class _Cp>
        -: 1793:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1794:auto
        -: 1795:begin(const _Cp& __c) -> decltype(__c.begin())
        -: 1796:{
        -: 1797:    return __c.begin();
        -: 1798:}
        -: 1799:
        -: 1800:template <class _Cp>
        -: 1801:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1802:auto
        -: 1803:end(_Cp& __c) -> decltype(__c.end())
        -: 1804:{
        -: 1805:    return __c.end();
        -: 1806:}
        -: 1807:
        -: 1808:template <class _Cp>
        -: 1809:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1810:auto
        -: 1811:end(const _Cp& __c) -> decltype(__c.end())
        -: 1812:{
        -: 1813:    return __c.end();
        -: 1814:}
        -: 1815:
        -: 1816:#if _LIBCPP_STD_VER > 11
        -: 1817:
        -: 1818:template <class _Tp, size_t _Np>
        -: 1819:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1820:reverse_iterator<_Tp*> rbegin(_Tp (&__array)[_Np])
        -: 1821:{
        -: 1822:    return reverse_iterator<_Tp*>(__array + _Np);
        -: 1823:}
        -: 1824:
        -: 1825:template <class _Tp, size_t _Np>
        -: 1826:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1827:reverse_iterator<_Tp*> rend(_Tp (&__array)[_Np])
        -: 1828:{
        -: 1829:    return reverse_iterator<_Tp*>(__array);
        -: 1830:}
        -: 1831:
        -: 1832:template <class _Ep>
        -: 1833:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1834:reverse_iterator<const _Ep*> rbegin(initializer_list<_Ep> __il)
        -: 1835:{
        -: 1836:    return reverse_iterator<const _Ep*>(__il.end());
        -: 1837:}
        -: 1838:
        -: 1839:template <class _Ep>
        -: 1840:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1841:reverse_iterator<const _Ep*> rend(initializer_list<_Ep> __il)
        -: 1842:{
        -: 1843:    return reverse_iterator<const _Ep*>(__il.begin());
        -: 1844:}
        -: 1845:
        -: 1846:template <class _Cp>
        -: 1847:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1848:auto cbegin(const _Cp& __c) -> decltype(_VSTD::begin(__c))
        -: 1849:{
        -: 1850:    return _VSTD::begin(__c);
        -: 1851:}
        -: 1852:
        -: 1853:template <class _Cp>
        -: 1854:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1855:auto cend(const _Cp& __c) -> decltype(_VSTD::end(__c))
        -: 1856:{
        -: 1857:    return _VSTD::end(__c);
        -: 1858:}
        -: 1859:
        -: 1860:template <class _Cp>
        -: 1861:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1862:auto rbegin(_Cp& __c) -> decltype(__c.rbegin())
        -: 1863:{
        -: 1864:    return __c.rbegin();
        -: 1865:}
        -: 1866:
        -: 1867:template <class _Cp>
        -: 1868:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1869:auto rbegin(const _Cp& __c) -> decltype(__c.rbegin())
        -: 1870:{
        -: 1871:    return __c.rbegin();
        -: 1872:}
        -: 1873:
        -: 1874:template <class _Cp>
        -: 1875:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1876:auto rend(_Cp& __c) -> decltype(__c.rend())
        -: 1877:{
        -: 1878:    return __c.rend();
        -: 1879:}
        -: 1880:
        -: 1881:template <class _Cp>
        -: 1882:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1883:auto rend(const _Cp& __c) -> decltype(__c.rend())
        -: 1884:{
        -: 1885:    return __c.rend();
        -: 1886:}
        -: 1887:
        -: 1888:template <class _Cp>
        -: 1889:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1890:auto crbegin(const _Cp& __c) -> decltype(_VSTD::rbegin(__c))
        -: 1891:{
        -: 1892:    return _VSTD::rbegin(__c);
        -: 1893:}
        -: 1894:
        -: 1895:template <class _Cp>
        -: 1896:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1897:auto crend(const _Cp& __c) -> decltype(_VSTD::rend(__c))
        -: 1898:{
        -: 1899:    return _VSTD::rend(__c);
        -: 1900:}
        -: 1901:
        -: 1902:#endif
        -: 1903:
        -: 1904:
        -: 1905:#else  // defined(_LIBCPP_CXX03_LANG)
        -: 1906:
        -: 1907:template <class _Cp>
        -: 1908:_LIBCPP_INLINE_VISIBILITY
        -: 1909:typename _Cp::iterator
        -: 1910:begin(_Cp& __c)
        -: 1911:{
        -: 1912:    return __c.begin();
        -: 1913:}
        -: 1914:
        -: 1915:template <class _Cp>
        -: 1916:_LIBCPP_INLINE_VISIBILITY
        -: 1917:typename _Cp::const_iterator
        -: 1918:begin(const _Cp& __c)
        -: 1919:{
        -: 1920:    return __c.begin();
        -: 1921:}
        -: 1922:
        -: 1923:template <class _Cp>
        -: 1924:_LIBCPP_INLINE_VISIBILITY
        -: 1925:typename _Cp::iterator
        -: 1926:end(_Cp& __c)
        -: 1927:{
        -: 1928:    return __c.end();
        -: 1929:}
        -: 1930:
        -: 1931:template <class _Cp>
        -: 1932:_LIBCPP_INLINE_VISIBILITY
        -: 1933:typename _Cp::const_iterator
        -: 1934:end(const _Cp& __c)
        -: 1935:{
        -: 1936:    return __c.end();
        -: 1937:}
        -: 1938:
        -: 1939:#endif  // !defined(_LIBCPP_CXX03_LANG)
        -: 1940:
        -: 1941:#if _LIBCPP_STD_VER > 14
        -: 1942:
        -: 1943:// #if _LIBCPP_STD_VER > 11
        -: 1944:// template <>
        -: 1945:// struct _LIBCPP_TEMPLATE_VIS plus<void>
        -: 1946:// {
        -: 1947://     template <class _T1, class _T2>
        -: 1948://     _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1949://     auto operator()(_T1&& __t, _T2&& __u) const
        -: 1950://     _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u)))
        -: 1951://     -> decltype        (_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u))
        -: 1952://         { return        _VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u); }
        -: 1953://     typedef void is_transparent;
        -: 1954:// };
        -: 1955:// #endif
        -: 1956:
        -: 1957:template <class _Cont>
        -: 1958:_LIBCPP_INLINE_VISIBILITY
        -: 1959:constexpr auto size(const _Cont& __c)
        -: 1960:_NOEXCEPT_(noexcept(__c.size()))
        -: 1961:-> decltype        (__c.size())
        -: 1962:{ return            __c.size(); }
        -: 1963:
        -: 1964:template <class _Tp, size_t _Sz>
        -: 1965:_LIBCPP_INLINE_VISIBILITY
        -: 1966:constexpr size_t size(const _Tp (&)[_Sz]) noexcept { return _Sz; }
        -: 1967:
        -: 1968:#if _LIBCPP_STD_VER > 17
        -: 1969:template <class _Cont>
        -: 1970:_LIBCPP_INLINE_VISIBILITY
        -: 1971:constexpr auto ssize(const _Cont& __c)
        -: 1972:_NOEXCEPT_(noexcept(static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>>(__c.size())))
        -: 1973:->                              common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>
        -: 1974:{ return            static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>>(__c.size()); }
        -: 1975:
        -: 1976:template <class _Tp, ptrdiff_t _Sz>
        -: 1977:_LIBCPP_INLINE_VISIBILITY
        -: 1978:constexpr ptrdiff_t ssize(const _Tp (&)[_Sz]) noexcept { return _Sz; }
        -: 1979:#endif
        -: 1980:
        -: 1981:template <class _Cont>
        -: 1982:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1983:constexpr auto empty(const _Cont& __c)
        -: 1984:_NOEXCEPT_(noexcept(__c.empty()))
        -: 1985:-> decltype        (__c.empty())
        -: 1986:{ return            __c.empty(); }
        -: 1987:
        -: 1988:template <class _Tp, size_t _Sz>
        -: 1989:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1990:constexpr bool empty(const _Tp (&)[_Sz]) noexcept { return false; }
        -: 1991:
        -: 1992:template <class _Ep>
        -: 1993:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1994:constexpr bool empty(initializer_list<_Ep> __il) noexcept { return __il.size() == 0; }
        -: 1995:
        -: 1996:template <class _Cont> constexpr
        -: 1997:_LIBCPP_INLINE_VISIBILITY
        -: 1998:auto data(_Cont& __c)
        -: 1999:_NOEXCEPT_(noexcept(__c.data()))
        -: 2000:-> decltype        (__c.data())
        -: 2001:{ return            __c.data(); }
        -: 2002:
        -: 2003:template <class _Cont> constexpr
        -: 2004:_LIBCPP_INLINE_VISIBILITY
        -: 2005:auto data(const _Cont& __c)
        -: 2006:_NOEXCEPT_(noexcept(__c.data()))
        -: 2007:-> decltype        (__c.data())
        -: 2008:{ return            __c.data(); }
        -: 2009:
        -: 2010:template <class _Tp, size_t _Sz>
        -: 2011:_LIBCPP_INLINE_VISIBILITY
        -: 2012:constexpr _Tp* data(_Tp (&__array)[_Sz]) noexcept { return __array; }
        -: 2013:
        -: 2014:template <class _Ep>
        -: 2015:_LIBCPP_INLINE_VISIBILITY
        -: 2016:constexpr const _Ep* data(initializer_list<_Ep> __il) noexcept { return __il.begin(); }
        -: 2017:#endif
        -: 2018:
        -: 2019:
        -: 2020:_LIBCPP_END_NAMESPACE_STD
        -: 2021:
        -: 2022:#endif  // _LIBCPP_ITERATOR
