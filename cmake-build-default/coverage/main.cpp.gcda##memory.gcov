        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory
        -:    0:Graph:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/CMakeFiles/ctest-tests.dir/main.cpp.gcno
        -:    0:Data:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/CMakeFiles/ctest-tests.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_MEMORY
        -:   11:#define _LIBCPP_MEMORY
        -:   12:
        -:   13:/*
        -:   14:    memory synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:struct allocator_arg_t { };
        -:   20:inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   21:
        -:   22:template <class T, class Alloc> struct uses_allocator;
        -:   23:
        -:   24:template <class Ptr>
        -:   25:struct pointer_traits
        -:   26:{
        -:   27:    typedef Ptr pointer;
        -:   28:    typedef <details> element_type;
        -:   29:    typedef <details> difference_type;
        -:   30:
        -:   31:    template <class U> using rebind = <details>;
        -:   32:
        -:   33:    static pointer pointer_to(<details>);
        -:   34:};
        -:   35:
        -:   36:template <class T>
        -:   37:struct pointer_traits<T*>
        -:   38:{
        -:   39:    typedef T* pointer;
        -:   40:    typedef T element_type;
        -:   41:    typedef ptrdiff_t difference_type;
        -:   42:
        -:   43:    template <class U> using rebind = U*;
        -:   44:
        -:   45:    static pointer pointer_to(<details>) noexcept; // constexpr in C++20
        -:   46:};
        -:   47:
        -:   48:template <class T> constexpr T* to_address(T* p) noexcept; // C++20
        -:   49:template <class Ptr> constexpr auto to_address(const Ptr& p) noexcept; // C++20
        -:   50:
        -:   51:template <class Alloc>
        -:   52:struct allocator_traits
        -:   53:{
        -:   54:    typedef Alloc                        allocator_type;
        -:   55:    typedef typename allocator_type::value_type
        -:   56:                                         value_type;
        -:   57:
        -:   58:    typedef Alloc::pointer | value_type* pointer;
        -:   59:    typedef Alloc::const_pointer
        -:   60:          | pointer_traits<pointer>::rebind<const value_type>
        -:   61:                                         const_pointer;
        -:   62:    typedef Alloc::void_pointer
        -:   63:          | pointer_traits<pointer>::rebind<void>
        -:   64:                                         void_pointer;
        -:   65:    typedef Alloc::const_void_pointer
        -:   66:          | pointer_traits<pointer>::rebind<const void>
        -:   67:                                         const_void_pointer;
        -:   68:    typedef Alloc::difference_type
        -:   69:          | pointer_traits<pointer>::difference_type
        -:   70:                                         difference_type;
        -:   71:    typedef Alloc::size_type
        -:   72:          | make_unsigned<difference_type>::type
        -:   73:                                         size_type;
        -:   74:    typedef Alloc::propagate_on_container_copy_assignment
        -:   75:          | false_type                   propagate_on_container_copy_assignment;
        -:   76:    typedef Alloc::propagate_on_container_move_assignment
        -:   77:          | false_type                   propagate_on_container_move_assignment;
        -:   78:    typedef Alloc::propagate_on_container_swap
        -:   79:          | false_type                   propagate_on_container_swap;
        -:   80:    typedef Alloc::is_always_equal
        -:   81:          | is_empty                     is_always_equal;
        -:   82:
        -:   83:    template <class T> using rebind_alloc  = Alloc::rebind<T>::other | Alloc<T, Args...>;
        -:   84:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   85:
        -:   86:    static pointer allocate(allocator_type& a, size_type n);                          // constexpr and [[nodiscard]] in C++20
        -:   87:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint); // constexpr and [[nodiscard]] in C++20
        -:   88:
        -:   89:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept; // constexpr in C++20
        -:   90:
        -:   91:    template <class T, class... Args>
        -:   92:    static void construct(allocator_type& a, T* p, Args&&... args); // constexpr in C++20
        -:   93:
        -:   94:    template <class T>
        -:   95:    static void destroy(allocator_type& a, T* p); // constexpr in C++20
        -:   96:
        -:   97:    static size_type max_size(const allocator_type& a); // noexcept in C++14, constexpr in C++20
        -:   98:    static allocator_type select_on_container_copy_construction(const allocator_type& a); // constexpr in C++20
        -:   99:};
        -:  100:
        -:  101:template <>
        -:  102:class allocator<void> // removed in C++20
        -:  103:{
        -:  104:public:
        -:  105:    typedef void*                                 pointer;          // deprecated in C++17
        -:  106:    typedef const void*                           const_pointer;    // deprecated in C++17
        -:  107:    typedef void                                  value_type;       // deprecated in C++17
        -:  108:
        -:  109:    template <class _Up> struct rebind {typedef allocator<_Up> other;}; // deprecated in C++17
        -:  110:};
        -:  111:
        -:  112:template <class T>
        -:  113:class allocator
        -:  114:{
        -:  115:public:
        -:  116:    typedef size_t    size_type;
        -:  117:    typedef ptrdiff_t difference_type;
        -:  118:    typedef T*        pointer;                           // deprecated in C++17, removed in C++20
        -:  119:    typedef const T*  const_pointer;                     // deprecated in C++17, removed in C++20
        -:  120:    typedef typename add_lvalue_reference<T>::type
        -:  121:                      reference;                         // deprecated in C++17, removed in C++20
        -:  122:    typedef typename add_lvalue_reference<const T>::type
        -:  123:                      const_reference;                   // deprecated in C++17, removed in C++20
        -:  124:
        -:  125:    typedef T         value_type;
        -:  126:
        -:  127:    template <class U> struct rebind {typedef allocator<U> other;}; // deprecated in C++17, removed in C++20
        -:  128:
        -:  129:    typedef true_type propagate_on_container_move_assignment;
        -:  130:    typedef true_type is_always_equal;
        -:  131:
        -:  132:    constexpr allocator() noexcept;                      // constexpr in C++20
        -:  133:    constexpr allocator(const allocator&) noexcept;      // constexpr in C++20
        -:  134:    template <class U>
        -:  135:      constexpr allocator(const allocator<U>&) noexcept; // constexpr in C++20
        -:  136:    ~allocator();                                        // constexpr in C++20
        -:  137:    pointer address(reference x) const noexcept;             // deprecated in C++17, removed in C++20
        -:  138:    const_pointer address(const_reference x) const noexcept; // deprecated in C++17, removed in C++20
        -:  139:    T* allocate(size_t n, const void* hint);          // deprecated in C++17, removed in C++20
        -:  140:    T* allocate(size_t n);                              // constexpr in C++20
        -:  141:    void deallocate(T* p, size_t n) noexcept;           // constexpr in C++20
        -:  142:    size_type max_size() const noexcept;              // deprecated in C++17, removed in C++20
        -:  143:    template<class U, class... Args>
        -:  144:        void construct(U* p, Args&&... args);         // deprecated in C++17, removed in C++20
        -:  145:    template <class U>
        -:  146:        void destroy(U* p);                           // deprecated in C++17, removed in C++20
        -:  147:};
        -:  148:
        -:  149:template <class T, class U>
        -:  150:bool operator==(const allocator<T>&, const allocator<U>&) noexcept; // constexpr in C++20
        -:  151:
        -:  152:template <class T, class U>
        -:  153:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept; // constexpr in C++20
        -:  154:
        -:  155:template <class OutputIterator, class T>
        -:  156:class raw_storage_iterator
        -:  157:    : public iterator<output_iterator_tag,
        -:  158:                      T,                               // purposefully not C++03
        -:  159:                      ptrdiff_t,                       // purposefully not C++03
        -:  160:                      T*,                              // purposefully not C++03
        -:  161:                      raw_storage_iterator&>           // purposefully not C++03
        -:  162:{
        -:  163:public:
        -:  164:    explicit raw_storage_iterator(OutputIterator x);
        -:  165:    raw_storage_iterator& operator*();
        -:  166:    raw_storage_iterator& operator=(const T& element);
        -:  167:    raw_storage_iterator& operator++();
        -:  168:    raw_storage_iterator  operator++(int);
        -:  169:};
        -:  170:
        -:  171:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  172:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  173:
        -:  174:template <class T> T* addressof(T& r) noexcept;
        -:  175:template <class T> T* addressof(const T&& r) noexcept = delete;
        -:  176:
        -:  177:template <class InputIterator, class ForwardIterator>
        -:  178:ForwardIterator
        -:  179:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  180:
        -:  181:template <class InputIterator, class Size, class ForwardIterator>
        -:  182:ForwardIterator
        -:  183:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  184:
        -:  185:template <class ForwardIterator, class T>
        -:  186:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  187:
        -:  188:template <class ForwardIterator, class Size, class T>
        -:  189:ForwardIterator
        -:  190:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  191:
        -:  192:template <class T, class ...Args>
        -:  193:constexpr T* construct_at(T* location, Args&& ...args); // since C++20
        -:  194:
        -:  195:template <class T>
        -:  196:void destroy_at(T* location); // constexpr in C++20
        -:  197:
        -:  198:template <class ForwardIterator>
        -:  199:void destroy(ForwardIterator first, ForwardIterator last); // constexpr in C++20
        -:  200:
        -:  201:template <class ForwardIterator, class Size>
        -:  202:ForwardIterator destroy_n(ForwardIterator first, Size n); // constexpr in C++20
        -:  203:
        -:  204:template <class InputIterator, class ForwardIterator>
        -:  205: ForwardIterator uninitialized_move(InputIterator first, InputIterator last, ForwardIterator result);
        -:  206:
        -:  207:template <class InputIterator, class Size, class ForwardIterator>
        -:  208: pair<InputIterator,ForwardIterator> uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
        -:  209:
        -:  210:template <class ForwardIterator>
        -:  211: void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
        -:  212:
        -:  213:template <class ForwardIterator, class Size>
        -:  214: ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
        -:  215:
        -:  216:template <class ForwardIterator>
        -:  217: void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
        -:  218:
        -:  219:template <class ForwardIterator, class Size>
        -:  220: ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
        -:  221:
        -:  222:template <class Y> struct auto_ptr_ref {};      // deprecated in C++11, removed in C++17
        -:  223:
        -:  224:template<class X>
        -:  225:class auto_ptr                                  // deprecated in C++11, removed in C++17
        -:  226:{
        -:  227:public:
        -:  228:    typedef X element_type;
        -:  229:
        -:  230:    explicit auto_ptr(X* p =0) throw();
        -:  231:    auto_ptr(auto_ptr&) throw();
        -:  232:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  233:    auto_ptr& operator=(auto_ptr&) throw();
        -:  234:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  235:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  236:    ~auto_ptr() throw();
        -:  237:
        -:  238:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  239:    X* operator->() const throw();
        -:  240:    X* get() const throw();
        -:  241:    X* release() throw();
        -:  242:    void reset(X* p =0) throw();
        -:  243:
        -:  244:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  245:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  246:    template<class Y> operator auto_ptr<Y>() throw();
        -:  247:};
        -:  248:
        -:  249:template <class T>
        -:  250:struct default_delete
        -:  251:{
        -:  252:    constexpr default_delete() noexcept = default;
        -:  253:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  254:
        -:  255:    void operator()(T*) const noexcept;
        -:  256:};
        -:  257:
        -:  258:template <class T>
        -:  259:struct default_delete<T[]>
        -:  260:{
        -:  261:    constexpr default_delete() noexcept = default;
        -:  262:    void operator()(T*) const noexcept;
        -:  263:    template <class U> void operator()(U*) const = delete;
        -:  264:};
        -:  265:
        -:  266:template <class T, class D = default_delete<T>>
        -:  267:class unique_ptr
        -:  268:{
        -:  269:public:
        -:  270:    typedef see below pointer;
        -:  271:    typedef T element_type;
        -:  272:    typedef D deleter_type;
        -:  273:
        -:  274:    // constructors
        -:  275:    constexpr unique_ptr() noexcept;
        -:  276:    explicit unique_ptr(pointer p) noexcept;
        -:  277:    unique_ptr(pointer p, see below d1) noexcept;
        -:  278:    unique_ptr(pointer p, see below d2) noexcept;
        -:  279:    unique_ptr(unique_ptr&& u) noexcept;
        -:  280:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  281:    template <class U, class E>
        -:  282:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  283:    template <class U>
        -:  284:        unique_ptr(auto_ptr<U>&& u) noexcept;       // removed in C++17
        -:  285:
        -:  286:    // destructor
        -:  287:    ~unique_ptr();
        -:  288:
        -:  289:    // assignment
        -:  290:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  291:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  292:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  293:
        -:  294:    // observers
        -:  295:    typename add_lvalue_reference<T>::type operator*() const;
        -:  296:    pointer operator->() const noexcept;
        -:  297:    pointer get() const noexcept;
        -:  298:    deleter_type& get_deleter() noexcept;
        -:  299:    const deleter_type& get_deleter() const noexcept;
        -:  300:    explicit operator bool() const noexcept;
        -:  301:
        -:  302:    // modifiers
        -:  303:    pointer release() noexcept;
        -:  304:    void reset(pointer p = pointer()) noexcept;
        -:  305:    void swap(unique_ptr& u) noexcept;
        -:  306:};
        -:  307:
        -:  308:template <class T, class D>
        -:  309:class unique_ptr<T[], D>
        -:  310:{
        -:  311:public:
        -:  312:    typedef implementation-defined pointer;
        -:  313:    typedef T element_type;
        -:  314:    typedef D deleter_type;
        -:  315:
        -:  316:    // constructors
        -:  317:    constexpr unique_ptr() noexcept;
        -:  318:    explicit unique_ptr(pointer p) noexcept;
        -:  319:    unique_ptr(pointer p, see below d) noexcept;
        -:  320:    unique_ptr(pointer p, see below d) noexcept;
        -:  321:    unique_ptr(unique_ptr&& u) noexcept;
        -:  322:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  323:
        -:  324:    // destructor
        -:  325:    ~unique_ptr();
        -:  326:
        -:  327:    // assignment
        -:  328:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  329:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  330:
        -:  331:    // observers
        -:  332:    T& operator[](size_t i) const;
        -:  333:    pointer get() const noexcept;
        -:  334:    deleter_type& get_deleter() noexcept;
        -:  335:    const deleter_type& get_deleter() const noexcept;
        -:  336:    explicit operator bool() const noexcept;
        -:  337:
        -:  338:    // modifiers
        -:  339:    pointer release() noexcept;
        -:  340:    void reset(pointer p = pointer()) noexcept;
        -:  341:    void reset(nullptr_t) noexcept;
        -:  342:  template <class U> void reset(U) = delete;
        -:  343:    void swap(unique_ptr& u) noexcept;
        -:  344:};
        -:  345:
        -:  346:template <class T, class D>
        -:  347:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  348:
        -:  349:template <class T1, class D1, class T2, class D2>
        -:  350:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  351:template <class T1, class D1, class T2, class D2>
        -:  352:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  353:template <class T1, class D1, class T2, class D2>
        -:  354:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  355:template <class T1, class D1, class T2, class D2>
        -:  356:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  357:template <class T1, class D1, class T2, class D2>
        -:  358:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  359:template <class T1, class D1, class T2, class D2>
        -:  360:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  361:
        -:  362:template <class T, class D>
        -:  363:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  364:template <class T, class D>
        -:  365:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  366:template <class T, class D>
        -:  367:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  368:template <class T, class D>
        -:  369:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  370:
        -:  371:template <class T, class D>
        -:  372:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  373:template <class T, class D>
        -:  374:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  375:template <class T, class D>
        -:  376:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  377:template <class T, class D>
        -:  378:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  379:template <class T, class D>
        -:  380:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  381:template <class T, class D>
        -:  382:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  383:template <class T, class D>
        -:  384:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  385:template <class T, class D>
        -:  386:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  387:
        -:  388:class bad_weak_ptr
        -:  389:    : public std::exception
        -:  390:{
        -:  391:    bad_weak_ptr() noexcept;
        -:  392:};
        -:  393:
        -:  394:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  395:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  396:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  397:
        -:  398:template<class E, class T, class Y, class D>
        -:  399:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, unique_ptr<Y, D> const& p);
        -:  400:
        -:  401:template<class T>
        -:  402:class shared_ptr
        -:  403:{
        -:  404:public:
        -:  405:    typedef T element_type;
        -:  406:    typedef weak_ptr<T> weak_type; // C++17
        -:  407:
        -:  408:    // constructors:
        -:  409:    constexpr shared_ptr() noexcept;
        -:  410:    template<class Y> explicit shared_ptr(Y* p);
        -:  411:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  412:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  413:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  414:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  415:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  416:    shared_ptr(const shared_ptr& r) noexcept;
        -:  417:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  418:    shared_ptr(shared_ptr&& r) noexcept;
        -:  419:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  420:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  421:    template<class Y> shared_ptr(auto_ptr<Y>&& r);          // removed in C++17
        -:  422:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  423:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  424:
        -:  425:    // destructor:
        -:  426:    ~shared_ptr();
        -:  427:
        -:  428:    // assignment:
        -:  429:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  430:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  431:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  432:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  433:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r); // removed in C++17
        -:  434:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  435:
        -:  436:    // modifiers:
        -:  437:    void swap(shared_ptr& r) noexcept;
        -:  438:    void reset() noexcept;
        -:  439:    template<class Y> void reset(Y* p);
        -:  440:    template<class Y, class D> void reset(Y* p, D d);
        -:  441:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  442:
        -:  443:    // observers:
        -:  444:    T* get() const noexcept;
        -:  445:    T& operator*() const noexcept;
        -:  446:    T* operator->() const noexcept;
        -:  447:    long use_count() const noexcept;
        -:  448:    bool unique() const noexcept;
        -:  449:    explicit operator bool() const noexcept;
        -:  450:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  451:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  452:};
        -:  453:
        -:  454:template<class T>
        -:  455:shared_ptr(weak_ptr<T>) -> shared_ptr<T>;
        -:  456:template<class T, class D>
        -:  457:shared_ptr(unique_ptr<T, D>) -> shared_ptr<T>;
        -:  458:
        -:  459:// shared_ptr comparisons:
        -:  460:template<class T, class U>
        -:  461:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  462:template<class T, class U>
        -:  463:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  464:template<class T, class U>
        -:  465:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  466:template<class T, class U>
        -:  467:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  468:template<class T, class U>
        -:  469:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  470:template<class T, class U>
        -:  471:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  472:
        -:  473:template <class T>
        -:  474:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  475:template <class T>
        -:  476:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  477:template <class T>
        -:  478:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  479:template <class T>
        -:  480:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  481:template <class T>
        -:  482:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  483:template <class T>
        -:  484:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  485:template <class T>
        -:  486:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  487:template <class T>
        -:  488:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  489:template <class T>
        -:  490:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  491:template <class T>
        -:  492:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  493:template <class T>
        -:  494:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  495:template <class T>
        -:  496:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  497:
        -:  498:// shared_ptr specialized algorithms:
        -:  499:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  500:
        -:  501:// shared_ptr casts:
        -:  502:template<class T, class U>
        -:  503:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  504:template<class T, class U>
        -:  505:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  506:template<class T, class U>
        -:  507:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  508:
        -:  509:// shared_ptr I/O:
        -:  510:template<class E, class T, class Y>
        -:  511:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  512:
        -:  513:// shared_ptr get_deleter:
        -:  514:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  515:
        -:  516:template<class T, class... Args>
        -:  517:    shared_ptr<T> make_shared(Args&&... args);
        -:  518:template<class T, class A, class... Args>
        -:  519:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  520:
        -:  521:template<class T>
        -:  522:class weak_ptr
        -:  523:{
        -:  524:public:
        -:  525:    typedef T element_type;
        -:  526:
        -:  527:    // constructors
        -:  528:    constexpr weak_ptr() noexcept;
        -:  529:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  530:    weak_ptr(weak_ptr const& r) noexcept;
        -:  531:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  532:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  533:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  534:
        -:  535:    // destructor
        -:  536:    ~weak_ptr();
        -:  537:
        -:  538:    // assignment
        -:  539:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  540:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  541:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  542:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  543:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  544:
        -:  545:    // modifiers
        -:  546:    void swap(weak_ptr& r) noexcept;
        -:  547:    void reset() noexcept;
        -:  548:
        -:  549:    // observers
        -:  550:    long use_count() const noexcept;
        -:  551:    bool expired() const noexcept;
        -:  552:    shared_ptr<T> lock() const noexcept;
        -:  553:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  554:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  555:};
        -:  556:
        -:  557:template<class T>
        -:  558:weak_ptr(shared_ptr<T>) -> weak_ptr<T>;
        -:  559:
        -:  560:// weak_ptr specialized algorithms:
        -:  561:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  562:
        -:  563:// class owner_less:
        -:  564:template<class T> struct owner_less;
        -:  565:
        -:  566:template<class T>
        -:  567:struct owner_less<shared_ptr<T> >
        -:  568:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  569:{
        -:  570:    typedef bool result_type;
        -:  571:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  572:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  573:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  574:};
        -:  575:
        -:  576:template<class T>
        -:  577:struct owner_less<weak_ptr<T> >
        -:  578:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  579:{
        -:  580:    typedef bool result_type;
        -:  581:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  582:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  583:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  584:};
        -:  585:
        -:  586:template <>  // Added in C++14
        -:  587:struct owner_less<void>
        -:  588:{
        -:  589:    template <class _Tp, class _Up>
        -:  590:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  591:    template <class _Tp, class _Up>
        -:  592:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  593:    template <class _Tp, class _Up>
        -:  594:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  595:    template <class _Tp, class _Up>
        -:  596:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  597:
        -:  598:    typedef void is_transparent;
        -:  599:};
        -:  600:
        -:  601:template<class T>
        -:  602:class enable_shared_from_this
        -:  603:{
        -:  604:protected:
        -:  605:    constexpr enable_shared_from_this() noexcept;
        -:  606:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  607:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  608:    ~enable_shared_from_this();
        -:  609:public:
        -:  610:    shared_ptr<T> shared_from_this();
        -:  611:    shared_ptr<T const> shared_from_this() const;
        -:  612:};
        -:  613:
        -:  614:template<class T>
        -:  615:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  616:template<class T>
        -:  617:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  618:template<class T>
        -:  619:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  620:template<class T>
        -:  621:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  622:template<class T>
        -:  623:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  624:template<class T>
        -:  625:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  626:template<class T>
        -:  627:    shared_ptr<T>
        -:  628:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  629:template<class T>
        -:  630:    bool
        -:  631:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  632:template<class T>
        -:  633:    bool
        -:  634:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  635:template<class T>
        -:  636:    bool
        -:  637:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  638:                                          shared_ptr<T> w, memory_order success,
        -:  639:                                          memory_order failure);
        -:  640:template<class T>
        -:  641:    bool
        -:  642:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  643:                                            shared_ptr<T> w, memory_order success,
        -:  644:                                            memory_order failure);
        -:  645:// Hash support
        -:  646:template <class T> struct hash;
        -:  647:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  648:template <class T> struct hash<shared_ptr<T> >;
        -:  649:
        -:  650:template <class T, class Alloc>
        -:  651:  inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;
        -:  652:
        -:  653:// Pointer safety
        -:  654:enum class pointer_safety { relaxed, preferred, strict };
        -:  655:void declare_reachable(void *p);
        -:  656:template <class T> T *undeclare_reachable(T *p);
        -:  657:void declare_no_pointers(char *p, size_t n);
        -:  658:void undeclare_no_pointers(char *p, size_t n);
        -:  659:pointer_safety get_pointer_safety() noexcept;
        -:  660:
        -:  661:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  662:
        -:  663:}  // std
        -:  664:
        -:  665:*/
        -:  666:
        -:  667:#include <__config>
        -:  668:#include <__availability>
        -:  669:#include <type_traits>
        -:  670:#include <typeinfo>
        -:  671:#include <cstddef>
        -:  672:#include <cstdint>
        -:  673:#include <new>
        -:  674:#include <utility>
        -:  675:#include <limits>
        -:  676:#include <iterator>
        -:  677:#include <__functional_base>
        -:  678:#include <iosfwd>
        -:  679:#include <tuple>
        -:  680:#include <stdexcept>
        -:  681:#include <cstring>
        -:  682:#include <__memory/allocator_traits.h>
        -:  683:#include <__memory/base.h>
        -:  684:#include <__memory/pointer_traits.h>
        -:  685:#include <__memory/utilities.h>
        -:  686:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -:  687:#  include <atomic>
        -:  688:#endif
        -:  689:#include <version>
        -:  690:
        -:  691:// TODO: We re-added #include <cassert> to <memory> to make the internal build
        -:  692://       pass, but we should remove it as soon as all internal clients have fixed
        -:  693://       their code.
        -:  694:#include <cassert>
        -:  695:
        -:  696:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  697:#pragma GCC system_header
        -:  698:#endif
        -:  699:
        -:  700:_LIBCPP_PUSH_MACROS
        -:  701:#include <__undef_macros>
        -:  702:
        -:  703:
        -:  704:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  705:
        -:  706:template <class _ValueType>
        -:  707:inline _LIBCPP_INLINE_VISIBILITY
        -:  708:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:  709:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  710:    defined(__ATOMIC_RELAXED) &&        \
        -:  711:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:  712:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:  713:#else
        -:  714:    return *__value;
        -:  715:#endif
        -:  716:}
        -:  717:
        -:  718:template <class _ValueType>
        -:  719:inline _LIBCPP_INLINE_VISIBILITY
        -:  720:_ValueType __libcpp_acquire_load(_ValueType const* __value) {
        -:  721:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  722:    defined(__ATOMIC_ACQUIRE) &&        \
        -:  723:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:  724:    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);
        -:  725:#else
        -:  726:    return *__value;
        -:  727:#endif
        -:  728:}
        -:  729:
        -:  730:template <bool _UsePointerTraits> struct __to_address_helper;
        -:  731:
        -:  732:template <> struct __to_address_helper<true> {
        -:  733:    template <class _Pointer>
        -:  734:    using __return_type = decltype(pointer_traits<_Pointer>::to_address(_VSTD::declval<const _Pointer&>()));
        -:  735:
        -:  736:    template <class _Pointer>
        -:  737:    _LIBCPP_CONSTEXPR
        -:  738:    static __return_type<_Pointer>
        -:  739:    __do_it(const _Pointer &__p) _NOEXCEPT { return pointer_traits<_Pointer>::to_address(__p); }
        -:  740:};
        -:  741:
        -:  742:template <class _Pointer, bool _Dummy = true>
        -:  743:using __choose_to_address = __to_address_helper<_IsValidExpansion<__to_address_helper<_Dummy>::template __return_type, _Pointer>::value>;
        -:  744:
        -:  745:
        -:  746:template <class _Tp>
        -:  747:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  748:_Tp*
function _ZNSt3__1L12__to_addressIKcEEPT_S3_ called 175 returned 100% blocks executed 100%
      175:  749:__to_address(_Tp* __p) _NOEXCEPT
        -:  750:{
        -:  751:    static_assert(!is_function<_Tp>::value, "_Tp is a function type");
      175:  752:    return __p;
      175:  752-block  0
        -:  753:}
        -:  754:
        -:  755:template <class _Pointer>
        -:  756:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  757:typename __choose_to_address<_Pointer>::template __return_type<_Pointer>
        -:  758:__to_address(const _Pointer& __p) _NOEXCEPT {
        -:  759:  return __choose_to_address<_Pointer>::__do_it(__p);
        -:  760:}
        -:  761:
        -:  762:template <> struct __to_address_helper<false> {
        -:  763:    template <class _Pointer>
        -:  764:    using __return_type = typename pointer_traits<_Pointer>::element_type*;
        -:  765:
        -:  766:    template <class _Pointer>
        -:  767:    _LIBCPP_CONSTEXPR
        -:  768:    static __return_type<_Pointer>
        -:  769:    __do_it(const _Pointer &__p) _NOEXCEPT { return _VSTD::__to_address(__p.operator->()); }
        -:  770:};
        -:  771:
        -:  772:
        -:  773:#if _LIBCPP_STD_VER > 17
        -:  774:template <class _Tp>
        -:  775:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -:  776:_Tp*
        -:  777:to_address(_Tp* __p) _NOEXCEPT
        -:  778:{
        -:  779:    static_assert(!is_function_v<_Tp>, "_Tp is a function type");
        -:  780:    return __p;
        -:  781:}
        -:  782:
        -:  783:template <class _Pointer>
        -:  784:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -:  785:auto
        -:  786:to_address(const _Pointer& __p) _NOEXCEPT
        -:  787:{
        -:  788:    return _VSTD::__to_address(__p);
        -:  789:}
        -:  790:#endif
        -:  791:
        -:  792:template <class _Tp> class allocator;
        -:  793:
        -:  794:#if _LIBCPP_STD_VER <= 17
        -:  795:template <>
        -:  796:class _LIBCPP_TEMPLATE_VIS allocator<void>
        -:  797:{
        -:  798:public:
        -:  799:    _LIBCPP_DEPRECATED_IN_CXX17 typedef void*             pointer;
        -:  800:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;
        -:  801:    _LIBCPP_DEPRECATED_IN_CXX17 typedef void              value_type;
        -:  802:
        -:  803:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -:  804:};
        -:  805:
        -:  806:template <>
        -:  807:class _LIBCPP_TEMPLATE_VIS allocator<const void>
        -:  808:{
        -:  809:public:
        -:  810:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       pointer;
        -:  811:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;
        -:  812:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void        value_type;
        -:  813:
        -:  814:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -:  815:};
        -:  816:#endif
        -:  817:
        -:  818:// This class provides a non-trivial default constructor to the class that derives from it
        -:  819:// if the condition is satisfied.
        -:  820://
        -:  821:// The second template parameter exists to allow giving a unique type to __non_trivial_if,
        -:  822:// which makes it possible to avoid breaking the ABI when making this a base class of an
        -:  823:// existing class. Without that, imagine we have classes D1 and D2, both of which used to
        -:  824:// have no base classes, but which now derive from __non_trivial_if. The layout of a class
        -:  825:// that inherits from both D1 and D2 will change because the two __non_trivial_if base
        -:  826:// classes are not allowed to share the same address.
        -:  827://
        -:  828:// By making those __non_trivial_if base classes unique, we work around this problem and
        -:  829:// it is safe to start deriving from __non_trivial_if in existing classes.
        -:  830:template <bool _Cond, class _Unique>
        -:  831:struct __non_trivial_if { };
        -:  832:
        -:  833:template <class _Unique>
        -:  834:struct __non_trivial_if<true, _Unique> {
        -:  835:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIcEEEC2Ev called 10 returned 100% blocks executed 100%
       10:  836:    _LIBCPP_CONSTEXPR __non_trivial_if() _NOEXCEPT { }
       10:  836-block  0
        -:  837:};
        -:  838:
        -:  839:// allocator
        -:  840://
        -:  841:// Note: For ABI compatibility between C++20 and previous standards, we make
        -:  842://       allocator<void> trivial in C++20.
        -:  843:
        -:  844:template <class _Tp>
        -:  845:class _LIBCPP_TEMPLATE_VIS allocator
        -:  846:    : private __non_trivial_if<!is_void<_Tp>::value, allocator<_Tp> >
        -:  847:{
        -:  848:public:
        -:  849:    typedef size_t      size_type;
        -:  850:    typedef ptrdiff_t   difference_type;
        -:  851:    typedef _Tp         value_type;
        -:  852:    typedef true_type   propagate_on_container_move_assignment;
        -:  853:    typedef true_type   is_always_equal;
        -:  854:
        -:  855:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorIcEC2Ev called 10 returned 100% blocks executed 100%
       10:  856:    allocator() _NOEXCEPT _LIBCPP_DEFAULT
       10:  856-block  0
        -:  857:
        -:  858:    template <class _Up>
        -:  859:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  860:    allocator(const allocator<_Up>&) _NOEXCEPT { }
        -:  861:
        -:  862:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorIcE8allocateEm called 0 returned 0% blocks executed 0%
    #####:  863:    _Tp* allocate(size_t __n) {
    #####:  864:        if (__n > allocator_traits<allocator>::max_size(*this))
    $$$$$:  864-block  0
branch  0 never executed
branch  1 never executed
    #####:  865:            __throw_length_error("allocator<T>::allocate(size_t n)"
    $$$$$:  865-block  0
        -:  866:                                 " 'n' exceeds maximum supported size");
        -:  867:        if (__libcpp_is_constant_evaluated()) {
        -:  868:            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  869:        } else {
    #####:  870:            return static_cast<_Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
    $$$$$:  870-block  0
        -:  871:        }
        -:  872:    }
        -:  873:
        -:  874:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorIcE10deallocateEPcm called 0 returned 0% blocks executed 0%
    #####:  875:    void deallocate(_Tp* __p, size_t __n) _NOEXCEPT {
        -:  876:        if (__libcpp_is_constant_evaluated()) {
        -:  877:            ::operator delete(__p);
        -:  878:        } else {
    #####:  879:            _VSTD::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
    $$$$$:  879-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  879-block  1
        -:  880:        }
    #####:  881:    }
    $$$$$:  881-block  0
        -:  882:
        -:  883:    // C++20 Removed members
        -:  884:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  885:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp*       pointer;
        -:  886:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -:  887:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp&       reference;
        -:  888:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -:  889:
        -:  890:    template <class _Up>
        -:  891:    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {
        -:  892:        typedef allocator<_Up> other;
        -:  893:    };
        -:  894:
        -:  895:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  896:    pointer address(reference __x) const _NOEXCEPT {
        -:  897:        return _VSTD::addressof(__x);
        -:  898:    }
        -:  899:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  900:    const_pointer address(const_reference __x) const _NOEXCEPT {
        -:  901:        return _VSTD::addressof(__x);
        -:  902:    }
        -:  903:
        -:  904:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -:  905:    _Tp* allocate(size_t __n, const void*) {
        -:  906:        return allocate(__n);
        -:  907:    }
        -:  908:
function _ZNKSt3__19allocatorIcE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  909:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {
    #####:  910:        return size_type(~0) / sizeof(_Tp);
    $$$$$:  910-block  0
        -:  911:    }
        -:  912:
        -:  913:    template <class _Up, class... _Args>
        -:  914:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  915:    void construct(_Up* __p, _Args&&... __args) {
        -:  916:        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -:  917:    }
        -:  918:
        -:  919:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  920:    void destroy(pointer __p) {
        -:  921:        __p->~_Tp();
        -:  922:    }
        -:  923:#endif
        -:  924:};
        -:  925:
        -:  926:template <class _Tp>
        -:  927:class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>
        -:  928:    : private __non_trivial_if<!is_void<_Tp>::value, allocator<const _Tp> >
        -:  929:{
        -:  930:public:
        -:  931:    typedef size_t      size_type;
        -:  932:    typedef ptrdiff_t   difference_type;
        -:  933:    typedef const _Tp   value_type;
        -:  934:    typedef true_type   propagate_on_container_move_assignment;
        -:  935:    typedef true_type   is_always_equal;
        -:  936:
        -:  937:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  938:    allocator() _NOEXCEPT _LIBCPP_DEFAULT
        -:  939:
        -:  940:    template <class _Up>
        -:  941:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  942:    allocator(const allocator<_Up>&) _NOEXCEPT { }
        -:  943:
        -:  944:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  945:    const _Tp* allocate(size_t __n) {
        -:  946:        if (__n > allocator_traits<allocator>::max_size(*this))
        -:  947:            __throw_length_error("allocator<const T>::allocate(size_t n)"
        -:  948:                                 " 'n' exceeds maximum supported size");
        -:  949:        if (__libcpp_is_constant_evaluated()) {
        -:  950:            return static_cast<const _Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  951:        } else {
        -:  952:            return static_cast<const _Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
        -:  953:        }
        -:  954:    }
        -:  955:
        -:  956:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  957:    void deallocate(const _Tp* __p, size_t __n) {
        -:  958:        if (__libcpp_is_constant_evaluated()) {
        -:  959:            ::operator delete(const_cast<_Tp*>(__p));
        -:  960:        } else {
        -:  961:            _VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -:  962:        }
        -:  963:    }
        -:  964:
        -:  965:    // C++20 Removed members
        -:  966:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  967:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* pointer;
        -:  968:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -:  969:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& reference;
        -:  970:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -:  971:
        -:  972:    template <class _Up>
        -:  973:    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {
        -:  974:        typedef allocator<_Up> other;
        -:  975:    };
        -:  976:
        -:  977:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  978:    const_pointer address(const_reference __x) const _NOEXCEPT {
        -:  979:        return _VSTD::addressof(__x);
        -:  980:    }
        -:  981:
        -:  982:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -:  983:    const _Tp* allocate(size_t __n, const void*) {
        -:  984:        return allocate(__n);
        -:  985:    }
        -:  986:
        -:  987:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {
        -:  988:        return size_type(~0) / sizeof(_Tp);
        -:  989:    }
        -:  990:
        -:  991:    template <class _Up, class... _Args>
        -:  992:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  993:    void construct(_Up* __p, _Args&&... __args) {
        -:  994:        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -:  995:    }
        -:  996:
        -:  997:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  998:    void destroy(pointer __p) {
        -:  999:        __p->~_Tp();
        -: 1000:    }
        -: 1001:#endif
        -: 1002:};
        -: 1003:
        -: 1004:template <class _Tp, class _Up>
        -: 1005:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1006:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 1007:
        -: 1008:template <class _Tp, class _Up>
        -: 1009:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1010:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 1011:
        -: 1012:template <class _Alloc, class _Ptr>
        -: 1013:_LIBCPP_INLINE_VISIBILITY
        -: 1014:void __construct_forward_with_exception_guarantees(_Alloc& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2) {
        -: 1015:    static_assert(__is_cpp17_move_insertable<_Alloc>::value,
        -: 1016:        "The specified type does not meet the requirements of Cpp17MoveInsertable");
        -: 1017:    typedef allocator_traits<_Alloc> _Traits;
        -: 1018:    for (; __begin1 != __end1; ++__begin1, (void)++__begin2) {
        -: 1019:        _Traits::construct(__a, _VSTD::__to_address(__begin2),
        -: 1020:#ifdef _LIBCPP_NO_EXCEPTIONS
        -: 1021:            _VSTD::move(*__begin1)
        -: 1022:#else
        -: 1023:            _VSTD::move_if_noexcept(*__begin1)
        -: 1024:#endif
        -: 1025:        );
        -: 1026:    }
        -: 1027:}
        -: 1028:
        -: 1029:template <class _Alloc, class _Tp, typename enable_if<
        -: 1030:    (__is_default_allocator<_Alloc>::value || !__has_construct<_Alloc, _Tp*, _Tp>::value) &&
        -: 1031:    is_trivially_move_constructible<_Tp>::value
        -: 1032:>::type>
        -: 1033:_LIBCPP_INLINE_VISIBILITY
        -: 1034:void __construct_forward_with_exception_guarantees(_Alloc&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2) {
        -: 1035:    ptrdiff_t _Np = __end1 - __begin1;
        -: 1036:    if (_Np > 0) {
        -: 1037:        _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1038:        __begin2 += _Np;
        -: 1039:    }
        -: 1040:}
        -: 1041:
        -: 1042:template <class _Alloc, class _Iter, class _Ptr>
        -: 1043:_LIBCPP_INLINE_VISIBILITY
        -: 1044:void __construct_range_forward(_Alloc& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2) {
        -: 1045:    typedef allocator_traits<_Alloc> _Traits;
        -: 1046:    for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) {
        -: 1047:        _Traits::construct(__a, _VSTD::__to_address(__begin2), *__begin1);
        -: 1048:    }
        -: 1049:}
        -: 1050:
        -: 1051:template <class _Alloc, class _Source, class _Dest,
        -: 1052:          class _RawSource = typename remove_const<_Source>::type,
        -: 1053:          class _RawDest = typename remove_const<_Dest>::type,
        -: 1054:          class =
        -: 1055:    typename enable_if<
        -: 1056:        is_trivially_copy_constructible<_Dest>::value &&
        -: 1057:        is_same<_RawSource, _RawDest>::value &&
        -: 1058:        (__is_default_allocator<_Alloc>::value || !__has_construct<_Alloc, _Dest*, _Source&>::value)
        -: 1059:    >::type>
        -: 1060:_LIBCPP_INLINE_VISIBILITY
        -: 1061:void __construct_range_forward(_Alloc&, _Source* __begin1, _Source* __end1, _Dest*& __begin2) {
        -: 1062:    ptrdiff_t _Np = __end1 - __begin1;
        -: 1063:    if (_Np > 0) {
        -: 1064:        _VSTD::memcpy(const_cast<_RawDest*>(__begin2), __begin1, _Np * sizeof(_Dest));
        -: 1065:        __begin2 += _Np;
        -: 1066:    }
        -: 1067:}
        -: 1068:
        -: 1069:template <class _Alloc, class _Ptr>
        -: 1070:_LIBCPP_INLINE_VISIBILITY
        -: 1071:void __construct_backward_with_exception_guarantees(_Alloc& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2) {
        -: 1072:    static_assert(__is_cpp17_move_insertable<_Alloc>::value,
        -: 1073:        "The specified type does not meet the requirements of Cpp17MoveInsertable");
        -: 1074:    typedef allocator_traits<_Alloc> _Traits;
        -: 1075:    while (__end1 != __begin1) {
        -: 1076:        _Traits::construct(__a, _VSTD::__to_address(__end2 - 1),
        -: 1077:#ifdef _LIBCPP_NO_EXCEPTIONS
        -: 1078:            _VSTD::move(*--__end1)
        -: 1079:#else
        -: 1080:            _VSTD::move_if_noexcept(*--__end1)
        -: 1081:#endif
        -: 1082:        );
        -: 1083:        --__end2;
        -: 1084:    }
        -: 1085:}
        -: 1086:
        -: 1087:template <class _Alloc, class _Tp, class = typename enable_if<
        -: 1088:    (__is_default_allocator<_Alloc>::value || !__has_construct<_Alloc, _Tp*, _Tp>::value) &&
        -: 1089:    is_trivially_move_constructible<_Tp>::value
        -: 1090:>::type>
        -: 1091:_LIBCPP_INLINE_VISIBILITY
        -: 1092:void __construct_backward_with_exception_guarantees(_Alloc&, _Tp* __begin1, _Tp* __end1, _Tp*& __end2) {
        -: 1093:    ptrdiff_t _Np = __end1 - __begin1;
        -: 1094:    __end2 -= _Np;
        -: 1095:    if (_Np > 0)
        -: 1096:        _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
        -: 1097:}
        -: 1098:
        -: 1099:template <class _OutputIterator, class _Tp>
        -: 1100:class _LIBCPP_TEMPLATE_VIS raw_storage_iterator
        -: 1101:    : public iterator<output_iterator_tag,
        -: 1102:                      _Tp,                                         // purposefully not C++03
        -: 1103:                      ptrdiff_t,                                   // purposefully not C++03
        -: 1104:                      _Tp*,                                        // purposefully not C++03
        -: 1105:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 1106:{
        -: 1107:private:
        -: 1108:    _OutputIterator __x_;
        -: 1109:public:
        -: 1110:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 1111:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 1112:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 1113:        {::new ((void*)_VSTD::addressof(*__x_)) _Tp(__element); return *this;}
        -: 1114:#if _LIBCPP_STD_VER >= 14
        -: 1115:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(_Tp&& __element)
        -: 1116:        {::new ((void*)_VSTD::addressof(*__x_)) _Tp(_VSTD::move(__element)); return *this;}
        -: 1117:#endif
        -: 1118:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 1119:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 1120:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 1121:#if _LIBCPP_STD_VER >= 14
        -: 1122:    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; }
        -: 1123:#endif
        -: 1124:};
        -: 1125:
        -: 1126:template <class _Tp>
        -: 1127:_LIBCPP_NODISCARD_EXT _LIBCPP_NO_CFI
        -: 1128:pair<_Tp*, ptrdiff_t>
        -: 1129:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 1130:{
        -: 1131:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 1132:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 1133:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 1134:                           / sizeof(_Tp);
        -: 1135:    if (__n > __m)
        -: 1136:        __n = __m;
        -: 1137:    while (__n > 0)
        -: 1138:    {
        -: 1139:#if !defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION)
        -: 1140:    if (__is_overaligned_for_new(_LIBCPP_ALIGNOF(_Tp)))
        -: 1141:        {
        -: 1142:            align_val_t __al =
        -: 1143:                align_val_t(alignment_of<_Tp>::value);
        -: 1144:            __r.first = static_cast<_Tp*>(::operator new(
        -: 1145:                __n * sizeof(_Tp), __al, nothrow));
        -: 1146:        } else {
        -: 1147:            __r.first = static_cast<_Tp*>(::operator new(
        -: 1148:                __n * sizeof(_Tp), nothrow));
        -: 1149:        }
        -: 1150:#else
        -: 1151:    if (__is_overaligned_for_new(_LIBCPP_ALIGNOF(_Tp)))
        -: 1152:        {
        -: 1153:            // Since aligned operator new is unavailable, return an empty
        -: 1154:            // buffer rather than one with invalid alignment.
        -: 1155:            return __r;
        -: 1156:        }
        -: 1157:
        -: 1158:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 1159:#endif
        -: 1160:
        -: 1161:        if (__r.first)
        -: 1162:        {
        -: 1163:            __r.second = __n;
        -: 1164:            break;
        -: 1165:        }
        -: 1166:        __n /= 2;
        -: 1167:    }
        -: 1168:    return __r;
        -: 1169:}
        -: 1170:
        -: 1171:template <class _Tp>
        -: 1172:inline _LIBCPP_INLINE_VISIBILITY
        -: 1173:void return_temporary_buffer(_Tp* __p) _NOEXCEPT
        -: 1174:{
        -: 1175:  _VSTD::__libcpp_deallocate_unsized((void*)__p, _LIBCPP_ALIGNOF(_Tp));
        -: 1176:}
        -: 1177:
        -: 1178:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 1179:template <class _Tp>
        -: 1180:struct _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr_ref
        -: 1181:{
        -: 1182:    _Tp* __ptr_;
        -: 1183:};
        -: 1184:
        -: 1185:template<class _Tp>
        -: 1186:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr
        -: 1187:{
        -: 1188:private:
        -: 1189:    _Tp* __ptr_;
        -: 1190:public:
        -: 1191:    typedef _Tp element_type;
        -: 1192:
        -: 1193:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) _NOEXCEPT : __ptr_(__p) {}
        -: 1194:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) _NOEXCEPT : __ptr_(__p.release()) {}
        -: 1195:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) _NOEXCEPT
        -: 1196:        : __ptr_(__p.release()) {}
        -: 1197:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) _NOEXCEPT
        -: 1198:        {reset(__p.release()); return *this;}
        -: 1199:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) _NOEXCEPT
        -: 1200:        {reset(__p.release()); return *this;}
        -: 1201:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) _NOEXCEPT
        -: 1202:        {reset(__p.__ptr_); return *this;}
        -: 1203:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() _NOEXCEPT {delete __ptr_;}
        -: 1204:
        -: 1205:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const _NOEXCEPT
        -: 1206:        {return *__ptr_;}
        -: 1207:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const _NOEXCEPT {return __ptr_;}
        -: 1208:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const _NOEXCEPT {return __ptr_;}
        -: 1209:    _LIBCPP_INLINE_VISIBILITY _Tp* release() _NOEXCEPT
        -: 1210:    {
        -: 1211:        _Tp* __t = __ptr_;
        -: 1212:        __ptr_ = nullptr;
        -: 1213:        return __t;
        -: 1214:    }
        -: 1215:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) _NOEXCEPT
        -: 1216:    {
        -: 1217:        if (__ptr_ != __p)
        -: 1218:            delete __ptr_;
        -: 1219:        __ptr_ = __p;
        -: 1220:    }
        -: 1221:
        -: 1222:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) _NOEXCEPT : __ptr_(__p.__ptr_) {}
        -: 1223:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() _NOEXCEPT
        -: 1224:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 1225:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() _NOEXCEPT
        -: 1226:        {return auto_ptr<_Up>(release());}
        -: 1227:};
        -: 1228:
        -: 1229:template <>
        -: 1230:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr<void>
        -: 1231:{
        -: 1232:public:
        -: 1233:    typedef void element_type;
        -: 1234:};
        -: 1235:#endif
        -: 1236:
        -: 1237:// Tag used to default initialize one or both of the pair's elements.
        -: 1238:struct __default_init_tag {};
        -: 1239:struct __value_init_tag {};
        -: 1240:
        -: 1241:template <class _Tp, int _Idx,
        -: 1242:          bool _CanBeEmptyBase =
        -: 1243:              is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>
        -: 1244:struct __compressed_pair_elem {
        -: 1245:  typedef _Tp _ParamT;
        -: 1246:  typedef _Tp& reference;
        -: 1247:  typedef const _Tp& const_reference;
        -: 1248:
        -: 1249:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__122__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE called 11 returned 100% blocks executed 100%
       11: 1250:  __compressed_pair_elem(__default_init_tag) {}
       11: 1250-block  0
        -: 1251:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1252:  __compressed_pair_elem(__value_init_tag) : __value_() {}
        -: 1253:
        -: 1254:  template <class _Up, class = typename enable_if<
        -: 1255:      !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 1256:  >::type>
        -: 1257:  _LIBCPP_INLINE_VISIBILITY
        -: 1258:  _LIBCPP_CONSTEXPR explicit
function _ZNSt3__122__compressed_pair_elemIP7__sFILELi0ELb0EEC2IRS2_vEEOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemIPFiP7__sFILEELi1ELb0EEC2IS4_vEEOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELi0ELb0EEC2IS7_vEEOT_ called 70 returned 100% blocks executed 100%
       70: 1259:  __compressed_pair_elem(_Up&& __u)
       70: 1260:      : __value_(_VSTD::forward<_Up>(__u))
        -: 1261:    {
       70: 1262:    }
    $$$$$: 1262-block  0
    $$$$$: 1262-block  1
       70: 1262-block  2
        -: 1263:
        -: 1264:
        -: 1265:#ifndef _LIBCPP_CXX03_LANG
        -: 1266:  template <class... _Args, size_t... _Indexes>
        -: 1267:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1268:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 1269:                         __tuple_indices<_Indexes...>)
        -: 1270:      : __value_(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 1271:#endif
        -: 1272:
        -: 1273:
function _ZNSt3__122__compressed_pair_elemIPNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEELi0ELb0EE5__getEv called 148 returned 100% blocks executed 100%
function _ZNSt3__122__compressed_pair_elemIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELi0ELb0EE5__getEv called 140 returned 100% blocks executed 100%
function _ZNSt3__122__compressed_pair_elemIP7__sFILELi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemIPFiP7__sFILEELi1ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv called 2 returned 100% blocks executed 100%
      290: 1274:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; }
      148: 1274-block  0
      140: 1274-block  1
    $$$$$: 1274-block  2
    $$$$$: 1274-block  3
        2: 1274-block  4
        -: 1275:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__122__compressed_pair_elemIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__122__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv called 627 returned 100% blocks executed 100%
function _ZNKSt3__122__compressed_pair_elemIPNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEELi0ELb0EE5__getEv called 21 returned 100% blocks executed 100%
      648: 1276:  const_reference __get() const _NOEXCEPT { return __value_; }
    $$$$$: 1276-block  0
      627: 1276-block  1
       21: 1276-block  2
        -: 1277:
        -: 1278:private:
        -: 1279:  _Tp __value_;
        -: 1280:};
        -: 1281:
        -: 1282:template <class _Tp, int _Idx>
        -: 1283:struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
        -: 1284:  typedef _Tp _ParamT;
        -: 1285:  typedef _Tp& reference;
        -: 1286:  typedef const _Tp& const_reference;
        -: 1287:  typedef _Tp __value_type;
        -: 1288:
        -: 1289:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR __compressed_pair_elem() = default;
        -: 1290:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2ENS_18__default_init_tagE called 10 returned 100% blocks executed 100%
function _ZNSt3__122__compressed_pair_elemINS_14default_deleteINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELi1ELb1EEC2ENS_18__default_init_tagE called 70 returned 100% blocks executed 100%
       80: 1291:  __compressed_pair_elem(__default_init_tag) {}
       10: 1291-block  0
       70: 1291-block  1
        -: 1292:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1293:  __compressed_pair_elem(__value_init_tag) : __value_type() {}
        -: 1294:
        -: 1295:  template <class _Up, class = typename enable_if<
        -: 1296:        !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 1297:  >::type>
        -: 1298:  _LIBCPP_INLINE_VISIBILITY
        -: 1299:  _LIBCPP_CONSTEXPR explicit
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IRKS2_vEEOT_ called 1 returned 100% blocks executed 100%
        1: 1300:  __compressed_pair_elem(_Up&& __u)
        1: 1301:      : __value_type(_VSTD::forward<_Up>(__u))
        2: 1302:  {}
        1: 1302-block  0
        1: 1302-block  1
        -: 1303:
        -: 1304:#ifndef _LIBCPP_CXX03_LANG
        -: 1305:  template <class... _Args, size_t... _Indexes>
        -: 1306:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1307:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 1308:                         __tuple_indices<_Indexes...>)
        -: 1309:      : __value_type(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 1310:#endif
        -: 1311:
function _ZNSt3__122__compressed_pair_elemINS_14default_deleteINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELi1ELb1EE5__getEv called 74 returned 100% blocks executed 100%
function _ZNSt3__122__compressed_pair_elemINS_14default_deleteINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv called 1 returned 100% blocks executed 100%
       75: 1312:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return *this; }
       74: 1312-block  0
    $$$$$: 1312-block  1
        1: 1312-block  2
        -: 1313:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
    #####: 1314:  const_reference __get() const _NOEXCEPT { return *this; }
    $$$$$: 1314-block  0
        -: 1315:};
        -: 1316:
        -: 1317:template <class _T1, class _T2>
        -: 1318:class __compressed_pair : private __compressed_pair_elem<_T1, 0>,
        -: 1319:                          private __compressed_pair_elem<_T2, 1> {
        -: 1320:public:
        -: 1321:  // NOTE: This static assert should never fire because __compressed_pair
        -: 1322:  // is *almost never* used in a scenario where it's possible for T1 == T2.
        -: 1323:  // (The exception is std::function where it is possible that the function
        -: 1324:  //  object and the allocator have the same type).
        -: 1325:  static_assert((!is_same<_T1, _T2>::value),
        -: 1326:    "__compressed_pair cannot be instantiated when T1 and T2 are the same type; "
        -: 1327:    "The current implementation is NOT ABI-compatible with the previous "
        -: 1328:    "implementation for this configuration");
        -: 1329:
        -: 1330:    typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T1, 0> _Base1;
        -: 1331:    typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T2, 1> _Base2;
        -: 1332:
        -: 1333:    template <bool _Dummy = true,
        -: 1334:      class = typename enable_if<
        -: 1335:          __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
        -: 1336:          __dependent_type<is_default_constructible<_T2>, _Dummy>::value
        -: 1337:      >::type
        -: 1338:  >
        -: 1339:  _LIBCPP_INLINE_VISIBILITY
        -: 1340:  _LIBCPP_CONSTEXPR __compressed_pair() : _Base1(__value_init_tag()), _Base2(__value_init_tag()) {}
        -: 1341:
        -: 1342:  template <class _U1, class _U2>
        -: 1343:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__117__compressed_pairIP7__sFILEPFiS2_EEC1IRS2_S4_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIP7__sFILEPFiS2_EEC2IRS2_S4_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC1INS_18__default_init_tagESA_EEOT_OT0_ called 10 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_ called 10 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC1INS_18__default_init_tagERKS5_EEOT_OT0_ called 1 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_ called 1 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEEC1IS7_NS_18__default_init_tagEEEOT_OT0_ called 70 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEEC2IS7_NS_18__default_init_tagEEEOT_OT0_ called 70 returned 100% blocks executed 100%
      162: 1344:  __compressed_pair(_U1&& __t1, _U2&& __t2)
      162: 1345:      : _Base1(_VSTD::forward<_U1>(__t1)), _Base2(_VSTD::forward<_U2>(__t2)) {}
    $$$$$: 1345-block  0
    $$$$$: 1345-block  1
       10: 1345-block  2
       10: 1345-block  3
        1: 1345-block  4
        1: 1345-block  5
       70: 1345-block  6
       70: 1345-block  7
        -: 1346:
        -: 1347:#ifndef _LIBCPP_CXX03_LANG
        -: 1348:  template <class... _Args1, class... _Args2>
        -: 1349:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1350:  __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 1351:                    tuple<_Args2...> __second_args)
        -: 1352:      : _Base1(__pc, _VSTD::move(__first_args),
        -: 1353:               typename __make_tuple_indices<sizeof...(_Args1)>::type()),
        -: 1354:        _Base2(__pc, _VSTD::move(__second_args),
        -: 1355:               typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}
        -: 1356:#endif
        -: 1357:
        -: 1358:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__117__compressed_pairIPNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE5firstEv called 148 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE5firstEv called 140 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairIP7__sFILEPFiS2_EE5firstEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv called 2 returned 100% blocks executed 100%
      290: 1359:  typename _Base1::reference first() _NOEXCEPT {
      290: 1360:    return static_cast<_Base1&>(*this).__get();
      148: 1360-block  0
      140: 1360-block  1
    $$$$$: 1360-block  2
        2: 1360-block  3
        -: 1361:  }
        -: 1362:
        -: 1363:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__117__compressed_pairIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE5firstEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv called 627 returned 100% blocks executed 100%
function _ZNKSt3__117__compressed_pairIPNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE5firstEv called 21 returned 100% blocks executed 100%
      648: 1364:  typename _Base1::const_reference first() const _NOEXCEPT {
      648: 1365:    return static_cast<_Base1 const&>(*this).__get();
    $$$$$: 1365-block  0
      627: 1365-block  1
       21: 1365-block  2
        -: 1366:  }
        -: 1367:
        -: 1368:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__117__compressed_pairIPNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE6secondEv called 74 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE6secondEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIP7__sFILEPFiS2_EE6secondEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv called 1 returned 100% blocks executed 100%
       75: 1369:  typename _Base2::reference second() _NOEXCEPT {
       75: 1370:    return static_cast<_Base2&>(*this).__get();
       74: 1370-block  0
    $$$$$: 1370-block  1
    $$$$$: 1370-block  2
        1: 1370-block  3
        -: 1371:  }
        -: 1372:
        -: 1373:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv called 0 returned 0% blocks executed 0%
    #####: 1374:  typename _Base2::const_reference second() const _NOEXCEPT {
    #####: 1375:    return static_cast<_Base2 const&>(*this).__get();
    $$$$$: 1375-block  0
        -: 1376:  }
        -: 1377:
        -: 1378:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1379:  static _Base1* __get_first_base(__compressed_pair* __pair) _NOEXCEPT {
        -: 1380:    return static_cast<_Base1*>(__pair);
        -: 1381:  }
        -: 1382:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1383:  static _Base2* __get_second_base(__compressed_pair* __pair) _NOEXCEPT {
        -: 1384:    return static_cast<_Base2*>(__pair);
        -: 1385:  }
        -: 1386:
        -: 1387:  _LIBCPP_INLINE_VISIBILITY
        -: 1388:  void swap(__compressed_pair& __x)
        -: 1389:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 1390:               __is_nothrow_swappable<_T2>::value)
        -: 1391:  {
        -: 1392:    using _VSTD::swap;
        -: 1393:    swap(first(), __x.first());
        -: 1394:    swap(second(), __x.second());
        -: 1395:  }
        -: 1396:};
        -: 1397:
        -: 1398:template <class _T1, class _T2>
        -: 1399:inline _LIBCPP_INLINE_VISIBILITY
        -: 1400:void swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 1401:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 1402:               __is_nothrow_swappable<_T2>::value) {
        -: 1403:  __x.swap(__y);
        -: 1404:}
        -: 1405:
        -: 1406:// default_delete
        -: 1407:
        -: 1408:template <class _Tp>
        -: 1409:struct _LIBCPP_TEMPLATE_VIS default_delete {
        -: 1410:    static_assert(!is_function<_Tp>::value,
        -: 1411:                  "default_delete cannot be instantiated for function types");
        -: 1412:#ifndef _LIBCPP_CXX03_LANG
        -: 1413:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;
        -: 1414:#else
        -: 1415:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 1416:#endif
        -: 1417:  template <class _Up>
        -: 1418:  _LIBCPP_INLINE_VISIBILITY
        -: 1419:  default_delete(const default_delete<_Up>&,
        -: 1420:                 typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* =
        -: 1421:                     0) _NOEXCEPT {}
        -: 1422:
function _ZNKSt3__114default_deleteINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclEPS6_ called 74 returned 100% blocks executed 100%
function _ZNKSt3__114default_deleteINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclEPS6_ called 0 returned 0% blocks executed 0%
       74: 1423:  _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __ptr) const _NOEXCEPT {
        -: 1424:    static_assert(sizeof(_Tp) > 0,
        -: 1425:                  "default_delete can not delete incomplete type");
        -: 1426:    static_assert(!is_void<_Tp>::value,
        -: 1427:                  "default_delete can not delete incomplete type");
       74: 1428:    delete __ptr;
       74: 1428-block  0
branch  0 taken 74
branch  1 taken 0
       74: 1428-block  1
    $$$$$: 1428-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 1428-block  3
       74: 1429:  }
       74: 1429-block  0
    $$$$$: 1429-block  1
        -: 1430:};
        -: 1431:
        -: 1432:template <class _Tp>
        -: 1433:struct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]> {
        -: 1434:private:
        -: 1435:  template <class _Up>
        -: 1436:  struct _EnableIfConvertible
        -: 1437:      : enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value> {};
        -: 1438:
        -: 1439:public:
        -: 1440:#ifndef _LIBCPP_CXX03_LANG
        -: 1441:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;
        -: 1442:#else
        -: 1443:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 1444:#endif
        -: 1445:
        -: 1446:  template <class _Up>
        -: 1447:  _LIBCPP_INLINE_VISIBILITY
        -: 1448:  default_delete(const default_delete<_Up[]>&,
        -: 1449:                 typename _EnableIfConvertible<_Up>::type* = 0) _NOEXCEPT {}
        -: 1450:
        -: 1451:  template <class _Up>
        -: 1452:  _LIBCPP_INLINE_VISIBILITY
        -: 1453:  typename _EnableIfConvertible<_Up>::type
        -: 1454:  operator()(_Up* __ptr) const _NOEXCEPT {
        -: 1455:    static_assert(sizeof(_Tp) > 0,
        -: 1456:                  "default_delete can not delete incomplete type");
        -: 1457:    static_assert(!is_void<_Tp>::value,
        -: 1458:                  "default_delete can not delete void type");
        -: 1459:    delete[] __ptr;
        -: 1460:  }
        -: 1461:};
        -: 1462:
        -: 1463:template <class _Deleter>
        -: 1464:struct __unique_ptr_deleter_sfinae {
        -: 1465:  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
        -: 1466:  typedef const _Deleter& __lval_ref_type;
        -: 1467:  typedef _Deleter&& __good_rval_ref_type;
        -: 1468:  typedef true_type __enable_rval_overload;
        -: 1469:};
        -: 1470:
        -: 1471:template <class _Deleter>
        -: 1472:struct __unique_ptr_deleter_sfinae<_Deleter const&> {
        -: 1473:  typedef const _Deleter& __lval_ref_type;
        -: 1474:  typedef const _Deleter&& __bad_rval_ref_type;
        -: 1475:  typedef false_type __enable_rval_overload;
        -: 1476:};
        -: 1477:
        -: 1478:template <class _Deleter>
        -: 1479:struct __unique_ptr_deleter_sfinae<_Deleter&> {
        -: 1480:  typedef _Deleter& __lval_ref_type;
        -: 1481:  typedef _Deleter&& __bad_rval_ref_type;
        -: 1482:  typedef false_type __enable_rval_overload;
        -: 1483:};
        -: 1484:
        -: 1485:#if defined(_LIBCPP_ABI_ENABLE_UNIQUE_PTR_TRIVIAL_ABI)
        -: 1486:#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI __attribute__((trivial_abi))
        -: 1487:#else
        -: 1488:#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI
        -: 1489:#endif
        -: 1490:
        -: 1491:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 1492:class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr {
        -: 1493:public:
        -: 1494:  typedef _Tp element_type;
        -: 1495:  typedef _Dp deleter_type;
        -: 1496:  typedef _LIBCPP_NODEBUG_TYPE typename __pointer<_Tp, deleter_type>::type pointer;
        -: 1497:
        -: 1498:  static_assert(!is_rvalue_reference<deleter_type>::value,
        -: 1499:                "the specified deleter type cannot be an rvalue reference");
        -: 1500:
        -: 1501:private:
        -: 1502:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 1503:
        -: 1504:  struct __nat { int __for_bool_; };
        -: 1505:
        -: 1506:  typedef _LIBCPP_NODEBUG_TYPE __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 1507:
        -: 1508:  template <bool _Dummy>
        -: 1509:  using _LValRefType _LIBCPP_NODEBUG_TYPE =
        -: 1510:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 1511:
        -: 1512:  template <bool _Dummy>
        -: 1513:  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 1514:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 1515:
        -: 1516:  template <bool _Dummy>
        -: 1517:  using _BadRValRefType _LIBCPP_NODEBUG_TYPE  =
        -: 1518:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 1519:
        -: 1520:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 1521:                             __identity<deleter_type>, _Dummy>::type>
        -: 1522:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE =
        -: 1523:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 1524:                         !is_pointer<_Deleter>::value>::type;
        -: 1525:
        -: 1526:  template <class _ArgType>
        -: 1527:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 1528:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 1529:
        -: 1530:  template <class _UPtr, class _Up>
        -: 1531:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 1532:      is_convertible<typename _UPtr::pointer, pointer>::value &&
        -: 1533:      !is_array<_Up>::value
        -: 1534:  >::type;
        -: 1535:
        -: 1536:  template <class _UDel>
        -: 1537:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 1538:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 1539:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 1540:    >::type;
        -: 1541:
        -: 1542:  template <class _UDel>
        -: 1543:  using _EnableIfDeleterAssignable = typename enable_if<
        -: 1544:      is_assignable<_Dp&, _UDel&&>::value
        -: 1545:    >::type;
        -: 1546:
        -: 1547:public:
        -: 1548:  template <bool _Dummy = true,
        -: 1549:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 1550:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEEC1ILb1EvEEv called 70 returned 100% blocks executed 100%
function _ZNSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEEC2ILb1EvEEv called 70 returned 100% blocks executed 66%
      140: 1551:  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
       70: 1551-block  0
       70: 1551-block  1
branch  0 taken 70
branch  1 taken 0
       70: 1551-block  2
    $$$$$: 1551-block  3
        -: 1552:
        -: 1553:  template <bool _Dummy = true,
        -: 1554:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 1555:  _LIBCPP_INLINE_VISIBILITY
        -: 1556:  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 1557:
        -: 1558:  template <bool _Dummy = true,
        -: 1559:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 1560:  _LIBCPP_INLINE_VISIBILITY
        -: 1561:  explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __default_init_tag()) {}
        -: 1562:
        -: 1563:  template <bool _Dummy = true,
        -: 1564:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -: 1565:  _LIBCPP_INLINE_VISIBILITY
        -: 1566:  unique_ptr(pointer __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 1567:      : __ptr_(__p, __d) {}
        -: 1568:
        -: 1569:  template <bool _Dummy = true,
        -: 1570:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -: 1571:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__110unique_ptrI7__sFILEPFiPS1_EEC1ILb1EvEES2_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS4_EEXT_EE20__good_rval_ref_typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__110unique_ptrI7__sFILEPFiPS1_EEC2ILb1EvEES2_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS4_EEXT_EE20__good_rval_ref_typeE called 0 returned 0% blocks executed 0%
    #####: 1572:  unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
    #####: 1573:      : __ptr_(__p, _VSTD::move(__d)) {
    $$$$$: 1573-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1573-block  1
        -: 1574:    static_assert(!is_reference<deleter_type>::value,
        -: 1575:                  "rvalue deleter bound to reference");
    #####: 1576:  }
    $$$$$: 1576-block  0
    $$$$$: 1576-block  1
        -: 1577:
        -: 1578:  template <bool _Dummy = true,
        -: 1579:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >
        -: 1580:  _LIBCPP_INLINE_VISIBILITY
        -: 1581:  unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 1582:
        -: 1583:  _LIBCPP_INLINE_VISIBILITY
        -: 1584:  unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 1585:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 1586:  }
        -: 1587:
        -: 1588:  template <class _Up, class _Ep,
        -: 1589:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 1590:      class = _EnableIfDeleterConvertible<_Ep>
        -: 1591:  >
        -: 1592:  _LIBCPP_INLINE_VISIBILITY
        -: 1593:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 1594:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 1595:
        -: 1596:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 1597:  template <class _Up>
        -: 1598:  _LIBCPP_INLINE_VISIBILITY
        -: 1599:  unique_ptr(auto_ptr<_Up>&& __p,
        -: 1600:             typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 1601:                                    is_same<_Dp, default_delete<_Tp> >::value,
        -: 1602:                                __nat>::type = __nat()) _NOEXCEPT
        -: 1603:      : __ptr_(__p.release(), __default_init_tag()) {}
        -: 1604:#endif
        -: 1605:
        -: 1606:  _LIBCPP_INLINE_VISIBILITY
        -: 1607:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -: 1608:    reset(__u.release());
        -: 1609:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 1610:    return *this;
        -: 1611:  }
        -: 1612:
        -: 1613:  template <class _Up, class _Ep,
        -: 1614:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 1615:      class = _EnableIfDeleterAssignable<_Ep>
        -: 1616:  >
        -: 1617:  _LIBCPP_INLINE_VISIBILITY
        -: 1618:  unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 1619:    reset(__u.release());
        -: 1620:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 1621:    return *this;
        -: 1622:  }
        -: 1623:
        -: 1624:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 1625:  template <class _Up>
        -: 1626:  _LIBCPP_INLINE_VISIBILITY
        -: 1627:      typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 1628:                             is_same<_Dp, default_delete<_Tp> >::value,
        -: 1629:                         unique_ptr&>::type
        -: 1630:      operator=(auto_ptr<_Up> __p) {
        -: 1631:    reset(__p.release());
        -: 1632:    return *this;
        -: 1633:  }
        -: 1634:#endif
        -: 1635:
        -: 1636:#ifdef _LIBCPP_CXX03_LANG
        -: 1637:  unique_ptr(unique_ptr const&) = delete;
        -: 1638:  unique_ptr& operator=(unique_ptr const&) = delete;
        -: 1639:#endif
        -: 1640:
        -: 1641:
        -: 1642:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__110unique_ptrINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEED1Ev called 74 returned 100% blocks executed 100%
function _ZNSt3__110unique_ptrINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEED2Ev called 74 returned 100% blocks executed 100%
function _ZNSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEED1Ev called 70 returned 100% blocks executed 100%
function _ZNSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEED2Ev called 70 returned 100% blocks executed 100%
function _ZNSt3__110unique_ptrI7__sFILEPFiPS1_EED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__110unique_ptrI7__sFILEPFiPS1_EED2Ev called 0 returned 0% blocks executed 0%
      288: 1643:  ~unique_ptr() { reset(); }
       74: 1643-block  0
       74: 1643-block  1
       70: 1643-block  2
       70: 1643-block  3
    $$$$$: 1643-block  4
    $$$$$: 1643-block  5
        -: 1644:
        -: 1645:  _LIBCPP_INLINE_VISIBILITY
        -: 1646:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 1647:    reset();
        -: 1648:    return *this;
        -: 1649:  }
        -: 1650:
        -: 1651:  _LIBCPP_INLINE_VISIBILITY
        -: 1652:  typename add_lvalue_reference<_Tp>::type
function _ZNKSt3__110unique_ptrINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEEdeEv called 21 returned 100% blocks executed 100%
       21: 1653:  operator*() const {
       21: 1654:    return *__ptr_.first();
       21: 1654-block  0
        -: 1655:  }
        -: 1656:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEEptEv called 0 returned 0% blocks executed 0%
    #####: 1657:  pointer operator->() const _NOEXCEPT {
    #####: 1658:    return __ptr_.first();
    $$$$$: 1658-block  0
        -: 1659:  }
        -: 1660:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE3getEv called 0 returned 0% blocks executed 0%
    #####: 1661:  pointer get() const _NOEXCEPT {
    #####: 1662:    return __ptr_.first();
    $$$$$: 1662-block  0
        -: 1663:  }
        -: 1664:  _LIBCPP_INLINE_VISIBILITY
        -: 1665:  deleter_type& get_deleter() _NOEXCEPT {
        -: 1666:    return __ptr_.second();
        -: 1667:  }
        -: 1668:  _LIBCPP_INLINE_VISIBILITY
        -: 1669:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 1670:    return __ptr_.second();
        -: 1671:  }
        -: 1672:  _LIBCPP_INLINE_VISIBILITY
        -: 1673:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 1674:    return __ptr_.first() != nullptr;
        -: 1675:  }
        -: 1676:
        -: 1677:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__110unique_ptrI7__sFILEPFiPS1_EE7releaseEv called 0 returned 0% blocks executed 0%
    #####: 1678:  pointer release() _NOEXCEPT {
    #####: 1679:    pointer __t = __ptr_.first();
    #####: 1680:    __ptr_.first() = pointer();
    #####: 1681:    return __t;
    $$$$$: 1681-block  0
        -: 1682:  }
        -: 1683:
        -: 1684:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__110unique_ptrINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE5resetEPS6_ called 74 returned 100% blocks executed 100%
function _ZNSt3__110unique_ptrINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_14default_deleteIS6_EEE5resetEPS6_ called 70 returned 100% blocks executed 66%
function _ZNSt3__110unique_ptrI7__sFILEPFiPS1_EE5resetES2_ called 0 returned 0% blocks executed 0%
      144: 1685:  void reset(pointer __p = pointer()) _NOEXCEPT {
      144: 1686:    pointer __tmp = __ptr_.first();
      144: 1687:    __ptr_.first() = __p;
      144: 1688:    if (__tmp)
       74: 1688-block  0
branch  0 taken 74
branch  1 taken 0
       70: 1688-block  1
branch  2 taken 0
branch  3 taken 70
    $$$$$: 1688-block  2
branch  4 never executed
branch  5 never executed
       74: 1689:      __ptr_.second()(__tmp);
       74: 1689-block  0
    $$$$$: 1689-block  1
    $$$$$: 1689-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 1689-block  3
    $$$$$: 1689-block  4
      144: 1690:  }
       74: 1690-block  0
       70: 1690-block  1
    $$$$$: 1690-block  2
        -: 1691:
        -: 1692:  _LIBCPP_INLINE_VISIBILITY
        -: 1693:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 1694:    __ptr_.swap(__u.__ptr_);
        -: 1695:  }
        -: 1696:};
        -: 1697:
        -: 1698:
        -: 1699:template <class _Tp, class _Dp>
        -: 1700:class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp> {
        -: 1701:public:
        -: 1702:  typedef _Tp element_type;
        -: 1703:  typedef _Dp deleter_type;
        -: 1704:  typedef typename __pointer<_Tp, deleter_type>::type pointer;
        -: 1705:
        -: 1706:private:
        -: 1707:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 1708:
        -: 1709:  template <class _From>
        -: 1710:  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};
        -: 1711:
        -: 1712:  template <class _FromElem>
        -: 1713:  struct _CheckArrayPointerConversion<_FromElem*>
        -: 1714:      : integral_constant<bool,
        -: 1715:          is_same<_FromElem*, pointer>::value ||
        -: 1716:            (is_same<pointer, element_type*>::value &&
        -: 1717:             is_convertible<_FromElem(*)[], element_type(*)[]>::value)
        -: 1718:      >
        -: 1719:  {};
        -: 1720:
        -: 1721:  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 1722:
        -: 1723:  template <bool _Dummy>
        -: 1724:  using _LValRefType _LIBCPP_NODEBUG_TYPE =
        -: 1725:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 1726:
        -: 1727:  template <bool _Dummy>
        -: 1728:  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 1729:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 1730:
        -: 1731:  template <bool _Dummy>
        -: 1732:  using _BadRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 1733:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 1734:
        -: 1735:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 1736:                             __identity<deleter_type>, _Dummy>::type>
        -: 1737:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 1738:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 1739:                         !is_pointer<_Deleter>::value>::type;
        -: 1740:
        -: 1741:  template <class _ArgType>
        -: 1742:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 1743:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 1744:
        -: 1745:  template <class _Pp>
        -: 1746:  using _EnableIfPointerConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 1747:      _CheckArrayPointerConversion<_Pp>::value
        -: 1748:  >::type;
        -: 1749:
        -: 1750:  template <class _UPtr, class _Up,
        -: 1751:        class _ElemT = typename _UPtr::element_type>
        -: 1752:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 1753:      is_array<_Up>::value &&
        -: 1754:      is_same<pointer, element_type*>::value &&
        -: 1755:      is_same<typename _UPtr::pointer, _ElemT*>::value &&
        -: 1756:      is_convertible<_ElemT(*)[], element_type(*)[]>::value
        -: 1757:    >::type;
        -: 1758:
        -: 1759:  template <class _UDel>
        -: 1760:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 1761:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 1762:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 1763:    >::type;
        -: 1764:
        -: 1765:  template <class _UDel>
        -: 1766:  using _EnableIfDeleterAssignable _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 1767:      is_assignable<_Dp&, _UDel&&>::value
        -: 1768:    >::type;
        -: 1769:
        -: 1770:public:
        -: 1771:  template <bool _Dummy = true,
        -: 1772:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 1773:  _LIBCPP_INLINE_VISIBILITY
        -: 1774:  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 1775:
        -: 1776:  template <bool _Dummy = true,
        -: 1777:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 1778:  _LIBCPP_INLINE_VISIBILITY
        -: 1779:  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 1780:
        -: 1781:  template <class _Pp, bool _Dummy = true,
        -: 1782:            class = _EnableIfDeleterDefaultConstructible<_Dummy>,
        -: 1783:            class = _EnableIfPointerConvertible<_Pp> >
        -: 1784:  _LIBCPP_INLINE_VISIBILITY
        -: 1785:  explicit unique_ptr(_Pp __p) _NOEXCEPT
        -: 1786:      : __ptr_(__p, __default_init_tag()) {}
        -: 1787:
        -: 1788:  template <class _Pp, bool _Dummy = true,
        -: 1789:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,
        -: 1790:            class = _EnableIfPointerConvertible<_Pp> >
        -: 1791:  _LIBCPP_INLINE_VISIBILITY
        -: 1792:  unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 1793:      : __ptr_(__p, __d) {}
        -: 1794:
        -: 1795:  template <bool _Dummy = true,
        -: 1796:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -: 1797:  _LIBCPP_INLINE_VISIBILITY
        -: 1798:  unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 1799:      : __ptr_(nullptr, __d) {}
        -: 1800:
        -: 1801:  template <class _Pp, bool _Dummy = true,
        -: 1802:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,
        -: 1803:            class = _EnableIfPointerConvertible<_Pp> >
        -: 1804:  _LIBCPP_INLINE_VISIBILITY
        -: 1805:  unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 1806:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 1807:    static_assert(!is_reference<deleter_type>::value,
        -: 1808:                  "rvalue deleter bound to reference");
        -: 1809:  }
        -: 1810:
        -: 1811:  template <bool _Dummy = true,
        -: 1812:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -: 1813:  _LIBCPP_INLINE_VISIBILITY
        -: 1814:  unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 1815:      : __ptr_(nullptr, _VSTD::move(__d)) {
        -: 1816:    static_assert(!is_reference<deleter_type>::value,
        -: 1817:                  "rvalue deleter bound to reference");
        -: 1818:  }
        -: 1819:
        -: 1820:  template <class _Pp, bool _Dummy = true,
        -: 1821:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,
        -: 1822:            class = _EnableIfPointerConvertible<_Pp> >
        -: 1823:  _LIBCPP_INLINE_VISIBILITY
        -: 1824:  unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 1825:
        -: 1826:  _LIBCPP_INLINE_VISIBILITY
        -: 1827:  unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 1828:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 1829:  }
        -: 1830:
        -: 1831:  _LIBCPP_INLINE_VISIBILITY
        -: 1832:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -: 1833:    reset(__u.release());
        -: 1834:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 1835:    return *this;
        -: 1836:  }
        -: 1837:
        -: 1838:  template <class _Up, class _Ep,
        -: 1839:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 1840:      class = _EnableIfDeleterConvertible<_Ep>
        -: 1841:  >
        -: 1842:  _LIBCPP_INLINE_VISIBILITY
        -: 1843:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 1844:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {
        -: 1845:  }
        -: 1846:
        -: 1847:  template <class _Up, class _Ep,
        -: 1848:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 1849:      class = _EnableIfDeleterAssignable<_Ep>
        -: 1850:  >
        -: 1851:  _LIBCPP_INLINE_VISIBILITY
        -: 1852:  unique_ptr&
        -: 1853:  operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 1854:    reset(__u.release());
        -: 1855:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 1856:    return *this;
        -: 1857:  }
        -: 1858:
        -: 1859:#ifdef _LIBCPP_CXX03_LANG
        -: 1860:  unique_ptr(unique_ptr const&) = delete;
        -: 1861:  unique_ptr& operator=(unique_ptr const&) = delete;
        -: 1862:#endif
        -: 1863:
        -: 1864:public:
        -: 1865:  _LIBCPP_INLINE_VISIBILITY
        -: 1866:  ~unique_ptr() { reset(); }
        -: 1867:
        -: 1868:  _LIBCPP_INLINE_VISIBILITY
        -: 1869:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 1870:    reset();
        -: 1871:    return *this;
        -: 1872:  }
        -: 1873:
        -: 1874:  _LIBCPP_INLINE_VISIBILITY
        -: 1875:  typename add_lvalue_reference<_Tp>::type
        -: 1876:  operator[](size_t __i) const {
        -: 1877:    return __ptr_.first()[__i];
        -: 1878:  }
        -: 1879:  _LIBCPP_INLINE_VISIBILITY
        -: 1880:  pointer get() const _NOEXCEPT {
        -: 1881:    return __ptr_.first();
        -: 1882:  }
        -: 1883:
        -: 1884:  _LIBCPP_INLINE_VISIBILITY
        -: 1885:  deleter_type& get_deleter() _NOEXCEPT {
        -: 1886:    return __ptr_.second();
        -: 1887:  }
        -: 1888:
        -: 1889:  _LIBCPP_INLINE_VISIBILITY
        -: 1890:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 1891:    return __ptr_.second();
        -: 1892:  }
        -: 1893:  _LIBCPP_INLINE_VISIBILITY
        -: 1894:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 1895:    return __ptr_.first() != nullptr;
        -: 1896:  }
        -: 1897:
        -: 1898:  _LIBCPP_INLINE_VISIBILITY
        -: 1899:  pointer release() _NOEXCEPT {
        -: 1900:    pointer __t = __ptr_.first();
        -: 1901:    __ptr_.first() = pointer();
        -: 1902:    return __t;
        -: 1903:  }
        -: 1904:
        -: 1905:  template <class _Pp>
        -: 1906:  _LIBCPP_INLINE_VISIBILITY
        -: 1907:  typename enable_if<
        -: 1908:      _CheckArrayPointerConversion<_Pp>::value
        -: 1909:  >::type
        -: 1910:  reset(_Pp __p) _NOEXCEPT {
        -: 1911:    pointer __tmp = __ptr_.first();
        -: 1912:    __ptr_.first() = __p;
        -: 1913:    if (__tmp)
        -: 1914:      __ptr_.second()(__tmp);
        -: 1915:  }
        -: 1916:
        -: 1917:  _LIBCPP_INLINE_VISIBILITY
        -: 1918:  void reset(nullptr_t = nullptr) _NOEXCEPT {
        -: 1919:    pointer __tmp = __ptr_.first();
        -: 1920:    __ptr_.first() = nullptr;
        -: 1921:    if (__tmp)
        -: 1922:      __ptr_.second()(__tmp);
        -: 1923:  }
        -: 1924:
        -: 1925:  _LIBCPP_INLINE_VISIBILITY
        -: 1926:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 1927:    __ptr_.swap(__u.__ptr_);
        -: 1928:  }
        -: 1929:
        -: 1930:};
        -: 1931:
        -: 1932:template <class _Tp, class _Dp>
        -: 1933:inline _LIBCPP_INLINE_VISIBILITY
        -: 1934:typename enable_if<
        -: 1935:    __is_swappable<_Dp>::value,
        -: 1936:    void
        -: 1937:>::type
        -: 1938:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 1939:
        -: 1940:template <class _T1, class _D1, class _T2, class _D2>
        -: 1941:inline _LIBCPP_INLINE_VISIBILITY
        -: 1942:bool
        -: 1943:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 1944:
        -: 1945:template <class _T1, class _D1, class _T2, class _D2>
        -: 1946:inline _LIBCPP_INLINE_VISIBILITY
        -: 1947:bool
        -: 1948:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 1949:
        -: 1950:template <class _T1, class _D1, class _T2, class _D2>
        -: 1951:inline _LIBCPP_INLINE_VISIBILITY
        -: 1952:bool
        -: 1953:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 1954:{
        -: 1955:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 1956:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 1957:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 1958:    return less<_Vp>()(__x.get(), __y.get());
        -: 1959:}
        -: 1960:
        -: 1961:template <class _T1, class _D1, class _T2, class _D2>
        -: 1962:inline _LIBCPP_INLINE_VISIBILITY
        -: 1963:bool
        -: 1964:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 1965:
        -: 1966:template <class _T1, class _D1, class _T2, class _D2>
        -: 1967:inline _LIBCPP_INLINE_VISIBILITY
        -: 1968:bool
        -: 1969:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 1970:
        -: 1971:template <class _T1, class _D1, class _T2, class _D2>
        -: 1972:inline _LIBCPP_INLINE_VISIBILITY
        -: 1973:bool
        -: 1974:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 1975:
        -: 1976:template <class _T1, class _D1>
        -: 1977:inline _LIBCPP_INLINE_VISIBILITY
        -: 1978:bool
        -: 1979:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 1980:{
        -: 1981:    return !__x;
        -: 1982:}
        -: 1983:
        -: 1984:template <class _T1, class _D1>
        -: 1985:inline _LIBCPP_INLINE_VISIBILITY
        -: 1986:bool
        -: 1987:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 1988:{
        -: 1989:    return !__x;
        -: 1990:}
        -: 1991:
        -: 1992:template <class _T1, class _D1>
        -: 1993:inline _LIBCPP_INLINE_VISIBILITY
        -: 1994:bool
        -: 1995:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 1996:{
        -: 1997:    return static_cast<bool>(__x);
        -: 1998:}
        -: 1999:
        -: 2000:template <class _T1, class _D1>
        -: 2001:inline _LIBCPP_INLINE_VISIBILITY
        -: 2002:bool
        -: 2003:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2004:{
        -: 2005:    return static_cast<bool>(__x);
        -: 2006:}
        -: 2007:
        -: 2008:template <class _T1, class _D1>
        -: 2009:inline _LIBCPP_INLINE_VISIBILITY
        -: 2010:bool
        -: 2011:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2012:{
        -: 2013:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2014:    return less<_P1>()(__x.get(), nullptr);
        -: 2015:}
        -: 2016:
        -: 2017:template <class _T1, class _D1>
        -: 2018:inline _LIBCPP_INLINE_VISIBILITY
        -: 2019:bool
        -: 2020:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2021:{
        -: 2022:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2023:    return less<_P1>()(nullptr, __x.get());
        -: 2024:}
        -: 2025:
        -: 2026:template <class _T1, class _D1>
        -: 2027:inline _LIBCPP_INLINE_VISIBILITY
        -: 2028:bool
        -: 2029:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2030:{
        -: 2031:    return nullptr < __x;
        -: 2032:}
        -: 2033:
        -: 2034:template <class _T1, class _D1>
        -: 2035:inline _LIBCPP_INLINE_VISIBILITY
        -: 2036:bool
        -: 2037:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2038:{
        -: 2039:    return __x < nullptr;
        -: 2040:}
        -: 2041:
        -: 2042:template <class _T1, class _D1>
        -: 2043:inline _LIBCPP_INLINE_VISIBILITY
        -: 2044:bool
        -: 2045:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2046:{
        -: 2047:    return !(nullptr < __x);
        -: 2048:}
        -: 2049:
        -: 2050:template <class _T1, class _D1>
        -: 2051:inline _LIBCPP_INLINE_VISIBILITY
        -: 2052:bool
        -: 2053:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2054:{
        -: 2055:    return !(__x < nullptr);
        -: 2056:}
        -: 2057:
        -: 2058:template <class _T1, class _D1>
        -: 2059:inline _LIBCPP_INLINE_VISIBILITY
        -: 2060:bool
        -: 2061:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2062:{
        -: 2063:    return !(__x < nullptr);
        -: 2064:}
        -: 2065:
        -: 2066:template <class _T1, class _D1>
        -: 2067:inline _LIBCPP_INLINE_VISIBILITY
        -: 2068:bool
        -: 2069:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2070:{
        -: 2071:    return !(nullptr < __x);
        -: 2072:}
        -: 2073:
        -: 2074:#if _LIBCPP_STD_VER > 11
        -: 2075:
        -: 2076:template<class _Tp>
        -: 2077:struct __unique_if
        -: 2078:{
        -: 2079:    typedef unique_ptr<_Tp> __unique_single;
        -: 2080:};
        -: 2081:
        -: 2082:template<class _Tp>
        -: 2083:struct __unique_if<_Tp[]>
        -: 2084:{
        -: 2085:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 2086:};
        -: 2087:
        -: 2088:template<class _Tp, size_t _Np>
        -: 2089:struct __unique_if<_Tp[_Np]>
        -: 2090:{
        -: 2091:    typedef void __unique_array_known_bound;
        -: 2092:};
        -: 2093:
        -: 2094:template<class _Tp, class... _Args>
        -: 2095:inline _LIBCPP_INLINE_VISIBILITY
        -: 2096:typename __unique_if<_Tp>::__unique_single
        -: 2097:make_unique(_Args&&... __args)
        -: 2098:{
        -: 2099:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 2100:}
        -: 2101:
        -: 2102:template<class _Tp>
        -: 2103:inline _LIBCPP_INLINE_VISIBILITY
        -: 2104:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 2105:make_unique(size_t __n)
        -: 2106:{
        -: 2107:    typedef typename remove_extent<_Tp>::type _Up;
        -: 2108:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 2109:}
        -: 2110:
        -: 2111:template<class _Tp, class... _Args>
        -: 2112:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 2113:    make_unique(_Args&&...) = delete;
        -: 2114:
        -: 2115:#endif  // _LIBCPP_STD_VER > 11
        -: 2116:
        -: 2117:template <class _Tp, class _Dp>
        -: 2118:#ifdef _LIBCPP_CXX03_LANG
        -: 2119:struct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >
        -: 2120:#else
        -: 2121:struct _LIBCPP_TEMPLATE_VIS hash<__enable_hash_helper<
        -: 2122:    unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >
        -: 2123:#endif
        -: 2124:{
        -: 2125:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 2126:    typedef size_t               result_type;
        -: 2127:    _LIBCPP_INLINE_VISIBILITY
        -: 2128:    result_type operator()(const argument_type& __ptr) const
        -: 2129:    {
        -: 2130:        typedef typename argument_type::pointer pointer;
        -: 2131:        return hash<pointer>()(__ptr.get());
        -: 2132:    }
        -: 2133:};
        -: 2134:
        -: 2135:struct __destruct_n
        -: 2136:{
        -: 2137:private:
        -: 2138:    size_t __size_;
        -: 2139:
        -: 2140:    template <class _Tp>
        -: 2141:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 2142:        {for (size_t __i = 0; __i < __size_; ++__i, ++__p) __p->~_Tp();}
        -: 2143:
        -: 2144:    template <class _Tp>
        -: 2145:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 2146:        {}
        -: 2147:
        -: 2148:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 2149:        {++__size_;}
        -: 2150:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 2151:        {}
        -: 2152:
        -: 2153:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 2154:        {__size_ = __s;}
        -: 2155:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 2156:        {}
        -: 2157:public:
        -: 2158:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 2159:        : __size_(__s) {}
        -: 2160:
        -: 2161:    template <class _Tp>
        -: 2162:    _LIBCPP_INLINE_VISIBILITY void __incr() _NOEXCEPT
        -: 2163:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 2164:
        -: 2165:    template <class _Tp>
        -: 2166:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 2167:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 2168:
        -: 2169:    template <class _Tp>
        -: 2170:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 2171:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 2172:};
        -: 2173:
        -: 2174:template <class _Alloc>
        -: 2175:class __allocator_destructor
        -: 2176:{
        -: 2177:    typedef _LIBCPP_NODEBUG_TYPE allocator_traits<_Alloc> __alloc_traits;
        -: 2178:public:
        -: 2179:    typedef _LIBCPP_NODEBUG_TYPE typename __alloc_traits::pointer pointer;
        -: 2180:    typedef _LIBCPP_NODEBUG_TYPE typename __alloc_traits::size_type size_type;
        -: 2181:private:
        -: 2182:    _Alloc& __alloc_;
        -: 2183:    size_type __s_;
        -: 2184:public:
        -: 2185:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 2186:             _NOEXCEPT
        -: 2187:        : __alloc_(__a), __s_(__s) {}
        -: 2188:    _LIBCPP_INLINE_VISIBILITY
        -: 2189:    void operator()(pointer __p) _NOEXCEPT
        -: 2190:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 2191:};
        -: 2192:
        -: 2193:template <class _InputIterator, class _ForwardIterator>
        -: 2194:_ForwardIterator
        -: 2195:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 2196:{
        -: 2197:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2198:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2199:    _ForwardIterator __s = __r;
        -: 2200:    try
        -: 2201:    {
        -: 2202:#endif
        -: 2203:        for (; __f != __l; ++__f, (void) ++__r)
        -: 2204:            ::new ((void*)_VSTD::addressof(*__r)) value_type(*__f);
        -: 2205:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2206:    }
        -: 2207:    catch (...)
        -: 2208:    {
        -: 2209:        for (; __s != __r; ++__s)
        -: 2210:            __s->~value_type();
        -: 2211:        throw;
        -: 2212:    }
        -: 2213:#endif
        -: 2214:    return __r;
        -: 2215:}
        -: 2216:
        -: 2217:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 2218:_ForwardIterator
        -: 2219:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 2220:{
        -: 2221:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2222:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2223:    _ForwardIterator __s = __r;
        -: 2224:    try
        -: 2225:    {
        -: 2226:#endif
        -: 2227:        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)
        -: 2228:            ::new ((void*)_VSTD::addressof(*__r)) value_type(*__f);
        -: 2229:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2230:    }
        -: 2231:    catch (...)
        -: 2232:    {
        -: 2233:        for (; __s != __r; ++__s)
        -: 2234:            __s->~value_type();
        -: 2235:        throw;
        -: 2236:    }
        -: 2237:#endif
        -: 2238:    return __r;
        -: 2239:}
        -: 2240:
        -: 2241:template <class _ForwardIterator, class _Tp>
        -: 2242:void
        -: 2243:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 2244:{
        -: 2245:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2246:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2247:    _ForwardIterator __s = __f;
        -: 2248:    try
        -: 2249:    {
        -: 2250:#endif
        -: 2251:        for (; __f != __l; ++__f)
        -: 2252:            ::new ((void*)_VSTD::addressof(*__f)) value_type(__x);
        -: 2253:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2254:    }
        -: 2255:    catch (...)
        -: 2256:    {
        -: 2257:        for (; __s != __f; ++__s)
        -: 2258:            __s->~value_type();
        -: 2259:        throw;
        -: 2260:    }
        -: 2261:#endif
        -: 2262:}
        -: 2263:
        -: 2264:template <class _ForwardIterator, class _Size, class _Tp>
        -: 2265:_ForwardIterator
        -: 2266:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 2267:{
        -: 2268:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2269:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2270:    _ForwardIterator __s = __f;
        -: 2271:    try
        -: 2272:    {
        -: 2273:#endif
        -: 2274:        for (; __n > 0; ++__f, (void) --__n)
        -: 2275:            ::new ((void*)_VSTD::addressof(*__f)) value_type(__x);
        -: 2276:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2277:    }
        -: 2278:    catch (...)
        -: 2279:    {
        -: 2280:        for (; __s != __f; ++__s)
        -: 2281:            __s->~value_type();
        -: 2282:        throw;
        -: 2283:    }
        -: 2284:#endif
        -: 2285:    return __f;
        -: 2286:}
        -: 2287:
        -: 2288:#if _LIBCPP_STD_VER > 14
        -: 2289:
        -: 2290:template <class _ForwardIterator>
        -: 2291:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 2292:void destroy(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2293:    for (; __first != __last; ++__first)
        -: 2294:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 2295:}
        -: 2296:
        -: 2297:template <class _ForwardIterator, class _Size>
        -: 2298:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 2299:_ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {
        -: 2300:    for (; __n > 0; (void)++__first, --__n)
        -: 2301:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 2302:    return __first;
        -: 2303:}
        -: 2304:
        -: 2305:template <class _ForwardIterator>
        -: 2306:inline _LIBCPP_INLINE_VISIBILITY
        -: 2307:void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2308:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 2309:    auto __idx = __first;
        -: 2310:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2311:    try {
        -: 2312:#endif
        -: 2313:    for (; __idx != __last; ++__idx)
        -: 2314:        ::new ((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 2315:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2316:    } catch (...) {
        -: 2317:        _VSTD::destroy(__first, __idx);
        -: 2318:        throw;
        -: 2319:    }
        -: 2320:#endif
        -: 2321:}
        -: 2322:
        -: 2323:template <class _ForwardIterator, class _Size>
        -: 2324:inline _LIBCPP_INLINE_VISIBILITY
        -: 2325:_ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
        -: 2326:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 2327:    auto __idx = __first;
        -: 2328:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2329:    try {
        -: 2330:#endif
        -: 2331:    for (; __n > 0; (void)++__idx, --__n)
        -: 2332:        ::new ((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 2333:    return __idx;
        -: 2334:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2335:    } catch (...) {
        -: 2336:        _VSTD::destroy(__first, __idx);
        -: 2337:        throw;
        -: 2338:    }
        -: 2339:#endif
        -: 2340:}
        -: 2341:
        -: 2342:
        -: 2343:template <class _ForwardIterator>
        -: 2344:inline _LIBCPP_INLINE_VISIBILITY
        -: 2345:void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2346:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 2347:    auto __idx = __first;
        -: 2348:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2349:    try {
        -: 2350:#endif
        -: 2351:    for (; __idx != __last; ++__idx)
        -: 2352:        ::new ((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 2353:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2354:    } catch (...) {
        -: 2355:        _VSTD::destroy(__first, __idx);
        -: 2356:        throw;
        -: 2357:    }
        -: 2358:#endif
        -: 2359:}
        -: 2360:
        -: 2361:template <class _ForwardIterator, class _Size>
        -: 2362:inline _LIBCPP_INLINE_VISIBILITY
        -: 2363:_ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
        -: 2364:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 2365:    auto __idx = __first;
        -: 2366:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2367:    try {
        -: 2368:#endif
        -: 2369:    for (; __n > 0; (void)++__idx, --__n)
        -: 2370:        ::new ((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 2371:    return __idx;
        -: 2372:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2373:    } catch (...) {
        -: 2374:        _VSTD::destroy(__first, __idx);
        -: 2375:        throw;
        -: 2376:    }
        -: 2377:#endif
        -: 2378:}
        -: 2379:
        -: 2380:
        -: 2381:template <class _InputIt, class _ForwardIt>
        -: 2382:inline _LIBCPP_INLINE_VISIBILITY
        -: 2383:_ForwardIt uninitialized_move(_InputIt __first, _InputIt __last, _ForwardIt __first_res) {
        -: 2384:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 2385:    auto __idx = __first_res;
        -: 2386:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2387:    try {
        -: 2388:#endif
        -: 2389:    for (; __first != __last; (void)++__idx, ++__first)
        -: 2390:        ::new ((void*)_VSTD::addressof(*__idx)) _Vt(_VSTD::move(*__first));
        -: 2391:    return __idx;
        -: 2392:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2393:    } catch (...) {
        -: 2394:        _VSTD::destroy(__first_res, __idx);
        -: 2395:        throw;
        -: 2396:    }
        -: 2397:#endif
        -: 2398:}
        -: 2399:
        -: 2400:template <class _InputIt, class _Size, class _ForwardIt>
        -: 2401:inline _LIBCPP_INLINE_VISIBILITY
        -: 2402:pair<_InputIt, _ForwardIt>
        -: 2403:uninitialized_move_n(_InputIt __first, _Size __n, _ForwardIt __first_res) {
        -: 2404:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 2405:    auto __idx = __first_res;
        -: 2406:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2407:    try {
        -: 2408:#endif
        -: 2409:    for (; __n > 0; ++__idx, (void)++__first, --__n)
        -: 2410:        ::new ((void*)_VSTD::addressof(*__idx)) _Vt(_VSTD::move(*__first));
        -: 2411:    return {__first, __idx};
        -: 2412:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2413:    } catch (...) {
        -: 2414:        _VSTD::destroy(__first_res, __idx);
        -: 2415:        throw;
        -: 2416:    }
        -: 2417:#endif
        -: 2418:}
        -: 2419:
        -: 2420:
        -: 2421:#endif // _LIBCPP_STD_VER > 14
        -: 2422:
        -: 2423:// NOTE: Relaxed and acq/rel atomics (for increment and decrement respectively)
        -: 2424:// should be sufficient for thread safety.
        -: 2425:// See https://bugs.llvm.org/show_bug.cgi?id=22803
        -: 2426:#if defined(__clang__) && __has_builtin(__atomic_add_fetch)          \
        -: 2427:                       && defined(__ATOMIC_RELAXED)                  \
        -: 2428:                       && defined(__ATOMIC_ACQ_REL)
        -: 2429:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 2430:#elif defined(_LIBCPP_COMPILER_GCC)
        -: 2431:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 2432:#endif
        -: 2433:
        -: 2434:template <class _Tp>
        -: 2435:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 2436:__libcpp_atomic_refcount_increment(_Tp& __t) _NOEXCEPT
        -: 2437:{
        -: 2438:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 2439:    return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED);
        -: 2440:#else
        -: 2441:    return __t += 1;
        -: 2442:#endif
        -: 2443:}
        -: 2444:
        -: 2445:template <class _Tp>
        -: 2446:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 2447:__libcpp_atomic_refcount_decrement(_Tp& __t) _NOEXCEPT
        -: 2448:{
        -: 2449:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 2450:    return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL);
        -: 2451:#else
        -: 2452:    return __t -= 1;
        -: 2453:#endif
        -: 2454:}
        -: 2455:
        -: 2456:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 2457:    : public std::exception
        -: 2458:{
        -: 2459:public:
        -: 2460:    bad_weak_ptr() _NOEXCEPT = default;
        -: 2461:    bad_weak_ptr(const bad_weak_ptr&) _NOEXCEPT = default;
        -: 2462:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 2463:    virtual const char* what() const  _NOEXCEPT;
        -: 2464:};
        -: 2465:
        -: 2466:_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY
        -: 2467:void __throw_bad_weak_ptr()
        -: 2468:{
        -: 2469:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2470:    throw bad_weak_ptr();
        -: 2471:#else
        -: 2472:    _VSTD::abort();
        -: 2473:#endif
        -: 2474:}
        -: 2475:
        -: 2476:template<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 2477:
        -: 2478:class _LIBCPP_TYPE_VIS __shared_count
        -: 2479:{
        -: 2480:    __shared_count(const __shared_count&);
        -: 2481:    __shared_count& operator=(const __shared_count&);
        -: 2482:
        -: 2483:protected:
        -: 2484:    long __shared_owners_;
        -: 2485:    virtual ~__shared_count();
        -: 2486:private:
        -: 2487:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 2488:
        -: 2489:public:
        -: 2490:    _LIBCPP_INLINE_VISIBILITY
        -: 2491:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        -: 2492:        : __shared_owners_(__refs) {}
        -: 2493:
        -: 2494:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 2495:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 2496:    void __add_shared() _NOEXCEPT;
        -: 2497:    bool __release_shared() _NOEXCEPT;
        -: 2498:#else
        -: 2499:    _LIBCPP_INLINE_VISIBILITY
        -: 2500:    void __add_shared() _NOEXCEPT {
        -: 2501:      __libcpp_atomic_refcount_increment(__shared_owners_);
        -: 2502:    }
        -: 2503:    _LIBCPP_INLINE_VISIBILITY
        -: 2504:    bool __release_shared() _NOEXCEPT {
        -: 2505:      if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
        -: 2506:        __on_zero_shared();
        -: 2507:        return true;
        -: 2508:      }
        -: 2509:      return false;
        -: 2510:    }
        -: 2511:#endif
        -: 2512:    _LIBCPP_INLINE_VISIBILITY
        -: 2513:    long use_count() const _NOEXCEPT {
        -: 2514:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -: 2515:    }
        -: 2516:};
        -: 2517:
        -: 2518:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 2519:    : private __shared_count
        -: 2520:{
        -: 2521:    long __shared_weak_owners_;
        -: 2522:
        -: 2523:public:
        -: 2524:    _LIBCPP_INLINE_VISIBILITY
        -: 2525:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        -: 2526:        : __shared_count(__refs),
        -: 2527:          __shared_weak_owners_(__refs) {}
        -: 2528:protected:
        -: 2529:    virtual ~__shared_weak_count();
        -: 2530:
        -: 2531:public:
        -: 2532:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 2533:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 2534:    void __add_shared() _NOEXCEPT;
        -: 2535:    void __add_weak() _NOEXCEPT;
        -: 2536:    void __release_shared() _NOEXCEPT;
        -: 2537:#else
        -: 2538:    _LIBCPP_INLINE_VISIBILITY
        -: 2539:    void __add_shared() _NOEXCEPT {
        -: 2540:      __shared_count::__add_shared();
        -: 2541:    }
        -: 2542:    _LIBCPP_INLINE_VISIBILITY
        -: 2543:    void __add_weak() _NOEXCEPT {
        -: 2544:      __libcpp_atomic_refcount_increment(__shared_weak_owners_);
        -: 2545:    }
        -: 2546:    _LIBCPP_INLINE_VISIBILITY
        -: 2547:    void __release_shared() _NOEXCEPT {
        -: 2548:      if (__shared_count::__release_shared())
        -: 2549:        __release_weak();
        -: 2550:    }
        -: 2551:#endif
        -: 2552:    void __release_weak() _NOEXCEPT;
        -: 2553:    _LIBCPP_INLINE_VISIBILITY
        -: 2554:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 2555:    __shared_weak_count* lock() _NOEXCEPT;
        -: 2556:
        -: 2557:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 2558:private:
        -: 2559:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 2560:};
        -: 2561:
        -: 2562:template <class _Tp, class _Dp, class _Alloc>
        -: 2563:class __shared_ptr_pointer
        -: 2564:    : public __shared_weak_count
        -: 2565:{
        -: 2566:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 2567:public:
        -: 2568:    _LIBCPP_INLINE_VISIBILITY
        -: 2569:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -: 2570:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 2571:
        -: 2572:#ifndef _LIBCPP_NO_RTTI
        -: 2573:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 2574:#endif
        -: 2575:
        -: 2576:private:
        -: 2577:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 2578:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 2579:};
        -: 2580:
        -: 2581:#ifndef _LIBCPP_NO_RTTI
        -: 2582:
        -: 2583:template <class _Tp, class _Dp, class _Alloc>
        -: 2584:const void*
        -: 2585:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 2586:{
        -: 2587:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : nullptr;
        -: 2588:}
        -: 2589:
        -: 2590:#endif  // _LIBCPP_NO_RTTI
        -: 2591:
        -: 2592:template <class _Tp, class _Dp, class _Alloc>
        -: 2593:void
        -: 2594:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 2595:{
        -: 2596:    __data_.first().second()(__data_.first().first());
        -: 2597:    __data_.first().second().~_Dp();
        -: 2598:}
        -: 2599:
        -: 2600:template <class _Tp, class _Dp, class _Alloc>
        -: 2601:void
        -: 2602:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 2603:{
        -: 2604:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 2605:    typedef allocator_traits<_Al> _ATraits;
        -: 2606:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 2607:
        -: 2608:    _Al __a(__data_.second());
        -: 2609:    __data_.second().~_Alloc();
        -: 2610:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 2611:}
        -: 2612:
        -: 2613:template <class _Tp, class _Alloc>
        -: 2614:struct __shared_ptr_emplace
        -: 2615:    : __shared_weak_count
        -: 2616:{
        -: 2617:    template<class ..._Args>
        -: 2618:    _LIBCPP_HIDE_FROM_ABI
        -: 2619:    explicit __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 2620:        : __storage_(_VSTD::move(__a))
        -: 2621:    {
        -: 2622:#if _LIBCPP_STD_VER > 17
        -: 2623:        using _TpAlloc = typename __allocator_traits_rebind<_Alloc, _Tp>::type;
        -: 2624:        _TpAlloc __tmp(*__get_alloc());
        -: 2625:        allocator_traits<_TpAlloc>::construct(__tmp, __get_elem(), _VSTD::forward<_Args>(__args)...);
        -: 2626:#else
        -: 2627:        ::new ((void*)__get_elem()) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 2628:#endif
        -: 2629:    }
        -: 2630:
        -: 2631:    _LIBCPP_HIDE_FROM_ABI
        -: 2632:    _Alloc* __get_alloc() _NOEXCEPT { return __storage_.__get_alloc(); }
        -: 2633:
        -: 2634:    _LIBCPP_HIDE_FROM_ABI
        -: 2635:    _Tp* __get_elem() _NOEXCEPT { return __storage_.__get_elem(); }
        -: 2636:
        -: 2637:private:
        -: 2638:    virtual void __on_zero_shared() _NOEXCEPT {
        -: 2639:#if _LIBCPP_STD_VER > 17
        -: 2640:        using _TpAlloc = typename __allocator_traits_rebind<_Alloc, _Tp>::type;
        -: 2641:        _TpAlloc __tmp(*__get_alloc());
        -: 2642:        allocator_traits<_TpAlloc>::destroy(__tmp, __get_elem());
        -: 2643:#else
        -: 2644:        __get_elem()->~_Tp();
        -: 2645:#endif
        -: 2646:    }
        -: 2647:
        -: 2648:    virtual void __on_zero_shared_weak() _NOEXCEPT {
        -: 2649:        using _ControlBlockAlloc = typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type;
        -: 2650:        using _ControlBlockPointer = typename allocator_traits<_ControlBlockAlloc>::pointer;
        -: 2651:        _ControlBlockAlloc __tmp(*__get_alloc());
        -: 2652:        __storage_.~_Storage();
        -: 2653:        allocator_traits<_ControlBlockAlloc>::deallocate(__tmp,
        -: 2654:            pointer_traits<_ControlBlockPointer>::pointer_to(*this), 1);
        -: 2655:    }
        -: 2656:
        -: 2657:    // This class implements the control block for non-array shared pointers created
        -: 2658:    // through `std::allocate_shared` and `std::make_shared`.
        -: 2659:    //
        -: 2660:    // In previous versions of the library, we used a compressed pair to store
        -: 2661:    // both the _Alloc and the _Tp. This implies using EBO, which is incompatible
        -: 2662:    // with Allocator construction for _Tp. To allow implementing P0674 in C++20,
        -: 2663:    // we now use a properly aligned char buffer while making sure that we maintain
        -: 2664:    // the same layout that we had when we used a compressed pair.
        -: 2665:    using _CompressedPair = __compressed_pair<_Alloc, _Tp>;
        -: 2666:    struct _ALIGNAS_TYPE(_CompressedPair) _Storage {
        -: 2667:        char __blob_[sizeof(_CompressedPair)];
        -: 2668:
        -: 2669:        _LIBCPP_HIDE_FROM_ABI explicit _Storage(_Alloc&& __a) {
        -: 2670:            ::new ((void*)__get_alloc()) _Alloc(_VSTD::move(__a));
        -: 2671:        }
        -: 2672:        _LIBCPP_HIDE_FROM_ABI ~_Storage() {
        -: 2673:            __get_alloc()->~_Alloc();
        -: 2674:        }
        -: 2675:        _Alloc* __get_alloc() _NOEXCEPT {
        -: 2676:            _CompressedPair *__as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
        -: 2677:            typename _CompressedPair::_Base1* __first = _CompressedPair::__get_first_base(__as_pair);
        -: 2678:            _Alloc *__alloc = reinterpret_cast<_Alloc*>(__first);
        -: 2679:            return __alloc;
        -: 2680:        }
        -: 2681:        _LIBCPP_NO_CFI _Tp* __get_elem() _NOEXCEPT {
        -: 2682:            _CompressedPair *__as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
        -: 2683:            typename _CompressedPair::_Base2* __second = _CompressedPair::__get_second_base(__as_pair);
        -: 2684:            _Tp *__elem = reinterpret_cast<_Tp*>(__second);
        -: 2685:            return __elem;
        -: 2686:        }
        -: 2687:    };
        -: 2688:
        -: 2689:    static_assert(_LIBCPP_ALIGNOF(_Storage) == _LIBCPP_ALIGNOF(_CompressedPair), "");
        -: 2690:    static_assert(sizeof(_Storage) == sizeof(_CompressedPair), "");
        -: 2691:    _Storage __storage_;
        -: 2692:};
        -: 2693:
        -: 2694:struct __shared_ptr_dummy_rebind_allocator_type;
        -: 2695:template <>
        -: 2696:class _LIBCPP_TEMPLATE_VIS allocator<__shared_ptr_dummy_rebind_allocator_type>
        -: 2697:{
        -: 2698:public:
        -: 2699:    template <class _Other>
        -: 2700:    struct rebind
        -: 2701:    {
        -: 2702:        typedef allocator<_Other> other;
        -: 2703:    };
        -: 2704:};
        -: 2705:
        -: 2706:template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this;
        -: 2707:
        -: 2708:template<class _Tp, class _Up>
        -: 2709:struct __compatible_with
        -: 2710:#if _LIBCPP_STD_VER > 14
        -: 2711:    : is_convertible<remove_extent_t<_Tp>*, remove_extent_t<_Up>*> {};
        -: 2712:#else
        -: 2713:    : is_convertible<_Tp*, _Up*> {};
        -: 2714:#endif // _LIBCPP_STD_VER > 14
        -: 2715:
        -: 2716:#if defined(_LIBCPP_ABI_ENABLE_SHARED_PTR_TRIVIAL_ABI)
        -: 2717:#  define _LIBCPP_SHARED_PTR_TRIVIAL_ABI __attribute__((trivial_abi))
        -: 2718:#else
        -: 2719:#  define _LIBCPP_SHARED_PTR_TRIVIAL_ABI
        -: 2720:#endif
        -: 2721:
        -: 2722:template<class _Tp>
        -: 2723:class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS shared_ptr
        -: 2724:{
        -: 2725:public:
        -: 2726:#if _LIBCPP_STD_VER > 14
        -: 2727:    typedef weak_ptr<_Tp> weak_type;
        -: 2728:    typedef remove_extent_t<_Tp> element_type;
        -: 2729:#else
        -: 2730:    typedef _Tp element_type;
        -: 2731:#endif
        -: 2732:
        -: 2733:private:
        -: 2734:    element_type*      __ptr_;
        -: 2735:    __shared_weak_count* __cntrl_;
        -: 2736:
        -: 2737:    struct __nat {int __for_bool_;};
        -: 2738:public:
        -: 2739:    _LIBCPP_INLINE_VISIBILITY
        -: 2740:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 2741:    _LIBCPP_INLINE_VISIBILITY
        -: 2742:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 2743:    template<class _Yp>
        -: 2744:        explicit shared_ptr(_Yp* __p,
        -: 2745:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat());
        -: 2746:    template<class _Yp, class _Dp>
        -: 2747:        shared_ptr(_Yp* __p, _Dp __d,
        -: 2748:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat());
        -: 2749:    template<class _Yp, class _Dp, class _Alloc>
        -: 2750:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 2751:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat());
        -: 2752:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 2753:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 2754:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 2755:    _LIBCPP_INLINE_VISIBILITY
        -: 2756:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 2757:    template<class _Yp>
        -: 2758:        _LIBCPP_INLINE_VISIBILITY
        -: 2759:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 2760:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat())
        -: 2761:                       _NOEXCEPT;
        -: 2762:    _LIBCPP_INLINE_VISIBILITY
        -: 2763:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 2764:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,
        -: 2765:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat())
        -: 2766:                       _NOEXCEPT;
        -: 2767:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 2768:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type= __nat());
        -: 2769:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2770:    template<class _Yp>
        -: 2771:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 2772:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 2773:#endif
        -: 2774:    template <class _Yp, class _Dp>
        -: 2775:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 2776:                   typename enable_if
        -: 2777:                   <
        -: 2778:                       !is_lvalue_reference<_Dp>::value &&
        -: 2779:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 2780:                       __nat
        -: 2781:                   >::type = __nat());
        -: 2782:    template <class _Yp, class _Dp>
        -: 2783:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 2784:                   typename enable_if
        -: 2785:                   <
        -: 2786:                       is_lvalue_reference<_Dp>::value &&
        -: 2787:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 2788:                       __nat
        -: 2789:                   >::type = __nat());
        -: 2790:
        -: 2791:    ~shared_ptr();
        -: 2792:
        -: 2793:    _LIBCPP_INLINE_VISIBILITY
        -: 2794:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 2795:    template<class _Yp>
        -: 2796:        typename enable_if
        -: 2797:        <
        -: 2798:            __compatible_with<_Yp, element_type>::value,
        -: 2799:            shared_ptr&
        -: 2800:        >::type
        -: 2801:        _LIBCPP_INLINE_VISIBILITY
        -: 2802:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 2803:    _LIBCPP_INLINE_VISIBILITY
        -: 2804:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 2805:    template<class _Yp>
        -: 2806:        typename enable_if
        -: 2807:        <
        -: 2808:            __compatible_with<_Yp, element_type>::value,
        -: 2809:            shared_ptr&
        -: 2810:        >::type
        -: 2811:        _LIBCPP_INLINE_VISIBILITY
        -: 2812:        operator=(shared_ptr<_Yp>&& __r);
        -: 2813:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2814:    template<class _Yp>
        -: 2815:        _LIBCPP_INLINE_VISIBILITY
        -: 2816:        typename enable_if
        -: 2817:        <
        -: 2818:            !is_array<_Yp>::value &&
        -: 2819:            is_convertible<_Yp*, element_type*>::value,
        -: 2820:            shared_ptr
        -: 2821:        >::type&
        -: 2822:        operator=(auto_ptr<_Yp>&& __r);
        -: 2823:#endif
        -: 2824:    template <class _Yp, class _Dp>
        -: 2825:        typename enable_if
        -: 2826:        <
        -: 2827:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 2828:            shared_ptr&
        -: 2829:        >::type
        -: 2830:        _LIBCPP_INLINE_VISIBILITY
        -: 2831:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 2832:
        -: 2833:    _LIBCPP_INLINE_VISIBILITY
        -: 2834:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 2835:    _LIBCPP_INLINE_VISIBILITY
        -: 2836:    void reset() _NOEXCEPT;
        -: 2837:    template<class _Yp>
        -: 2838:        typename enable_if
        -: 2839:        <
        -: 2840:            __compatible_with<_Yp, element_type>::value,
        -: 2841:            void
        -: 2842:        >::type
        -: 2843:        _LIBCPP_INLINE_VISIBILITY
        -: 2844:        reset(_Yp* __p);
        -: 2845:    template<class _Yp, class _Dp>
        -: 2846:        typename enable_if
        -: 2847:        <
        -: 2848:            __compatible_with<_Yp, element_type>::value,
        -: 2849:            void
        -: 2850:        >::type
        -: 2851:        _LIBCPP_INLINE_VISIBILITY
        -: 2852:        reset(_Yp* __p, _Dp __d);
        -: 2853:    template<class _Yp, class _Dp, class _Alloc>
        -: 2854:        typename enable_if
        -: 2855:        <
        -: 2856:            __compatible_with<_Yp, element_type>::value,
        -: 2857:            void
        -: 2858:        >::type
        -: 2859:        _LIBCPP_INLINE_VISIBILITY
        -: 2860:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 2861:
        -: 2862:    _LIBCPP_INLINE_VISIBILITY
        -: 2863:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 2864:    _LIBCPP_INLINE_VISIBILITY
        -: 2865:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
        -: 2866:        {return *__ptr_;}
        -: 2867:    _LIBCPP_INLINE_VISIBILITY
        -: 2868:    element_type* operator->() const _NOEXCEPT
        -: 2869:    {
        -: 2870:        static_assert(!_VSTD::is_array<_Tp>::value,
        -: 2871:                      "std::shared_ptr<T>::operator-> is only valid when T is not an array type.");
        -: 2872:        return __ptr_;
        -: 2873:    }
        -: 2874:    _LIBCPP_INLINE_VISIBILITY
        -: 2875:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 2876:    _LIBCPP_INLINE_VISIBILITY
        -: 2877:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 2878:    _LIBCPP_INLINE_VISIBILITY
        -: 2879:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != nullptr;}
        -: 2880:    template <class _Up>
        -: 2881:        _LIBCPP_INLINE_VISIBILITY
        -: 2882:        bool owner_before(shared_ptr<_Up> const& __p) const _NOEXCEPT
        -: 2883:        {return __cntrl_ < __p.__cntrl_;}
        -: 2884:    template <class _Up>
        -: 2885:        _LIBCPP_INLINE_VISIBILITY
        -: 2886:        bool owner_before(weak_ptr<_Up> const& __p) const _NOEXCEPT
        -: 2887:        {return __cntrl_ < __p.__cntrl_;}
        -: 2888:    _LIBCPP_INLINE_VISIBILITY
        -: 2889:    bool
        -: 2890:    __owner_equivalent(const shared_ptr& __p) const
        -: 2891:        {return __cntrl_ == __p.__cntrl_;}
        -: 2892:
        -: 2893:#if _LIBCPP_STD_VER > 14
        -: 2894:    typename add_lvalue_reference<element_type>::type
        -: 2895:    _LIBCPP_INLINE_VISIBILITY
        -: 2896:    operator[](ptrdiff_t __i) const
        -: 2897:    {
        -: 2898:            static_assert(_VSTD::is_array<_Tp>::value,
        -: 2899:                          "std::shared_ptr<T>::operator[] is only valid when T is an array type.");
        -: 2900:            return __ptr_[__i];
        -: 2901:    }
        -: 2902:#endif
        -: 2903:
        -: 2904:#ifndef _LIBCPP_NO_RTTI
        -: 2905:    template <class _Dp>
        -: 2906:        _LIBCPP_INLINE_VISIBILITY
        -: 2907:        _Dp* __get_deleter() const _NOEXCEPT
        -: 2908:            {return static_cast<_Dp*>(__cntrl_
        -: 2909:                    ? const_cast<void *>(__cntrl_->__get_deleter(typeid(_Dp)))
        -: 2910:                      : nullptr);}
        -: 2911:#endif  // _LIBCPP_NO_RTTI
        -: 2912:
        -: 2913:    template<class _Yp, class _CntrlBlk>
        -: 2914:    static shared_ptr<_Tp>
        -: 2915:    __create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl) _NOEXCEPT
        -: 2916:    {
        -: 2917:        shared_ptr<_Tp> __r;
        -: 2918:        __r.__ptr_ = __p;
        -: 2919:        __r.__cntrl_ = __cntrl;
        -: 2920:        __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 2921:        return __r;
        -: 2922:    }
        -: 2923:
        -: 2924:private:
        -: 2925:    template <class _Yp, bool = is_function<_Yp>::value>
        -: 2926:        struct __shared_ptr_default_allocator
        -: 2927:        {
        -: 2928:            typedef allocator<_Yp> type;
        -: 2929:        };
        -: 2930:
        -: 2931:    template <class _Yp>
        -: 2932:        struct __shared_ptr_default_allocator<_Yp, true>
        -: 2933:        {
        -: 2934:            typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
        -: 2935:        };
        -: 2936:
        -: 2937:    template <class _Yp, class _OrigPtr>
        -: 2938:        _LIBCPP_INLINE_VISIBILITY
        -: 2939:        typename enable_if<is_convertible<_OrigPtr*,
        -: 2940:                                          const enable_shared_from_this<_Yp>*
        -: 2941:        >::value,
        -: 2942:            void>::type
        -: 2943:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,
        -: 2944:                           _OrigPtr* __ptr) _NOEXCEPT
        -: 2945:        {
        -: 2946:            typedef typename remove_cv<_Yp>::type _RawYp;
        -: 2947:            if (__e && __e->__weak_this_.expired())
        -: 2948:            {
        -: 2949:                __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -: 2950:                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -: 2951:            }
        -: 2952:        }
        -: 2953:
        -: 2954:    _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {}
        -: 2955:
        -: 2956:    template <class, class _Yp>
        -: 2957:        struct __shared_ptr_default_delete
        -: 2958:            : default_delete<_Yp> {};
        -: 2959:
        -: 2960:    template <class _Yp, class _Un, size_t _Sz>
        -: 2961:        struct __shared_ptr_default_delete<_Yp[_Sz], _Un>
        -: 2962:            : default_delete<_Yp[]> {};
        -: 2963:
        -: 2964:    template <class _Yp, class _Un>
        -: 2965:        struct __shared_ptr_default_delete<_Yp[], _Un>
        -: 2966:            : default_delete<_Yp[]> {};
        -: 2967:
        -: 2968:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 2969:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 2970:};
        -: 2971:
        -: 2972:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -: 2973:template<class _Tp>
        -: 2974:shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
        -: 2975:template<class _Tp, class _Dp>
        -: 2976:shared_ptr(unique_ptr<_Tp, _Dp>) -> shared_ptr<_Tp>;
        -: 2977:#endif
        -: 2978:
        -: 2979:template<class _Tp>
        -: 2980:inline
        -: 2981:_LIBCPP_CONSTEXPR
        -: 2982:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
        -: 2983:    : __ptr_(nullptr),
        -: 2984:      __cntrl_(nullptr)
        -: 2985:{
        -: 2986:}
        -: 2987:
        -: 2988:template<class _Tp>
        -: 2989:inline
        -: 2990:_LIBCPP_CONSTEXPR
        -: 2991:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
        -: 2992:    : __ptr_(nullptr),
        -: 2993:      __cntrl_(nullptr)
        -: 2994:{
        -: 2995:}
        -: 2996:
        -: 2997:template<class _Tp>
        -: 2998:template<class _Yp>
        -: 2999:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 3000:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3001:    : __ptr_(__p)
        -: 3002:{
        -: 3003:    unique_ptr<_Yp> __hold(__p);
        -: 3004:    typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3005:    typedef __shared_ptr_pointer<_Yp*, __shared_ptr_default_delete<_Tp, _Yp>, _AllocT > _CntrlBlk;
        -: 3006:    __cntrl_ = new _CntrlBlk(__p, __shared_ptr_default_delete<_Tp, _Yp>(), _AllocT());
        -: 3007:    __hold.release();
        -: 3008:    __enable_weak_this(__p, __p);
        -: 3009:}
        -: 3010:
        -: 3011:template<class _Tp>
        -: 3012:template<class _Yp, class _Dp>
        -: 3013:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 3014:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3015:    : __ptr_(__p)
        -: 3016:{
        -: 3017:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3018:    try
        -: 3019:    {
        -: 3020:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3021:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3022:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 3023:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 3024:        __enable_weak_this(__p, __p);
        -: 3025:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3026:    }
        -: 3027:    catch (...)
        -: 3028:    {
        -: 3029:        __d(__p);
        -: 3030:        throw;
        -: 3031:    }
        -: 3032:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3033:}
        -: 3034:
        -: 3035:template<class _Tp>
        -: 3036:template<class _Dp>
        -: 3037:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 3038:    : __ptr_(nullptr)
        -: 3039:{
        -: 3040:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3041:    try
        -: 3042:    {
        -: 3043:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3044:        typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
        -: 3045:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT > _CntrlBlk;
        -: 3046:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 3047:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3048:    }
        -: 3049:    catch (...)
        -: 3050:    {
        -: 3051:        __d(__p);
        -: 3052:        throw;
        -: 3053:    }
        -: 3054:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3055:}
        -: 3056:
        -: 3057:template<class _Tp>
        -: 3058:template<class _Yp, class _Dp, class _Alloc>
        -: 3059:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3060:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3061:    : __ptr_(__p)
        -: 3062:{
        -: 3063:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3064:    try
        -: 3065:    {
        -: 3066:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3067:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 3068:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 3069:        typedef __allocator_destructor<_A2> _D2;
        -: 3070:        _A2 __a2(__a);
        -: 3071:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 3072:        ::new ((void*)_VSTD::addressof(*__hold2.get())) _CntrlBlk(__p, __d, __a);
        -: 3073:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 3074:        __enable_weak_this(__p, __p);
        -: 3075:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3076:    }
        -: 3077:    catch (...)
        -: 3078:    {
        -: 3079:        __d(__p);
        -: 3080:        throw;
        -: 3081:    }
        -: 3082:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3083:}
        -: 3084:
        -: 3085:template<class _Tp>
        -: 3086:template<class _Dp, class _Alloc>
        -: 3087:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 3088:    : __ptr_(nullptr)
        -: 3089:{
        -: 3090:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3091:    try
        -: 3092:    {
        -: 3093:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3094:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 3095:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 3096:        typedef __allocator_destructor<_A2> _D2;
        -: 3097:        _A2 __a2(__a);
        -: 3098:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 3099:        ::new ((void*)_VSTD::addressof(*__hold2.get())) _CntrlBlk(__p, __d, __a);
        -: 3100:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 3101:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3102:    }
        -: 3103:    catch (...)
        -: 3104:    {
        -: 3105:        __d(__p);
        -: 3106:        throw;
        -: 3107:    }
        -: 3108:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3109:}
        -: 3110:
        -: 3111:template<class _Tp>
        -: 3112:template<class _Yp>
        -: 3113:inline
        -: 3114:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        -: 3115:    : __ptr_(__p),
        -: 3116:      __cntrl_(__r.__cntrl_)
        -: 3117:{
        -: 3118:    if (__cntrl_)
        -: 3119:        __cntrl_->__add_shared();
        -: 3120:}
        -: 3121:
        -: 3122:template<class _Tp>
        -: 3123:inline
        -: 3124:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -: 3125:    : __ptr_(__r.__ptr_),
        -: 3126:      __cntrl_(__r.__cntrl_)
        -: 3127:{
        -: 3128:    if (__cntrl_)
        -: 3129:        __cntrl_->__add_shared();
        -: 3130:}
        -: 3131:
        -: 3132:template<class _Tp>
        -: 3133:template<class _Yp>
        -: 3134:inline
        -: 3135:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3136:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3137:         _NOEXCEPT
        -: 3138:    : __ptr_(__r.__ptr_),
        -: 3139:      __cntrl_(__r.__cntrl_)
        -: 3140:{
        -: 3141:    if (__cntrl_)
        -: 3142:        __cntrl_->__add_shared();
        -: 3143:}
        -: 3144:
        -: 3145:template<class _Tp>
        -: 3146:inline
        -: 3147:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -: 3148:    : __ptr_(__r.__ptr_),
        -: 3149:      __cntrl_(__r.__cntrl_)
        -: 3150:{
        -: 3151:    __r.__ptr_ = nullptr;
        -: 3152:    __r.__cntrl_ = nullptr;
        -: 3153:}
        -: 3154:
        -: 3155:template<class _Tp>
        -: 3156:template<class _Yp>
        -: 3157:inline
        -: 3158:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3159:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3160:         _NOEXCEPT
        -: 3161:    : __ptr_(__r.__ptr_),
        -: 3162:      __cntrl_(__r.__cntrl_)
        -: 3163:{
        -: 3164:    __r.__ptr_ = nullptr;
        -: 3165:    __r.__cntrl_ = nullptr;
        -: 3166:}
        -: 3167:
        -: 3168:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3169:template<class _Tp>
        -: 3170:template<class _Yp>
        -: 3171:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3172:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 3173:    : __ptr_(__r.get())
        -: 3174:{
        -: 3175:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 3176:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 3177:    __enable_weak_this(__r.get(), __r.get());
        -: 3178:    __r.release();
        -: 3179:}
        -: 3180:#endif
        -: 3181:
        -: 3182:template<class _Tp>
        -: 3183:template <class _Yp, class _Dp>
        -: 3184:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 3185:                            typename enable_if
        -: 3186:                            <
        -: 3187:                                !is_lvalue_reference<_Dp>::value &&
        -: 3188:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3189:                                __nat
        -: 3190:                            >::type)
        -: 3191:    : __ptr_(__r.get())
        -: 3192:{
        -: 3193:#if _LIBCPP_STD_VER > 11
        -: 3194:    if (__ptr_ == nullptr)
        -: 3195:        __cntrl_ = nullptr;
        -: 3196:    else
        -: 3197:#endif
        -: 3198:    {
        -: 3199:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3200:        typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer, _Dp, _AllocT > _CntrlBlk;
        -: 3201:        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), _AllocT());
        -: 3202:        __enable_weak_this(__r.get(), __r.get());
        -: 3203:    }
        -: 3204:    __r.release();
        -: 3205:}
        -: 3206:
        -: 3207:template<class _Tp>
        -: 3208:template <class _Yp, class _Dp>
        -: 3209:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 3210:                            typename enable_if
        -: 3211:                            <
        -: 3212:                                is_lvalue_reference<_Dp>::value &&
        -: 3213:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3214:                                __nat
        -: 3215:                            >::type)
        -: 3216:    : __ptr_(__r.get())
        -: 3217:{
        -: 3218:#if _LIBCPP_STD_VER > 11
        -: 3219:    if (__ptr_ == nullptr)
        -: 3220:        __cntrl_ = nullptr;
        -: 3221:    else
        -: 3222:#endif
        -: 3223:    {
        -: 3224:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3225:        typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 3226:                                     reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 3227:                                     _AllocT > _CntrlBlk;
        -: 3228:        __cntrl_ = new _CntrlBlk(__r.get(), _VSTD::ref(__r.get_deleter()), _AllocT());
        -: 3229:        __enable_weak_this(__r.get(), __r.get());
        -: 3230:    }
        -: 3231:    __r.release();
        -: 3232:}
        -: 3233:
        -: 3234:template<class _Tp>
        -: 3235:shared_ptr<_Tp>::~shared_ptr()
        -: 3236:{
        -: 3237:    if (__cntrl_)
        -: 3238:        __cntrl_->__release_shared();
        -: 3239:}
        -: 3240:
        -: 3241:template<class _Tp>
        -: 3242:inline
        -: 3243:shared_ptr<_Tp>&
        -: 3244:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 3245:{
        -: 3246:    shared_ptr(__r).swap(*this);
        -: 3247:    return *this;
        -: 3248:}
        -: 3249:
        -: 3250:template<class _Tp>
        -: 3251:template<class _Yp>
        -: 3252:inline
        -: 3253:typename enable_if
        -: 3254:<
        -: 3255:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3256:    shared_ptr<_Tp>&
        -: 3257:>::type
        -: 3258:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 3259:{
        -: 3260:    shared_ptr(__r).swap(*this);
        -: 3261:    return *this;
        -: 3262:}
        -: 3263:
        -: 3264:template<class _Tp>
        -: 3265:inline
        -: 3266:shared_ptr<_Tp>&
        -: 3267:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 3268:{
        -: 3269:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3270:    return *this;
        -: 3271:}
        -: 3272:
        -: 3273:template<class _Tp>
        -: 3274:template<class _Yp>
        -: 3275:inline
        -: 3276:typename enable_if
        -: 3277:<
        -: 3278:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3279:    shared_ptr<_Tp>&
        -: 3280:>::type
        -: 3281:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 3282:{
        -: 3283:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3284:    return *this;
        -: 3285:}
        -: 3286:
        -: 3287:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3288:template<class _Tp>
        -: 3289:template<class _Yp>
        -: 3290:inline
        -: 3291:typename enable_if
        -: 3292:<
        -: 3293:    !is_array<_Yp>::value &&
        -: 3294:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 3295:    shared_ptr<_Tp>
        -: 3296:>::type&
        -: 3297:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 3298:{
        -: 3299:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3300:    return *this;
        -: 3301:}
        -: 3302:#endif
        -: 3303:
        -: 3304:template<class _Tp>
        -: 3305:template <class _Yp, class _Dp>
        -: 3306:inline
        -: 3307:typename enable_if
        -: 3308:<
        -: 3309:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 3310:                   typename shared_ptr<_Tp>::element_type*>::value,
        -: 3311:    shared_ptr<_Tp>&
        -: 3312:>::type
        -: 3313:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 3314:{
        -: 3315:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3316:    return *this;
        -: 3317:}
        -: 3318:
        -: 3319:template<class _Tp>
        -: 3320:inline
        -: 3321:void
        -: 3322:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 3323:{
        -: 3324:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 3325:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 3326:}
        -: 3327:
        -: 3328:template<class _Tp>
        -: 3329:inline
        -: 3330:void
        -: 3331:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 3332:{
        -: 3333:    shared_ptr().swap(*this);
        -: 3334:}
        -: 3335:
        -: 3336:template<class _Tp>
        -: 3337:template<class _Yp>
        -: 3338:inline
        -: 3339:typename enable_if
        -: 3340:<
        -: 3341:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3342:    void
        -: 3343:>::type
        -: 3344:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 3345:{
        -: 3346:    shared_ptr(__p).swap(*this);
        -: 3347:}
        -: 3348:
        -: 3349:template<class _Tp>
        -: 3350:template<class _Yp, class _Dp>
        -: 3351:inline
        -: 3352:typename enable_if
        -: 3353:<
        -: 3354:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3355:    void
        -: 3356:>::type
        -: 3357:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 3358:{
        -: 3359:    shared_ptr(__p, __d).swap(*this);
        -: 3360:}
        -: 3361:
        -: 3362:template<class _Tp>
        -: 3363:template<class _Yp, class _Dp, class _Alloc>
        -: 3364:inline
        -: 3365:typename enable_if
        -: 3366:<
        -: 3367:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3368:    void
        -: 3369:>::type
        -: 3370:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 3371:{
        -: 3372:    shared_ptr(__p, __d, __a).swap(*this);
        -: 3373:}
        -: 3374:
        -: 3375://
        -: 3376:// std::allocate_shared and std::make_shared
        -: 3377://
        -: 3378:template<class _Tp, class _Alloc, class ..._Args, class = _EnableIf<!is_array<_Tp>::value> >
        -: 3379:_LIBCPP_HIDE_FROM_ABI
        -: 3380:shared_ptr<_Tp> allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 3381:{
        -: 3382:    using _ControlBlock = __shared_ptr_emplace<_Tp, _Alloc>;
        -: 3383:    using _ControlBlockAllocator = typename __allocator_traits_rebind<_Alloc, _ControlBlock>::type;
        -: 3384:    __allocation_guard<_ControlBlockAllocator> __guard(__a, 1);
        -: 3385:    ::new ((void*)_VSTD::addressof(*__guard.__get())) _ControlBlock(__a, _VSTD::forward<_Args>(__args)...);
        -: 3386:    auto __control_block = __guard.__release_ptr();
        -: 3387:    return shared_ptr<_Tp>::__create_with_control_block((*__control_block).__get_elem(), _VSTD::addressof(*__control_block));
        -: 3388:}
        -: 3389:
        -: 3390:template<class _Tp, class ..._Args, class = _EnableIf<!is_array<_Tp>::value> >
        -: 3391:_LIBCPP_HIDE_FROM_ABI
        -: 3392:shared_ptr<_Tp> make_shared(_Args&& ...__args)
        -: 3393:{
        -: 3394:    return _VSTD::allocate_shared<_Tp>(allocator<_Tp>(), _VSTD::forward<_Args>(__args)...);
        -: 3395:}
        -: 3396:
        -: 3397:template<class _Tp, class _Up>
        -: 3398:inline _LIBCPP_INLINE_VISIBILITY
        -: 3399:bool
        -: 3400:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 3401:{
        -: 3402:    return __x.get() == __y.get();
        -: 3403:}
        -: 3404:
        -: 3405:template<class _Tp, class _Up>
        -: 3406:inline _LIBCPP_INLINE_VISIBILITY
        -: 3407:bool
        -: 3408:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 3409:{
        -: 3410:    return !(__x == __y);
        -: 3411:}
        -: 3412:
        -: 3413:template<class _Tp, class _Up>
        -: 3414:inline _LIBCPP_INLINE_VISIBILITY
        -: 3415:bool
        -: 3416:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 3417:{
        -: 3418:#if _LIBCPP_STD_VER <= 11
        -: 3419:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 3420:    return less<_Vp>()(__x.get(), __y.get());
        -: 3421:#else
        -: 3422:    return less<>()(__x.get(), __y.get());
        -: 3423:#endif
        -: 3424:
        -: 3425:}
        -: 3426:
        -: 3427:template<class _Tp, class _Up>
        -: 3428:inline _LIBCPP_INLINE_VISIBILITY
        -: 3429:bool
        -: 3430:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 3431:{
        -: 3432:    return __y < __x;
        -: 3433:}
        -: 3434:
        -: 3435:template<class _Tp, class _Up>
        -: 3436:inline _LIBCPP_INLINE_VISIBILITY
        -: 3437:bool
        -: 3438:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 3439:{
        -: 3440:    return !(__y < __x);
        -: 3441:}
        -: 3442:
        -: 3443:template<class _Tp, class _Up>
        -: 3444:inline _LIBCPP_INLINE_VISIBILITY
        -: 3445:bool
        -: 3446:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 3447:{
        -: 3448:    return !(__x < __y);
        -: 3449:}
        -: 3450:
        -: 3451:template<class _Tp>
        -: 3452:inline _LIBCPP_INLINE_VISIBILITY
        -: 3453:bool
        -: 3454:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 3455:{
        -: 3456:    return !__x;
        -: 3457:}
        -: 3458:
        -: 3459:template<class _Tp>
        -: 3460:inline _LIBCPP_INLINE_VISIBILITY
        -: 3461:bool
        -: 3462:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 3463:{
        -: 3464:    return !__x;
        -: 3465:}
        -: 3466:
        -: 3467:template<class _Tp>
        -: 3468:inline _LIBCPP_INLINE_VISIBILITY
        -: 3469:bool
        -: 3470:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 3471:{
        -: 3472:    return static_cast<bool>(__x);
        -: 3473:}
        -: 3474:
        -: 3475:template<class _Tp>
        -: 3476:inline _LIBCPP_INLINE_VISIBILITY
        -: 3477:bool
        -: 3478:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 3479:{
        -: 3480:    return static_cast<bool>(__x);
        -: 3481:}
        -: 3482:
        -: 3483:template<class _Tp>
        -: 3484:inline _LIBCPP_INLINE_VISIBILITY
        -: 3485:bool
        -: 3486:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 3487:{
        -: 3488:    return less<_Tp*>()(__x.get(), nullptr);
        -: 3489:}
        -: 3490:
        -: 3491:template<class _Tp>
        -: 3492:inline _LIBCPP_INLINE_VISIBILITY
        -: 3493:bool
        -: 3494:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 3495:{
        -: 3496:    return less<_Tp*>()(nullptr, __x.get());
        -: 3497:}
        -: 3498:
        -: 3499:template<class _Tp>
        -: 3500:inline _LIBCPP_INLINE_VISIBILITY
        -: 3501:bool
        -: 3502:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 3503:{
        -: 3504:    return nullptr < __x;
        -: 3505:}
        -: 3506:
        -: 3507:template<class _Tp>
        -: 3508:inline _LIBCPP_INLINE_VISIBILITY
        -: 3509:bool
        -: 3510:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 3511:{
        -: 3512:    return __x < nullptr;
        -: 3513:}
        -: 3514:
        -: 3515:template<class _Tp>
        -: 3516:inline _LIBCPP_INLINE_VISIBILITY
        -: 3517:bool
        -: 3518:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 3519:{
        -: 3520:    return !(nullptr < __x);
        -: 3521:}
        -: 3522:
        -: 3523:template<class _Tp>
        -: 3524:inline _LIBCPP_INLINE_VISIBILITY
        -: 3525:bool
        -: 3526:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 3527:{
        -: 3528:    return !(__x < nullptr);
        -: 3529:}
        -: 3530:
        -: 3531:template<class _Tp>
        -: 3532:inline _LIBCPP_INLINE_VISIBILITY
        -: 3533:bool
        -: 3534:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 3535:{
        -: 3536:    return !(__x < nullptr);
        -: 3537:}
        -: 3538:
        -: 3539:template<class _Tp>
        -: 3540:inline _LIBCPP_INLINE_VISIBILITY
        -: 3541:bool
        -: 3542:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 3543:{
        -: 3544:    return !(nullptr < __x);
        -: 3545:}
        -: 3546:
        -: 3547:template<class _Tp>
        -: 3548:inline _LIBCPP_INLINE_VISIBILITY
        -: 3549:void
        -: 3550:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 3551:{
        -: 3552:    __x.swap(__y);
        -: 3553:}
        -: 3554:
        -: 3555:template<class _Tp, class _Up>
        -: 3556:inline _LIBCPP_INLINE_VISIBILITY
        -: 3557:shared_ptr<_Tp>
        -: 3558:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 3559:{
        -: 3560:    return shared_ptr<_Tp>(__r,
        -: 3561:                           static_cast<
        -: 3562:                               typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 3563:}
        -: 3564:
        -: 3565:template<class _Tp, class _Up>
        -: 3566:inline _LIBCPP_INLINE_VISIBILITY
        -: 3567:shared_ptr<_Tp>
        -: 3568:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 3569:{
        -: 3570:    typedef typename shared_ptr<_Tp>::element_type _ET;
        -: 3571:    _ET* __p = dynamic_cast<_ET*>(__r.get());
        -: 3572:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 3573:}
        -: 3574:
        -: 3575:template<class _Tp, class _Up>
        -: 3576:shared_ptr<_Tp>
        -: 3577:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 3578:{
        -: 3579:    typedef typename shared_ptr<_Tp>::element_type _RTp;
        -: 3580:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 3581:}
        -: 3582:
        -: 3583:template<class _Tp, class _Up>
        -: 3584:shared_ptr<_Tp>
        -: 3585:reinterpret_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 3586:{
        -: 3587:    return shared_ptr<_Tp>(__r,
        -: 3588:                           reinterpret_cast<
        -: 3589:                               typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 3590:}
        -: 3591:
        -: 3592:#ifndef _LIBCPP_NO_RTTI
        -: 3593:
        -: 3594:template<class _Dp, class _Tp>
        -: 3595:inline _LIBCPP_INLINE_VISIBILITY
        -: 3596:_Dp*
        -: 3597:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 3598:{
        -: 3599:    return __p.template __get_deleter<_Dp>();
        -: 3600:}
        -: 3601:
        -: 3602:#endif  // _LIBCPP_NO_RTTI
        -: 3603:
        -: 3604:template<class _Tp>
        -: 3605:class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS weak_ptr
        -: 3606:{
        -: 3607:public:
        -: 3608:    typedef _Tp element_type;
        -: 3609:private:
        -: 3610:    element_type*        __ptr_;
        -: 3611:    __shared_weak_count* __cntrl_;
        -: 3612:
        -: 3613:public:
        -: 3614:    _LIBCPP_INLINE_VISIBILITY
        -: 3615:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 3616:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 3617:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 3618:                        _NOEXCEPT;
        -: 3619:    _LIBCPP_INLINE_VISIBILITY
        -: 3620:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 3621:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 3622:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 3623:                         _NOEXCEPT;
        -: 3624:
        -: 3625:    _LIBCPP_INLINE_VISIBILITY
        -: 3626:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 3627:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 3628:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 3629:                         _NOEXCEPT;
        -: 3630:    ~weak_ptr();
        -: 3631:
        -: 3632:    _LIBCPP_INLINE_VISIBILITY
        -: 3633:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 3634:    template<class _Yp>
        -: 3635:        typename enable_if
        -: 3636:        <
        -: 3637:            is_convertible<_Yp*, element_type*>::value,
        -: 3638:            weak_ptr&
        -: 3639:        >::type
        -: 3640:        _LIBCPP_INLINE_VISIBILITY
        -: 3641:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 3642:
        -: 3643:    _LIBCPP_INLINE_VISIBILITY
        -: 3644:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 3645:    template<class _Yp>
        -: 3646:        typename enable_if
        -: 3647:        <
        -: 3648:            is_convertible<_Yp*, element_type*>::value,
        -: 3649:            weak_ptr&
        -: 3650:        >::type
        -: 3651:        _LIBCPP_INLINE_VISIBILITY
        -: 3652:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 3653:
        -: 3654:    template<class _Yp>
        -: 3655:        typename enable_if
        -: 3656:        <
        -: 3657:            is_convertible<_Yp*, element_type*>::value,
        -: 3658:            weak_ptr&
        -: 3659:        >::type
        -: 3660:        _LIBCPP_INLINE_VISIBILITY
        -: 3661:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 3662:
        -: 3663:    _LIBCPP_INLINE_VISIBILITY
        -: 3664:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 3665:    _LIBCPP_INLINE_VISIBILITY
        -: 3666:    void reset() _NOEXCEPT;
        -: 3667:
        -: 3668:    _LIBCPP_INLINE_VISIBILITY
        -: 3669:    long use_count() const _NOEXCEPT
        -: 3670:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 3671:    _LIBCPP_INLINE_VISIBILITY
        -: 3672:    bool expired() const _NOEXCEPT
        -: 3673:        {return __cntrl_ == nullptr || __cntrl_->use_count() == 0;}
        -: 3674:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 3675:    template<class _Up>
        -: 3676:        _LIBCPP_INLINE_VISIBILITY
        -: 3677:        bool owner_before(const shared_ptr<_Up>& __r) const _NOEXCEPT
        -: 3678:        {return __cntrl_ < __r.__cntrl_;}
        -: 3679:    template<class _Up>
        -: 3680:        _LIBCPP_INLINE_VISIBILITY
        -: 3681:        bool owner_before(const weak_ptr<_Up>& __r) const _NOEXCEPT
        -: 3682:        {return __cntrl_ < __r.__cntrl_;}
        -: 3683:
        -: 3684:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 3685:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 3686:};
        -: 3687:
        -: 3688:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -: 3689:template<class _Tp>
        -: 3690:weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;
        -: 3691:#endif
        -: 3692:
        -: 3693:template<class _Tp>
        -: 3694:inline
        -: 3695:_LIBCPP_CONSTEXPR
        -: 3696:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 3697:    : __ptr_(nullptr),
        -: 3698:      __cntrl_(nullptr)
        -: 3699:{
        -: 3700:}
        -: 3701:
        -: 3702:template<class _Tp>
        -: 3703:inline
        -: 3704:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 3705:    : __ptr_(__r.__ptr_),
        -: 3706:      __cntrl_(__r.__cntrl_)
        -: 3707:{
        -: 3708:    if (__cntrl_)
        -: 3709:        __cntrl_->__add_weak();
        -: 3710:}
        -: 3711:
        -: 3712:template<class _Tp>
        -: 3713:template<class _Yp>
        -: 3714:inline
        -: 3715:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 3716:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 3717:                         _NOEXCEPT
        -: 3718:    : __ptr_(__r.__ptr_),
        -: 3719:      __cntrl_(__r.__cntrl_)
        -: 3720:{
        -: 3721:    if (__cntrl_)
        -: 3722:        __cntrl_->__add_weak();
        -: 3723:}
        -: 3724:
        -: 3725:template<class _Tp>
        -: 3726:template<class _Yp>
        -: 3727:inline
        -: 3728:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 3729:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 3730:         _NOEXCEPT
        -: 3731:    : __ptr_(__r.__ptr_),
        -: 3732:      __cntrl_(__r.__cntrl_)
        -: 3733:{
        -: 3734:    if (__cntrl_)
        -: 3735:        __cntrl_->__add_weak();
        -: 3736:}
        -: 3737:
        -: 3738:template<class _Tp>
        -: 3739:inline
        -: 3740:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 3741:    : __ptr_(__r.__ptr_),
        -: 3742:      __cntrl_(__r.__cntrl_)
        -: 3743:{
        -: 3744:    __r.__ptr_ = nullptr;
        -: 3745:    __r.__cntrl_ = nullptr;
        -: 3746:}
        -: 3747:
        -: 3748:template<class _Tp>
        -: 3749:template<class _Yp>
        -: 3750:inline
        -: 3751:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 3752:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 3753:         _NOEXCEPT
        -: 3754:    : __ptr_(__r.__ptr_),
        -: 3755:      __cntrl_(__r.__cntrl_)
        -: 3756:{
        -: 3757:    __r.__ptr_ = nullptr;
        -: 3758:    __r.__cntrl_ = nullptr;
        -: 3759:}
        -: 3760:
        -: 3761:template<class _Tp>
        -: 3762:weak_ptr<_Tp>::~weak_ptr()
        -: 3763:{
        -: 3764:    if (__cntrl_)
        -: 3765:        __cntrl_->__release_weak();
        -: 3766:}
        -: 3767:
        -: 3768:template<class _Tp>
        -: 3769:inline
        -: 3770:weak_ptr<_Tp>&
        -: 3771:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 3772:{
        -: 3773:    weak_ptr(__r).swap(*this);
        -: 3774:    return *this;
        -: 3775:}
        -: 3776:
        -: 3777:template<class _Tp>
        -: 3778:template<class _Yp>
        -: 3779:inline
        -: 3780:typename enable_if
        -: 3781:<
        -: 3782:    is_convertible<_Yp*, _Tp*>::value,
        -: 3783:    weak_ptr<_Tp>&
        -: 3784:>::type
        -: 3785:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 3786:{
        -: 3787:    weak_ptr(__r).swap(*this);
        -: 3788:    return *this;
        -: 3789:}
        -: 3790:
        -: 3791:template<class _Tp>
        -: 3792:inline
        -: 3793:weak_ptr<_Tp>&
        -: 3794:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 3795:{
        -: 3796:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 3797:    return *this;
        -: 3798:}
        -: 3799:
        -: 3800:template<class _Tp>
        -: 3801:template<class _Yp>
        -: 3802:inline
        -: 3803:typename enable_if
        -: 3804:<
        -: 3805:    is_convertible<_Yp*, _Tp*>::value,
        -: 3806:    weak_ptr<_Tp>&
        -: 3807:>::type
        -: 3808:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 3809:{
        -: 3810:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 3811:    return *this;
        -: 3812:}
        -: 3813:
        -: 3814:template<class _Tp>
        -: 3815:template<class _Yp>
        -: 3816:inline
        -: 3817:typename enable_if
        -: 3818:<
        -: 3819:    is_convertible<_Yp*, _Tp*>::value,
        -: 3820:    weak_ptr<_Tp>&
        -: 3821:>::type
        -: 3822:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 3823:{
        -: 3824:    weak_ptr(__r).swap(*this);
        -: 3825:    return *this;
        -: 3826:}
        -: 3827:
        -: 3828:template<class _Tp>
        -: 3829:inline
        -: 3830:void
        -: 3831:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 3832:{
        -: 3833:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 3834:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 3835:}
        -: 3836:
        -: 3837:template<class _Tp>
        -: 3838:inline _LIBCPP_INLINE_VISIBILITY
        -: 3839:void
        -: 3840:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 3841:{
        -: 3842:    __x.swap(__y);
        -: 3843:}
        -: 3844:
        -: 3845:template<class _Tp>
        -: 3846:inline
        -: 3847:void
        -: 3848:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 3849:{
        -: 3850:    weak_ptr().swap(*this);
        -: 3851:}
        -: 3852:
        -: 3853:template<class _Tp>
        -: 3854:template<class _Yp>
        -: 3855:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3856:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 3857:    : __ptr_(__r.__ptr_),
        -: 3858:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 3859:{
        -: 3860:    if (__cntrl_ == nullptr)
        -: 3861:        __throw_bad_weak_ptr();
        -: 3862:}
        -: 3863:
        -: 3864:template<class _Tp>
        -: 3865:shared_ptr<_Tp>
        -: 3866:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 3867:{
        -: 3868:    shared_ptr<_Tp> __r;
        -: 3869:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 3870:    if (__r.__cntrl_)
        -: 3871:        __r.__ptr_ = __ptr_;
        -: 3872:    return __r;
        -: 3873:}
        -: 3874:
        -: 3875:#if _LIBCPP_STD_VER > 14
        -: 3876:template <class _Tp = void> struct owner_less;
        -: 3877:#else
        -: 3878:template <class _Tp> struct owner_less;
        -: 3879:#endif
        -: 3880:
        -: 3881:template <class _Tp>
        -: 3882:struct _LIBCPP_TEMPLATE_VIS owner_less<shared_ptr<_Tp> >
        -: 3883:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 3884:{
        -: 3885:    typedef bool result_type;
        -: 3886:    _LIBCPP_INLINE_VISIBILITY
        -: 3887:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 3888:        {return __x.owner_before(__y);}
        -: 3889:    _LIBCPP_INLINE_VISIBILITY
        -: 3890:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 3891:        {return __x.owner_before(__y);}
        -: 3892:    _LIBCPP_INLINE_VISIBILITY
        -: 3893:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 3894:        {return __x.owner_before(__y);}
        -: 3895:};
        -: 3896:
        -: 3897:template <class _Tp>
        -: 3898:struct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp> >
        -: 3899:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 3900:{
        -: 3901:    typedef bool result_type;
        -: 3902:    _LIBCPP_INLINE_VISIBILITY
        -: 3903:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 3904:        {return __x.owner_before(__y);}
        -: 3905:    _LIBCPP_INLINE_VISIBILITY
        -: 3906:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 3907:        {return __x.owner_before(__y);}
        -: 3908:    _LIBCPP_INLINE_VISIBILITY
        -: 3909:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 3910:        {return __x.owner_before(__y);}
        -: 3911:};
        -: 3912:
        -: 3913:#if _LIBCPP_STD_VER > 14
        -: 3914:template <>
        -: 3915:struct _LIBCPP_TEMPLATE_VIS owner_less<void>
        -: 3916:{
        -: 3917:    template <class _Tp, class _Up>
        -: 3918:    _LIBCPP_INLINE_VISIBILITY
        -: 3919:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 3920:        {return __x.owner_before(__y);}
        -: 3921:    template <class _Tp, class _Up>
        -: 3922:    _LIBCPP_INLINE_VISIBILITY
        -: 3923:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 3924:        {return __x.owner_before(__y);}
        -: 3925:    template <class _Tp, class _Up>
        -: 3926:    _LIBCPP_INLINE_VISIBILITY
        -: 3927:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 3928:        {return __x.owner_before(__y);}
        -: 3929:    template <class _Tp, class _Up>
        -: 3930:    _LIBCPP_INLINE_VISIBILITY
        -: 3931:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 3932:        {return __x.owner_before(__y);}
        -: 3933:    typedef void is_transparent;
        -: 3934:};
        -: 3935:#endif
        -: 3936:
        -: 3937:template<class _Tp>
        -: 3938:class _LIBCPP_TEMPLATE_VIS enable_shared_from_this
        -: 3939:{
        -: 3940:    mutable weak_ptr<_Tp> __weak_this_;
        -: 3941:protected:
        -: 3942:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 3943:    enable_shared_from_this() _NOEXCEPT {}
        -: 3944:    _LIBCPP_INLINE_VISIBILITY
        -: 3945:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 3946:    _LIBCPP_INLINE_VISIBILITY
        -: 3947:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 3948:        {return *this;}
        -: 3949:    _LIBCPP_INLINE_VISIBILITY
        -: 3950:    ~enable_shared_from_this() {}
        -: 3951:public:
        -: 3952:    _LIBCPP_INLINE_VISIBILITY
        -: 3953:    shared_ptr<_Tp> shared_from_this()
        -: 3954:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 3955:    _LIBCPP_INLINE_VISIBILITY
        -: 3956:    shared_ptr<_Tp const> shared_from_this() const
        -: 3957:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 3958:
        -: 3959:#if _LIBCPP_STD_VER > 14
        -: 3960:    _LIBCPP_INLINE_VISIBILITY
        -: 3961:    weak_ptr<_Tp> weak_from_this() _NOEXCEPT
        -: 3962:       { return __weak_this_; }
        -: 3963:
        -: 3964:    _LIBCPP_INLINE_VISIBILITY
        -: 3965:    weak_ptr<const _Tp> weak_from_this() const _NOEXCEPT
        -: 3966:        { return __weak_this_; }
        -: 3967:#endif // _LIBCPP_STD_VER > 14
        -: 3968:
        -: 3969:    template <class _Up> friend class shared_ptr;
        -: 3970:};
        -: 3971:
        -: 3972:template <class _Tp>
        -: 3973:struct _LIBCPP_TEMPLATE_VIS hash<shared_ptr<_Tp> >
        -: 3974:{
        -: 3975:    typedef shared_ptr<_Tp>      argument_type;
        -: 3976:    typedef size_t               result_type;
        -: 3977:
        -: 3978:    _LIBCPP_INLINE_VISIBILITY
        -: 3979:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 3980:    {
        -: 3981:        return hash<typename shared_ptr<_Tp>::element_type*>()(__ptr.get());
        -: 3982:    }
        -: 3983:};
        -: 3984:
        -: 3985:template<class _CharT, class _Traits, class _Yp>
        -: 3986:inline _LIBCPP_INLINE_VISIBILITY
        -: 3987:basic_ostream<_CharT, _Traits>&
        -: 3988:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 3989:
        -: 3990:
        -: 3991:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 3992:
        -: 3993:class _LIBCPP_TYPE_VIS __sp_mut
        -: 3994:{
        -: 3995:    void* __lx;
        -: 3996:public:
        -: 3997:    void lock() _NOEXCEPT;
        -: 3998:    void unlock() _NOEXCEPT;
        -: 3999:
        -: 4000:private:
        -: 4001:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 4002:    __sp_mut(const __sp_mut&);
        -: 4003:    __sp_mut& operator=(const __sp_mut&);
        -: 4004:
        -: 4005:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 4006:};
        -: 4007:
        -: 4008:_LIBCPP_FUNC_VIS _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4009:__sp_mut& __get_sp_mut(const void*);
        -: 4010:
        -: 4011:template <class _Tp>
        -: 4012:inline _LIBCPP_INLINE_VISIBILITY
        -: 4013:bool
        -: 4014:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 4015:{
        -: 4016:    return false;
        -: 4017:}
        -: 4018:
        -: 4019:template <class _Tp>
        -: 4020:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4021:shared_ptr<_Tp>
        -: 4022:atomic_load(const shared_ptr<_Tp>* __p)
        -: 4023:{
        -: 4024:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4025:    __m.lock();
        -: 4026:    shared_ptr<_Tp> __q = *__p;
        -: 4027:    __m.unlock();
        -: 4028:    return __q;
        -: 4029:}
        -: 4030:
        -: 4031:template <class _Tp>
        -: 4032:inline _LIBCPP_INLINE_VISIBILITY
        -: 4033:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4034:shared_ptr<_Tp>
        -: 4035:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 4036:{
        -: 4037:    return atomic_load(__p);
        -: 4038:}
        -: 4039:
        -: 4040:template <class _Tp>
        -: 4041:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4042:void
        -: 4043:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 4044:{
        -: 4045:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4046:    __m.lock();
        -: 4047:    __p->swap(__r);
        -: 4048:    __m.unlock();
        -: 4049:}
        -: 4050:
        -: 4051:template <class _Tp>
        -: 4052:inline _LIBCPP_INLINE_VISIBILITY
        -: 4053:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4054:void
        -: 4055:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 4056:{
        -: 4057:    atomic_store(__p, __r);
        -: 4058:}
        -: 4059:
        -: 4060:template <class _Tp>
        -: 4061:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4062:shared_ptr<_Tp>
        -: 4063:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 4064:{
        -: 4065:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4066:    __m.lock();
        -: 4067:    __p->swap(__r);
        -: 4068:    __m.unlock();
        -: 4069:    return __r;
        -: 4070:}
        -: 4071:
        -: 4072:template <class _Tp>
        -: 4073:inline _LIBCPP_INLINE_VISIBILITY
        -: 4074:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4075:shared_ptr<_Tp>
        -: 4076:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 4077:{
        -: 4078:    return atomic_exchange(__p, __r);
        -: 4079:}
        -: 4080:
        -: 4081:template <class _Tp>
        -: 4082:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4083:bool
        -: 4084:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 4085:{
        -: 4086:    shared_ptr<_Tp> __temp;
        -: 4087:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4088:    __m.lock();
        -: 4089:    if (__p->__owner_equivalent(*__v))
        -: 4090:    {
        -: 4091:        _VSTD::swap(__temp, *__p);
        -: 4092:        *__p = __w;
        -: 4093:        __m.unlock();
        -: 4094:        return true;
        -: 4095:    }
        -: 4096:    _VSTD::swap(__temp, *__v);
        -: 4097:    *__v = *__p;
        -: 4098:    __m.unlock();
        -: 4099:    return false;
        -: 4100:}
        -: 4101:
        -: 4102:template <class _Tp>
        -: 4103:inline _LIBCPP_INLINE_VISIBILITY
        -: 4104:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4105:bool
        -: 4106:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 4107:{
        -: 4108:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 4109:}
        -: 4110:
        -: 4111:template <class _Tp>
        -: 4112:inline _LIBCPP_INLINE_VISIBILITY
        -: 4113:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4114:bool
        -: 4115:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 4116:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 4117:{
        -: 4118:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 4119:}
        -: 4120:
        -: 4121:template <class _Tp>
        -: 4122:inline _LIBCPP_INLINE_VISIBILITY
        -: 4123:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4124:bool
        -: 4125:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 4126:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 4127:{
        -: 4128:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 4129:}
        -: 4130:
        -: 4131:#endif  // !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 4132:
        -: 4133://enum class
        -: 4134:#if defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE)
        -: 4135:# ifndef _LIBCPP_CXX03_LANG
        -: 4136:enum class pointer_safety : unsigned char {
        -: 4137:  relaxed,
        -: 4138:  preferred,
        -: 4139:  strict
        -: 4140:};
        -: 4141:# endif
        -: 4142:#else
        -: 4143:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 4144:{
        -: 4145:    enum __lx
        -: 4146:    {
        -: 4147:        relaxed,
        -: 4148:        preferred,
        -: 4149:        strict
        -: 4150:    };
        -: 4151:
        -: 4152:    __lx __v_;
        -: 4153:
        -: 4154:    _LIBCPP_INLINE_VISIBILITY
        -: 4155:    pointer_safety() : __v_() {}
        -: 4156:
        -: 4157:    _LIBCPP_INLINE_VISIBILITY
        -: 4158:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 4159:    _LIBCPP_INLINE_VISIBILITY
        -: 4160:    operator int() const {return __v_;}
        -: 4161:};
        -: 4162:#endif
        -: 4163:
        -: 4164:#if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) && \
        -: 4165:    defined(_LIBCPP_BUILDING_LIBRARY)
        -: 4166:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 4167:#else
        -: 4168:// This function is only offered in C++03 under ABI v1.
        -: 4169:# if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) || !defined(_LIBCPP_CXX03_LANG)
        -: 4170:inline _LIBCPP_INLINE_VISIBILITY
        -: 4171:pointer_safety get_pointer_safety() _NOEXCEPT {
        -: 4172:  return pointer_safety::relaxed;
        -: 4173:}
        -: 4174:# endif
        -: 4175:#endif
        -: 4176:
        -: 4177:
        -: 4178:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 4179:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 4180:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 4181:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 4182:
        -: 4183:template <class _Tp>
        -: 4184:inline _LIBCPP_INLINE_VISIBILITY
        -: 4185:_Tp*
        -: 4186:undeclare_reachable(_Tp* __p)
        -: 4187:{
        -: 4188:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 4189:}
        -: 4190:
        -: 4191:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 4192:
        -: 4193:// --- Helper for container swap --
        -: 4194:template <typename _Alloc>
        -: 4195:_LIBCPP_INLINE_VISIBILITY
        -: 4196:void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)
        -: 4197:#if _LIBCPP_STD_VER >= 14
        -: 4198:    _NOEXCEPT
        -: 4199:#else
        -: 4200:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 4201:#endif
        -: 4202:{
        -: 4203:    using _VSTD::swap;
        -: 4204:    swap(__a1, __a2);
        -: 4205:}
        -: 4206:
        -: 4207:template <typename _Alloc>
        -: 4208:inline _LIBCPP_INLINE_VISIBILITY
        -: 4209:void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}
        -: 4210:
        -: 4211:template <typename _Alloc>
        -: 4212:inline _LIBCPP_INLINE_VISIBILITY
        -: 4213:void __swap_allocator(_Alloc & __a1, _Alloc & __a2)
        -: 4214:#if _LIBCPP_STD_VER >= 14
        -: 4215:    _NOEXCEPT
        -: 4216:#else
        -: 4217:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 4218:#endif
        -: 4219:{
        -: 4220:    _VSTD::__swap_allocator(__a1, __a2,
        -: 4221:      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());
        -: 4222:}
        -: 4223:
        -: 4224:template <typename _Alloc, typename _Traits=allocator_traits<_Alloc> >
        -: 4225:struct __noexcept_move_assign_container : public integral_constant<bool,
        -: 4226:    _Traits::propagate_on_container_move_assignment::value
        -: 4227:#if _LIBCPP_STD_VER > 14
        -: 4228:        || _Traits::is_always_equal::value
        -: 4229:#else
        -: 4230:        && is_nothrow_move_assignable<_Alloc>::value
        -: 4231:#endif
        -: 4232:    > {};
        -: 4233:
        -: 4234:
        -: 4235:template <class _Tp, class _Alloc>
        -: 4236:struct __temp_value {
        -: 4237:    typedef allocator_traits<_Alloc> _Traits;
        -: 4238:
        -: 4239:    typename aligned_storage<sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)>::type __v;
        -: 4240:    _Alloc &__a;
        -: 4241:
        -: 4242:    _Tp *__addr() { return reinterpret_cast<_Tp *>(addressof(__v)); }
        -: 4243:    _Tp &   get() { return *__addr(); }
        -: 4244:
        -: 4245:    template<class... _Args>
        -: 4246:    _LIBCPP_NO_CFI
        -: 4247:    __temp_value(_Alloc &__alloc, _Args&& ... __args) : __a(__alloc) {
        -: 4248:      _Traits::construct(__a, reinterpret_cast<_Tp*>(addressof(__v)),
        -: 4249:                         _VSTD::forward<_Args>(__args)...);
        -: 4250:    }
        -: 4251:
        -: 4252:    ~__temp_value() { _Traits::destroy(__a, __addr()); }
        -: 4253:    };
        -: 4254:
        -: 4255:template<typename _Alloc, typename = void, typename = void>
        -: 4256:struct __is_allocator : false_type {};
        -: 4257:
        -: 4258:template<typename _Alloc>
        -: 4259:struct __is_allocator<_Alloc,
        -: 4260:       typename __void_t<typename _Alloc::value_type>::type,
        -: 4261:       typename __void_t<decltype(_VSTD::declval<_Alloc&>().allocate(size_t(0)))>::type
        -: 4262:     >
        -: 4263:   : true_type {};
        -: 4264:
        -: 4265:// __builtin_new_allocator -- A non-templated helper for allocating and
        -: 4266:// deallocating memory using __builtin_operator_new and
        -: 4267:// __builtin_operator_delete. It should be used in preference to
        -: 4268:// `std::allocator<T>` to avoid additional instantiations.
        -: 4269:struct __builtin_new_allocator {
        -: 4270:  struct __builtin_new_deleter {
        -: 4271:    typedef void* pointer_type;
        -: 4272:
        -: 4273:    _LIBCPP_CONSTEXPR explicit __builtin_new_deleter(size_t __size, size_t __align)
        -: 4274:        : __size_(__size), __align_(__align) {}
        -: 4275:
        -: 4276:    void operator()(void* p) const _NOEXCEPT {
        -: 4277:        _VSTD::__libcpp_deallocate(p, __size_, __align_);
        -: 4278:    }
        -: 4279:
        -: 4280:   private:
        -: 4281:    size_t __size_;
        -: 4282:    size_t __align_;
        -: 4283:  };
        -: 4284:
        -: 4285:  typedef unique_ptr<void, __builtin_new_deleter> __holder_t;
        -: 4286:
        -: 4287:  static __holder_t __allocate_bytes(size_t __s, size_t __align) {
        -: 4288:      return __holder_t(_VSTD::__libcpp_allocate(__s, __align),
        -: 4289:                     __builtin_new_deleter(__s, __align));
        -: 4290:  }
        -: 4291:
        -: 4292:  static void __deallocate_bytes(void* __p, size_t __s,
        -: 4293:                                 size_t __align) _NOEXCEPT {
        -: 4294:      _VSTD::__libcpp_deallocate(__p, __s, __align);
        -: 4295:  }
        -: 4296:
        -: 4297:  template <class _Tp>
        -: 4298:  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE
        -: 4299:  static __holder_t __allocate_type(size_t __n) {
        -: 4300:      return __allocate_bytes(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -: 4301:  }
        -: 4302:
        -: 4303:  template <class _Tp>
        -: 4304:  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE
        -: 4305:  static void __deallocate_type(void* __p, size_t __n) _NOEXCEPT {
        -: 4306:      __deallocate_bytes(__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -: 4307:  }
        -: 4308:};
        -: 4309:
        -: 4310:
        -: 4311:_LIBCPP_END_NAMESPACE_STD
        -: 4312:
        -: 4313:_LIBCPP_POP_MACROS
        -: 4314:
        -: 4315:#if defined(_LIBCPP_HAS_PARALLEL_ALGORITHMS) && _LIBCPP_STD_VER >= 17
        -: 4316:#   include <__pstl_memory>
        -: 4317:#endif
        -: 4318:
        -: 4319:#endif  // _LIBCPP_MEMORY
