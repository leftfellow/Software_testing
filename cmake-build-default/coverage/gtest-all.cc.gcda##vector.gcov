        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/vector
        -:    0:Graph:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/maxbazarov/Documents/Software_testing/ctest/cmake-build-default/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===------------------------------ vector --------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_VECTOR
        -:   11:#define _LIBCPP_VECTOR
        -:   12:
        -:   13:/*
        -:   14:    vector synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template <class T, class Allocator = allocator<T> >
        -:   20:class vector
        -:   21:{
        -:   22:public:
        -:   23:    typedef T                                        value_type;
        -:   24:    typedef Allocator                                allocator_type;
        -:   25:    typedef typename allocator_type::reference       reference;
        -:   26:    typedef typename allocator_type::const_reference const_reference;
        -:   27:    typedef implementation-defined                   iterator;
        -:   28:    typedef implementation-defined                   const_iterator;
        -:   29:    typedef typename allocator_type::size_type       size_type;
        -:   30:    typedef typename allocator_type::difference_type difference_type;
        -:   31:    typedef typename allocator_type::pointer         pointer;
        -:   32:    typedef typename allocator_type::const_pointer   const_pointer;
        -:   33:    typedef std::reverse_iterator<iterator>          reverse_iterator;
        -:   34:    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;
        -:   35:
        -:   36:    vector()
        -:   37:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:   38:    explicit vector(const allocator_type&);
        -:   39:    explicit vector(size_type n);
        -:   40:    explicit vector(size_type n, const allocator_type&); // C++14
        -:   41:    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());
        -:   42:    template <class InputIterator>
        -:   43:        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());
        -:   44:    vector(const vector& x);
        -:   45:    vector(vector&& x)
        -:   46:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:   47:    vector(initializer_list<value_type> il);
        -:   48:    vector(initializer_list<value_type> il, const allocator_type& a);
        -:   49:    ~vector();
        -:   50:    vector& operator=(const vector& x);
        -:   51:    vector& operator=(vector&& x)
        -:   52:        noexcept(
        -:   53:             allocator_type::propagate_on_container_move_assignment::value ||
        -:   54:             allocator_type::is_always_equal::value); // C++17
        -:   55:    vector& operator=(initializer_list<value_type> il);
        -:   56:    template <class InputIterator>
        -:   57:        void assign(InputIterator first, InputIterator last);
        -:   58:    void assign(size_type n, const value_type& u);
        -:   59:    void assign(initializer_list<value_type> il);
        -:   60:
        -:   61:    allocator_type get_allocator() const noexcept;
        -:   62:
        -:   63:    iterator               begin() noexcept;
        -:   64:    const_iterator         begin()   const noexcept;
        -:   65:    iterator               end() noexcept;
        -:   66:    const_iterator         end()     const noexcept;
        -:   67:
        -:   68:    reverse_iterator       rbegin() noexcept;
        -:   69:    const_reverse_iterator rbegin()  const noexcept;
        -:   70:    reverse_iterator       rend() noexcept;
        -:   71:    const_reverse_iterator rend()    const noexcept;
        -:   72:
        -:   73:    const_iterator         cbegin()  const noexcept;
        -:   74:    const_iterator         cend()    const noexcept;
        -:   75:    const_reverse_iterator crbegin() const noexcept;
        -:   76:    const_reverse_iterator crend()   const noexcept;
        -:   77:
        -:   78:    size_type size() const noexcept;
        -:   79:    size_type max_size() const noexcept;
        -:   80:    size_type capacity() const noexcept;
        -:   81:    bool empty() const noexcept;
        -:   82:    void reserve(size_type n);
        -:   83:    void shrink_to_fit() noexcept;
        -:   84:
        -:   85:    reference       operator[](size_type n);
        -:   86:    const_reference operator[](size_type n) const;
        -:   87:    reference       at(size_type n);
        -:   88:    const_reference at(size_type n) const;
        -:   89:
        -:   90:    reference       front();
        -:   91:    const_reference front() const;
        -:   92:    reference       back();
        -:   93:    const_reference back() const;
        -:   94:
        -:   95:    value_type*       data() noexcept;
        -:   96:    const value_type* data() const noexcept;
        -:   97:
        -:   98:    void push_back(const value_type& x);
        -:   99:    void push_back(value_type&& x);
        -:  100:    template <class... Args>
        -:  101:        reference emplace_back(Args&&... args); // reference in C++17
        -:  102:    void pop_back();
        -:  103:
        -:  104:    template <class... Args> iterator emplace(const_iterator position, Args&&... args);
        -:  105:    iterator insert(const_iterator position, const value_type& x);
        -:  106:    iterator insert(const_iterator position, value_type&& x);
        -:  107:    iterator insert(const_iterator position, size_type n, const value_type& x);
        -:  108:    template <class InputIterator>
        -:  109:        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        -:  110:    iterator insert(const_iterator position, initializer_list<value_type> il);
        -:  111:
        -:  112:    iterator erase(const_iterator position);
        -:  113:    iterator erase(const_iterator first, const_iterator last);
        -:  114:
        -:  115:    void clear() noexcept;
        -:  116:
        -:  117:    void resize(size_type sz);
        -:  118:    void resize(size_type sz, const value_type& c);
        -:  119:
        -:  120:    void swap(vector&)
        -:  121:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  122:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  123:
        -:  124:    bool __invariants() const;
        -:  125:};
        -:  126:
        -:  127:template <class Allocator = allocator<T> >
        -:  128:class vector<bool, Allocator>
        -:  129:{
        -:  130:public:
        -:  131:    typedef bool                                     value_type;
        -:  132:    typedef Allocator                                allocator_type;
        -:  133:    typedef implementation-defined                   iterator;
        -:  134:    typedef implementation-defined                   const_iterator;
        -:  135:    typedef typename allocator_type::size_type       size_type;
        -:  136:    typedef typename allocator_type::difference_type difference_type;
        -:  137:    typedef iterator                                 pointer;
        -:  138:    typedef const_iterator                           const_pointer;
        -:  139:    typedef std::reverse_iterator<iterator>          reverse_iterator;
        -:  140:    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;
        -:  141:
        -:  142:    class reference
        -:  143:    {
        -:  144:    public:
        -:  145:        reference(const reference&) noexcept;
        -:  146:        operator bool() const noexcept;
        -:  147:        reference& operator=(const bool x) noexcept;
        -:  148:        reference& operator=(const reference& x) noexcept;
        -:  149:        iterator operator&() const noexcept;
        -:  150:        void flip() noexcept;
        -:  151:    };
        -:  152:
        -:  153:    class const_reference
        -:  154:    {
        -:  155:    public:
        -:  156:        const_reference(const reference&) noexcept;
        -:  157:        operator bool() const noexcept;
        -:  158:        const_iterator operator&() const noexcept;
        -:  159:    };
        -:  160:
        -:  161:    vector()
        -:  162:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:  163:    explicit vector(const allocator_type&);
        -:  164:    explicit vector(size_type n, const allocator_type& a = allocator_type()); // C++14
        -:  165:    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());
        -:  166:    template <class InputIterator>
        -:  167:        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());
        -:  168:    vector(const vector& x);
        -:  169:    vector(vector&& x)
        -:  170:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:  171:    vector(initializer_list<value_type> il);
        -:  172:    vector(initializer_list<value_type> il, const allocator_type& a);
        -:  173:    ~vector();
        -:  174:    vector& operator=(const vector& x);
        -:  175:    vector& operator=(vector&& x)
        -:  176:        noexcept(
        -:  177:             allocator_type::propagate_on_container_move_assignment::value ||
        -:  178:             allocator_type::is_always_equal::value); // C++17
        -:  179:    vector& operator=(initializer_list<value_type> il);
        -:  180:    template <class InputIterator>
        -:  181:        void assign(InputIterator first, InputIterator last);
        -:  182:    void assign(size_type n, const value_type& u);
        -:  183:    void assign(initializer_list<value_type> il);
        -:  184:
        -:  185:    allocator_type get_allocator() const noexcept;
        -:  186:
        -:  187:    iterator               begin() noexcept;
        -:  188:    const_iterator         begin()   const noexcept;
        -:  189:    iterator               end() noexcept;
        -:  190:    const_iterator         end()     const noexcept;
        -:  191:
        -:  192:    reverse_iterator       rbegin() noexcept;
        -:  193:    const_reverse_iterator rbegin()  const noexcept;
        -:  194:    reverse_iterator       rend() noexcept;
        -:  195:    const_reverse_iterator rend()    const noexcept;
        -:  196:
        -:  197:    const_iterator         cbegin()  const noexcept;
        -:  198:    const_iterator         cend()    const noexcept;
        -:  199:    const_reverse_iterator crbegin() const noexcept;
        -:  200:    const_reverse_iterator crend()   const noexcept;
        -:  201:
        -:  202:    size_type size() const noexcept;
        -:  203:    size_type max_size() const noexcept;
        -:  204:    size_type capacity() const noexcept;
        -:  205:    bool empty() const noexcept;
        -:  206:    void reserve(size_type n);
        -:  207:    void shrink_to_fit() noexcept;
        -:  208:
        -:  209:    reference       operator[](size_type n);
        -:  210:    const_reference operator[](size_type n) const;
        -:  211:    reference       at(size_type n);
        -:  212:    const_reference at(size_type n) const;
        -:  213:
        -:  214:    reference       front();
        -:  215:    const_reference front() const;
        -:  216:    reference       back();
        -:  217:    const_reference back() const;
        -:  218:
        -:  219:    void push_back(const value_type& x);
        -:  220:    template <class... Args> reference emplace_back(Args&&... args);  // C++14; reference in C++17
        -:  221:    void pop_back();
        -:  222:
        -:  223:    template <class... Args> iterator emplace(const_iterator position, Args&&... args);  // C++14
        -:  224:    iterator insert(const_iterator position, const value_type& x);
        -:  225:    iterator insert(const_iterator position, size_type n, const value_type& x);
        -:  226:    template <class InputIterator>
        -:  227:        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        -:  228:    iterator insert(const_iterator position, initializer_list<value_type> il);
        -:  229:
        -:  230:    iterator erase(const_iterator position);
        -:  231:    iterator erase(const_iterator first, const_iterator last);
        -:  232:
        -:  233:    void clear() noexcept;
        -:  234:
        -:  235:    void resize(size_type sz);
        -:  236:    void resize(size_type sz, value_type x);
        -:  237:
        -:  238:    void swap(vector&)
        -:  239:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  240:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  241:    void flip() noexcept;
        -:  242:
        -:  243:    bool __invariants() const;
        -:  244:};
        -:  245:
        -:  246:template <class InputIterator, class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
        -:  247:   vector(InputIterator, InputIterator, Allocator = Allocator())
        -:  248:   -> vector<typename iterator_traits<InputIterator>::value_type, Allocator>;
        -:  249:
        -:  250:template <class Allocator> struct hash<std::vector<bool, Allocator>>;
        -:  251:
        -:  252:template <class T, class Allocator> bool operator==(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  253:template <class T, class Allocator> bool operator< (const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  254:template <class T, class Allocator> bool operator!=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  255:template <class T, class Allocator> bool operator> (const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  256:template <class T, class Allocator> bool operator>=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  257:template <class T, class Allocator> bool operator<=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  258:
        -:  259:template <class T, class Allocator>
        -:  260:void swap(vector<T,Allocator>& x, vector<T,Allocator>& y)
        -:  261:    noexcept(noexcept(x.swap(y)));
        -:  262:
        -:  263:template <class T, class Allocator, class U>
        -:  264:typename vector<T, Allocator>::size_type
        -:  265:erase(vector<T, Allocator>& c, const U& value);       // C++20
        -:  266:template <class T, class Allocator, class Predicate>
        -:  267:typename vector<T, Allocator>::size_type
        -:  268:erase_if(vector<T, Allocator>& c, Predicate pred);    // C++20
        -:  269:
        -:  270:}  // std
        -:  271:
        -:  272:*/
        -:  273:
        -:  274:#include <__config>
        -:  275:#include <iosfwd> // for forward declaration of vector
        -:  276:#include <__bit_reference>
        -:  277:#include <type_traits>
        -:  278:#include <climits>
        -:  279:#include <limits>
        -:  280:#include <initializer_list>
        -:  281:#include <memory>
        -:  282:#include <stdexcept>
        -:  283:#include <algorithm>
        -:  284:#include <cstring>
        -:  285:#include <version>
        -:  286:#include <__split_buffer>
        -:  287:#include <__functional_base>
        -:  288:
        -:  289:#include <__debug>
        -:  290:
        -:  291:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  292:#pragma GCC system_header
        -:  293:#endif
        -:  294:
        -:  295:_LIBCPP_PUSH_MACROS
        -:  296:#include <__undef_macros>
        -:  297:
        -:  298:
        -:  299:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  300:
        -:  301:template <bool>
        -:  302:class _LIBCPP_TEMPLATE_VIS __vector_base_common
        -:  303:{
        -:  304:protected:
function _ZNSt3__120__vector_base_commonILb1EEC2Ev called 66 returned 100% blocks executed 100%
       66:  305:    _LIBCPP_INLINE_VISIBILITY __vector_base_common() {}
       66:  305-block  0
        -:  306:    _LIBCPP_NORETURN void __throw_length_error() const;
        -:  307:    _LIBCPP_NORETURN void __throw_out_of_range() const;
        -:  308:};
        -:  309:
        -:  310:template <bool __b>
        -:  311:void
        -:  312:__vector_base_common<__b>::__throw_length_error() const
        -:  313:{
        -:  314:    _VSTD::__throw_length_error("vector");
        -:  315:}
        -:  316:
        -:  317:template <bool __b>
        -:  318:void
        -:  319:__vector_base_common<__b>::__throw_out_of_range() const
        -:  320:{
        -:  321:    _VSTD::__throw_out_of_range("vector");
        -:  322:}
        -:  323:
        -:  324:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __vector_base_common<true>)
        -:  325:
        -:  326:template <class _Tp, class _Allocator>
        -:  327:class __vector_base
        -:  328:    : protected __vector_base_common<true>
        -:  329:{
        -:  330:public:
        -:  331:    typedef _Allocator                               allocator_type;
        -:  332:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -:  333:    typedef typename __alloc_traits::size_type       size_type;
        -:  334:protected:
        -:  335:    typedef _Tp                                      value_type;
        -:  336:    typedef value_type&                              reference;
        -:  337:    typedef const value_type&                        const_reference;
        -:  338:    typedef typename __alloc_traits::difference_type difference_type;
        -:  339:    typedef typename __alloc_traits::pointer         pointer;
        -:  340:    typedef typename __alloc_traits::const_pointer   const_pointer;
        -:  341:    typedef pointer                                  iterator;
        -:  342:    typedef const_pointer                            const_iterator;
        -:  343:
        -:  344:    pointer                                         __begin_;
        -:  345:    pointer                                         __end_;
        -:  346:    __compressed_pair<pointer, allocator_type> __end_cap_;
        -:  347:
        -:  348:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE7__allocEv called 111 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE7__allocEv called 17 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE7__allocEv called 24 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE7__allocEv called 2 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE7__allocEv called 7 returned 100% blocks executed 100%
      161:  349:    allocator_type& __alloc() _NOEXCEPT
      161:  350:        {return __end_cap_.second();}
      111:  350-block  0
    $$$$$:  350-block  1
    $$$$$:  350-block  2
    $$$$$:  350-block  3
    $$$$$:  350-block  4
    $$$$$:  350-block  5
    $$$$$:  350-block  6
    $$$$$:  350-block  7
    $$$$$:  350-block  8
    $$$$$:  350-block  9
       17:  350-block 10
       24:  350-block 11
        2:  350-block 12
    $$$$$:  350-block 13
    $$$$$:  350-block 14
        7:  350-block 15
        -:  351:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE7__allocEv called 18 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPcNS_9allocatorIS1_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIdNS_9allocatorIdEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseImNS_9allocatorImEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE7__allocEv called 8 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIiNS_9allocatorIiEEE7__allocEv called 11 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE7__allocEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE7__allocEv called 3 returned 100% blocks executed 100%
       41:  352:    const allocator_type& __alloc() const _NOEXCEPT
       41:  353:        {return __end_cap_.second();}
       18:  353-block  0
    $$$$$:  353-block  1
    $$$$$:  353-block  2
    $$$$$:  353-block  3
    $$$$$:  353-block  4
    $$$$$:  353-block  5
    $$$$$:  353-block  6
    $$$$$:  353-block  7
    $$$$$:  353-block  8
        8:  353-block  9
       11:  353-block 10
        1:  353-block 11
    $$$$$:  353-block 12
    $$$$$:  353-block 13
        3:  353-block 14
        -:  354:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9__end_capEv called 65 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE9__end_capEv called 17 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE9__end_capEv called 24 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE9__end_capEv called 2 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE9__end_capEv called 7 returned 100% blocks executed 100%
      115:  355:    pointer& __end_cap() _NOEXCEPT
      115:  356:        {return __end_cap_.first();}
       65:  356-block  0
    $$$$$:  356-block  1
    $$$$$:  356-block  2
    $$$$$:  356-block  3
    $$$$$:  356-block  4
    $$$$$:  356-block  5
    $$$$$:  356-block  6
    $$$$$:  356-block  7
    $$$$$:  356-block  8
       17:  356-block  9
       24:  356-block 10
        2:  356-block 11
    $$$$$:  356-block 12
    $$$$$:  356-block 13
        7:  356-block 14
        -:  357:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9__end_capEv called 170 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPcNS_9allocatorIS1_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE9__end_capEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIdNS_9allocatorIdEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseImNS_9allocatorImEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE9__end_capEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE9__end_capEv called 40 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIiNS_9allocatorIiEEE9__end_capEv called 55 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE9__end_capEv called 5 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE9__end_capEv called 15 returned 100% blocks executed 100%
      311:  358:    const pointer& __end_cap() const _NOEXCEPT
      311:  359:        {return __end_cap_.first();}
      170:  359-block  0
    $$$$$:  359-block  1
    $$$$$:  359-block  2
       13:  359-block  3
    $$$$$:  359-block  4
    $$$$$:  359-block  5
    $$$$$:  359-block  6
    $$$$$:  359-block  7
    $$$$$:  359-block  8
       13:  359-block  9
       40:  359-block 10
       55:  359-block 11
        5:  359-block 12
    $$$$$:  359-block 13
    $$$$$:  359-block 14
       15:  359-block 15
        -:  360:
        -:  361:    _LIBCPP_INLINE_VISIBILITY
       64:  362:    __vector_base()
       23:  362-block  0
    $$$$$:  362-block  1
        -:  363:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -:  364:    _LIBCPP_INLINE_VISIBILITY __vector_base(const allocator_type& __a);
        -:  365:#ifndef _LIBCPP_CXX03_LANG
        2:  366:    _LIBCPP_INLINE_VISIBILITY __vector_base(allocator_type&& __a) _NOEXCEPT;
        -:  367:#endif
        -:  368:    ~__vector_base();
        -:  369:
        -:  370:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5clearEv called 15 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE5clearEv called 13 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE5clearEv called 13 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
       41:  371:    void clear() _NOEXCEPT {__destruct_at_end(__begin_);}
       15:  371-block  0
    $$$$$:  371-block  1
    $$$$$:  371-block  2
       13:  371-block  3
    $$$$$:  371-block  4
    $$$$$:  371-block  5
    $$$$$:  371-block  6
    $$$$$:  371-block  7
    $$$$$:  371-block  8
       13:  371-block  9
    $$$$$:  371-block 10
    $$$$$:  371-block 11
    $$$$$:  371-block 12
    $$$$$:  371-block 13
    $$$$$:  371-block 14
    $$$$$:  371-block 15
        -:  372:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8capacityEv called 170 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPcNS_9allocatorIS1_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE8capacityEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIdNS_9allocatorIdEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseImNS_9allocatorImEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE8capacityEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE8capacityEv called 40 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIiNS_9allocatorIiEEE8capacityEv called 55 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE8capacityEv called 5 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE8capacityEv called 15 returned 100% blocks executed 100%
      311:  373:    size_type capacity() const _NOEXCEPT
      311:  374:        {return static_cast<size_type>(__end_cap() - __begin_);}
      170:  374-block  0
    $$$$$:  374-block  1
    $$$$$:  374-block  2
       13:  374-block  3
    $$$$$:  374-block  4
    $$$$$:  374-block  5
    $$$$$:  374-block  6
    $$$$$:  374-block  7
    $$$$$:  374-block  8
       13:  374-block  9
       40:  374-block 10
       55:  374-block 11
        5:  374-block 12
    $$$$$:  374-block 13
    $$$$$:  374-block 14
       15:  374-block 15
        -:  375:
        -:  376:    _LIBCPP_INLINE_VISIBILITY
        -:  377:    void __destruct_at_end(pointer __new_last) _NOEXCEPT;
        -:  378:
        -:  379:    _LIBCPP_INLINE_VISIBILITY
        -:  380:    void __copy_assign_alloc(const __vector_base& __c)
        -:  381:        {__copy_assign_alloc(__c, integral_constant<bool,
        -:  382:                      __alloc_traits::propagate_on_container_copy_assignment::value>());}
        -:  383:
        -:  384:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE19__move_assign_allocERS8_ called 1 returned 100% blocks executed 100%
        1:  385:    void __move_assign_alloc(__vector_base& __c)
        -:  386:        _NOEXCEPT_(
        -:  387:            !__alloc_traits::propagate_on_container_move_assignment::value ||
        -:  388:            is_nothrow_move_assignable<allocator_type>::value)
        1:  389:        {__move_assign_alloc(__c, integral_constant<bool,
        1:  390:                      __alloc_traits::propagate_on_container_move_assignment::value>());}
        1:  390-block  0
        -:  391:private:
        -:  392:    _LIBCPP_INLINE_VISIBILITY
        -:  393:    void __copy_assign_alloc(const __vector_base& __c, true_type)
        -:  394:        {
        -:  395:            if (__alloc() != __c.__alloc())
        -:  396:            {
        -:  397:                clear();
        -:  398:                __alloc_traits::deallocate(__alloc(), __begin_, capacity());
        -:  399:                __begin_ = __end_ = __end_cap() = nullptr;
        -:  400:            }
        -:  401:            __alloc() = __c.__alloc();
        -:  402:        }
        -:  403:
        -:  404:    _LIBCPP_INLINE_VISIBILITY
        -:  405:    void __copy_assign_alloc(const __vector_base&, false_type)
        -:  406:        {}
        -:  407:
        -:  408:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE19__move_assign_allocERS8_NS_17integral_constantIbLb1EEE called 1 returned 100% blocks executed 100%
        1:  409:    void __move_assign_alloc(__vector_base& __c, true_type)
        -:  410:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -:  411:        {
        1:  412:            __alloc() = _VSTD::move(__c.__alloc());
        1:  413:        }
        1:  413-block  0
        -:  414:
        -:  415:    _LIBCPP_INLINE_VISIBILITY
        -:  416:    void __move_assign_alloc(__vector_base&, false_type)
        -:  417:        _NOEXCEPT
        -:  418:        {}
        -:  419:};
        -:  420:
        -:  421:template <class _Tp, class _Allocator>
        -:  422:inline _LIBCPP_INLINE_VISIBILITY
        -:  423:void
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__destruct_at_endEPS6_ called 15 returned 100% blocks executed 83%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE17__destruct_at_endEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE17__destruct_at_endEPS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE17__destruct_at_endEPS2_ called 13 returned 100% blocks executed 50%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE17__destruct_at_endEPd called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE17__destruct_at_endEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE17__destruct_at_endEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE17__destruct_at_endEPS8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE17__destruct_at_endEPm called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE17__destruct_at_endEPS2_ called 13 returned 100% blocks executed 50%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE17__destruct_at_endEPi called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
       41:  424:__vector_base<_Tp, _Allocator>::__destruct_at_end(pointer __new_last) _NOEXCEPT
        -:  425:{
       41:  426:    pointer __soon_to_be_end = __end_;
       67:  427:    while (__new_last != __soon_to_be_end)
       15:  427-block  0
       41:  427-block  1
branch  0 taken 26
branch  1 taken 15
       26:  427-block  2
    $$$$$:  427-block  3
    $$$$$:  427-block  4
branch  2 never executed
branch  3 never executed
    $$$$$:  427-block  5
    $$$$$:  427-block  6
    $$$$$:  427-block  7
branch  4 never executed
branch  5 never executed
    $$$$$:  427-block  8
       13:  427-block  9
       13:  427-block 10
branch  6 taken 0
branch  7 taken 13
    $$$$$:  427-block 11
    $$$$$:  427-block 12
    $$$$$:  427-block 13
branch  8 never executed
branch  9 never executed
    $$$$$:  427-block 14
    $$$$$:  427-block 15
    $$$$$:  427-block 16
branch 10 never executed
branch 11 never executed
    $$$$$:  427-block 17
    $$$$$:  427-block 18
    $$$$$:  427-block 19
branch 12 never executed
branch 13 never executed
    $$$$$:  427-block 20
    $$$$$:  427-block 21
    $$$$$:  427-block 22
branch 14 never executed
branch 15 never executed
    $$$$$:  427-block 23
    $$$$$:  427-block 24
    $$$$$:  427-block 25
branch 16 never executed
branch 17 never executed
    $$$$$:  427-block 26
       13:  427-block 27
       13:  427-block 28
branch 18 taken 0
branch 19 taken 13
    $$$$$:  427-block 29
    $$$$$:  427-block 30
    $$$$$:  427-block 31
branch 20 never executed
branch 21 never executed
    $$$$$:  427-block 32
    $$$$$:  427-block 33
    $$$$$:  427-block 34
branch 22 never executed
branch 23 never executed
    $$$$$:  427-block 35
    $$$$$:  427-block 36
    $$$$$:  427-block 37
branch 24 never executed
branch 25 never executed
    $$$$$:  427-block 38
    $$$$$:  427-block 39
    $$$$$:  427-block 40
branch 26 never executed
branch 27 never executed
    $$$$$:  427-block 41
    $$$$$:  427-block 42
    $$$$$:  427-block 43
branch 28 never executed
branch 29 never executed
    $$$$$:  427-block 44
    $$$$$:  427-block 45
    $$$$$:  427-block 46
branch 30 never executed
branch 31 never executed
    $$$$$:  427-block 47
       26:  428:        __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end));
       26:  428-block  0
branch  0 taken 26
branch  1 taken 0
    $$$$$:  428-block  1
    $$$$$:  428-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:  428-block  3
    $$$$$:  428-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  428-block  5
    $$$$$:  428-block  6
branch  6 never executed
branch  7 never executed
    $$$$$:  428-block  7
    $$$$$:  428-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  428-block  9
    $$$$$:  428-block 10
branch 10 never executed
branch 11 never executed
    $$$$$:  428-block 11
    $$$$$:  428-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:  428-block 13
    $$$$$:  428-block 14
branch 14 never executed
branch 15 never executed
    $$$$$:  428-block 15
    $$$$$:  428-block 16
branch 16 never executed
branch 17 never executed
    $$$$$:  428-block 17
    $$$$$:  428-block 18
branch 18 never executed
branch 19 never executed
    $$$$$:  428-block 19
    $$$$$:  428-block 20
branch 20 never executed
branch 21 never executed
    $$$$$:  428-block 21
    $$$$$:  428-block 22
branch 22 never executed
branch 23 never executed
    $$$$$:  428-block 23
    $$$$$:  428-block 24
branch 24 never executed
branch 25 never executed
    $$$$$:  428-block 25
    $$$$$:  428-block 26
branch 26 never executed
branch 27 never executed
    $$$$$:  428-block 27
    $$$$$:  428-block 28
branch 28 never executed
branch 29 never executed
    $$$$$:  428-block 29
    $$$$$:  428-block 30
branch 30 never executed
branch 31 never executed
    $$$$$:  428-block 31
       41:  429:    __end_ = __new_last;
       41:  430:}
       15:  430-block  0
    $$$$$:  430-block  1
    $$$$$:  430-block  2
       13:  430-block  3
    $$$$$:  430-block  4
    $$$$$:  430-block  5
    $$$$$:  430-block  6
    $$$$$:  430-block  7
    $$$$$:  430-block  8
       13:  430-block  9
    $$$$$:  430-block 10
    $$$$$:  430-block 11
    $$$$$:  430-block 12
    $$$$$:  430-block 13
    $$$$$:  430-block 14
    $$$$$:  430-block 15
        -:  431:
        -:  432:template <class _Tp, class _Allocator>
        -:  433:inline _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2Ev called 23 returned 100% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEEC2Ev called 1 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEEC2Ev called 14 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEEC2Ev called 14 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEEC2Ev called 4 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEEC2Ev called 5 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEC2Ev called 0 returned 0% blocks executed 0%
       64:  434:__vector_base<_Tp, _Allocator>::__vector_base()
        -:  435:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
       64:  436:    : __begin_(nullptr),
       64:  437:      __end_(nullptr),
       64:  438:      __end_cap_(nullptr, __default_init_tag())
       23:  438-block  0
        1:  438-block  1
branch  0 taken 1
branch  1 taken 0
    $$$$$:  438-block  2
        1:  438-block  3
branch  2 taken 1
branch  3 taken 0
    $$$$$:  438-block  4
    $$$$$:  438-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  438-block  6
       14:  438-block  7
branch  6 taken 14
branch  7 taken 0
    $$$$$:  438-block  8
    $$$$$:  438-block  9
branch  8 never executed
branch  9 never executed
    $$$$$:  438-block 10
    $$$$$:  438-block 11
branch 10 never executed
branch 11 never executed
    $$$$$:  438-block 12
    $$$$$:  438-block 13
branch 12 never executed
branch 13 never executed
    $$$$$:  438-block 14
    $$$$$:  438-block 15
branch 14 never executed
branch 15 never executed
    $$$$$:  438-block 16
    $$$$$:  438-block 17
branch 16 never executed
branch 17 never executed
    $$$$$:  438-block 18
       14:  438-block 19
branch 18 taken 14
branch 19 taken 0
    $$$$$:  438-block 20
        4:  438-block 21
branch 20 taken 4
branch 21 taken 0
    $$$$$:  438-block 22
        5:  438-block 23
branch 22 taken 5
branch 23 taken 0
    $$$$$:  438-block 24
        1:  438-block 25
branch 24 taken 1
branch 25 taken 0
    $$$$$:  438-block 26
        1:  438-block 27
branch 26 taken 1
branch 27 taken 0
    $$$$$:  438-block 28
    $$$$$:  438-block 29
branch 28 never executed
branch 29 never executed
    $$$$$:  438-block 30
       64:  439:{
       64:  440:}
       23:  440-block  0
        1:  440-block  1
        1:  440-block  2
    $$$$$:  440-block  3
       14:  440-block  4
    $$$$$:  440-block  5
    $$$$$:  440-block  6
    $$$$$:  440-block  7
    $$$$$:  440-block  8
    $$$$$:  440-block  9
       14:  440-block 10
        4:  440-block 11
        5:  440-block 12
        1:  440-block 13
        1:  440-block 14
    $$$$$:  440-block 15
        -:  441:
        -:  442:template <class _Tp, class _Allocator>
        -:  443:inline _LIBCPP_INLINE_VISIBILITY
        -:  444:__vector_base<_Tp, _Allocator>::__vector_base(const allocator_type& __a)
        -:  445:    : __begin_(nullptr),
        -:  446:      __end_(nullptr),
        -:  447:      __end_cap_(nullptr, __a)
        -:  448:{
        -:  449:}
        -:  450:
        -:  451:#ifndef _LIBCPP_CXX03_LANG
        -:  452:template <class _Tp, class _Allocator>
        -:  453:inline _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2EOS7_ called 2 returned 100% blocks executed 66%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEEC2EOS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2EOS6_ called 0 returned 0% blocks executed 0%
        2:  454:__vector_base<_Tp, _Allocator>::__vector_base(allocator_type&& __a) _NOEXCEPT
        2:  455:    : __begin_(nullptr),
        2:  456:      __end_(nullptr),
        4:  457:      __end_cap_(nullptr, _VSTD::move(__a)) {}
        2:  457-block  0
branch  0 taken 2
branch  1 taken 0
        2:  457-block  1
branch  2 taken 2
branch  3 taken 0
        2:  457-block  2
    $$$$$:  457-block  3
    $$$$$:  457-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  457-block  5
branch  6 never executed
branch  7 never executed
    $$$$$:  457-block  6
    $$$$$:  457-block  7
    $$$$$:  457-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  457-block  9
branch 10 never executed
branch 11 never executed
    $$$$$:  457-block 10
    $$$$$:  457-block 11
        -:  458:#endif
        -:  459:
        -:  460:template <class _Tp, class _Allocator>
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev called 24 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
       24:  461:__vector_base<_Tp, _Allocator>::~__vector_base()
        -:  462:{
       24:  463:    if (__begin_ != nullptr)
       14:  463-block  0
       10:  463-block  1
    $$$$$:  463-block  2
    $$$$$:  463-block  3
    $$$$$:  463-block  4
    $$$$$:  463-block  5
    $$$$$:  463-block  6
    $$$$$:  463-block  7
    $$$$$:  463-block  8
    $$$$$:  463-block  9
    $$$$$:  463-block 10
    $$$$$:  463-block 11
    $$$$$:  463-block 12
    $$$$$:  463-block 13
    $$$$$:  463-block 14
    $$$$$:  463-block 15
    $$$$$:  463-block 16
    $$$$$:  463-block 17
    $$$$$:  463-block 18
    $$$$$:  463-block 19
    $$$$$:  463-block 20
    $$$$$:  463-block 21
    $$$$$:  463-block 22
    $$$$$:  463-block 23
    $$$$$:  463-block 24
    $$$$$:  463-block 25
    $$$$$:  463-block 26
    $$$$$:  463-block 27
    $$$$$:  463-block 28
    $$$$$:  463-block 29
    $$$$$:  463-block 30
    $$$$$:  463-block 31
        -:  464:    {
       14:  465:        clear();
       14:  466:        __alloc_traits::deallocate(__alloc(), __begin_, capacity());
       14:  467:    }
       14:  467-block  0
    $$$$$:  467-block  1
    $$$$$:  467-block  2
    $$$$$:  467-block  3
    $$$$$:  467-block  4
    $$$$$:  467-block  5
    $$$$$:  467-block  6
    $$$$$:  467-block  7
    $$$$$:  467-block  8
    $$$$$:  467-block  9
    $$$$$:  467-block 10
    $$$$$:  467-block 11
    $$$$$:  467-block 12
    $$$$$:  467-block 13
    $$$$$:  467-block 14
    $$$$$:  467-block 15
       24:  468:}
       24:  468-block  0
    $$$$$:  468-block  1
    $$$$$:  468-block  2
    $$$$$:  468-block  3
    $$$$$:  468-block  4
    $$$$$:  468-block  5
    $$$$$:  468-block  6
    $$$$$:  468-block  7
    $$$$$:  468-block  8
    $$$$$:  468-block  9
    $$$$$:  468-block 10
    $$$$$:  468-block 11
    $$$$$:  468-block 12
    $$$$$:  468-block 13
    $$$$$:  468-block 14
    $$$$$:  468-block 15
        -:  469:
        -:  470:template <class _Tp, class _Allocator /* = allocator<_Tp> */>
        -:  471:class _LIBCPP_TEMPLATE_VIS vector
        -:  472:    : private __vector_base<_Tp, _Allocator>
        -:  473:{
        -:  474:private:
        -:  475:    typedef __vector_base<_Tp, _Allocator>           __base;
        -:  476:    typedef allocator<_Tp>                           __default_allocator_type;
        -:  477:public:
        -:  478:    typedef vector                                   __self;
        -:  479:    typedef _Tp                                      value_type;
        -:  480:    typedef _Allocator                               allocator_type;
        -:  481:    typedef typename __base::__alloc_traits          __alloc_traits;
        -:  482:    typedef typename __base::reference               reference;
        -:  483:    typedef typename __base::const_reference         const_reference;
        -:  484:    typedef typename __base::size_type               size_type;
        -:  485:    typedef typename __base::difference_type         difference_type;
        -:  486:    typedef typename __base::pointer                 pointer;
        -:  487:    typedef typename __base::const_pointer           const_pointer;
        -:  488:    typedef __wrap_iter<pointer>                     iterator;
        -:  489:    typedef __wrap_iter<const_pointer>               const_iterator;
        -:  490:    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
        -:  491:    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
        -:  492:
        -:  493:    static_assert((is_same<typename allocator_type::value_type, value_type>::value),
        -:  494:                  "Allocator::value_type must be same type as value_type");
        -:  495:
        -:  496:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1Ev called 23 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEEC1Ev called 14 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEEC1Ev called 14 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEC1Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEEC1Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEEC2Ev called 14 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2Ev called 23 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEEC2Ev called 14 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEC2Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEC2Ev called 0 returned 0% blocks executed 0%
      192:  497:    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
      128:  498:        {
        -:  499:#if _LIBCPP_DEBUG_LEVEL == 2
        -:  500:            __get_db()->__insert_c(this);
        -:  501:#endif
      128:  502:        }
       23:  502-block  0
    $$$$$:  502-block  1
    $$$$$:  502-block  2
       14:  502-block  3
       14:  502-block  4
        4:  502-block  5
        5:  502-block  6
        1:  502-block  7
        1:  502-block  8
        1:  502-block  9
        1:  502-block 10
        1:  502-block 11
        1:  502-block 12
    $$$$$:  502-block 13
    $$$$$:  502-block 14
       14:  502-block 15
       23:  502-block 16
    $$$$$:  502-block 17
    $$$$$:  502-block 18
       14:  502-block 19
        4:  502-block 20
        5:  502-block 21
        1:  502-block 22
        1:  502-block 23
    $$$$$:  502-block 24
    $$$$$:  502-block 25
        -:  503:    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)
        -:  504:#if _LIBCPP_STD_VER <= 14
        -:  505:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -:  506:#else
        -:  507:        _NOEXCEPT
        -:  508:#endif
        -:  509:        : __base(__a)
        -:  510:    {
        -:  511:#if _LIBCPP_DEBUG_LEVEL == 2
        -:  512:        __get_db()->__insert_c(this);
        -:  513:#endif
        -:  514:    }
    #####:  515:    explicit vector(size_type __n);
        -:  516:#if _LIBCPP_STD_VER > 11
        -:  517:    explicit vector(size_type __n, const allocator_type& __a);
        -:  518:#endif
    #####:  519:    vector(size_type __n, const value_type& __x);
        -:  520:    vector(size_type __n, const value_type& __x, const allocator_type& __a);
        -:  521:    template <class _InputIterator>
        -:  522:        vector(_InputIterator __first,
        -:  523:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  524:                                 !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  525:                                 is_constructible<
        -:  526:                                    value_type,
        -:  527:                                    typename iterator_traits<_InputIterator>::reference>::value,
        -:  528:                                 _InputIterator>::type __last);
        -:  529:    template <class _InputIterator>
        -:  530:        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -:  531:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  532:                                 !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  533:                                 is_constructible<
        -:  534:                                    value_type,
        -:  535:                                    typename iterator_traits<_InputIterator>::reference>::value>::type* = 0);
        -:  536:    template <class _ForwardIterator>
    #####:  537:        vector(_ForwardIterator __first,
        -:  538:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  539:                                 is_constructible<
        -:  540:                                    value_type,
        -:  541:                                    typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  542:                                 _ForwardIterator>::type __last);
        -:  543:    template <class _ForwardIterator>
        -:  544:        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -:  545:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  546:                                 is_constructible<
        -:  547:                                    value_type,
        -:  548:                                    typename iterator_traits<_ForwardIterator>::reference>::value>::type* = 0);
        -:  549:
        -:  550:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev called 24 returned 100% blocks executed 100%
function _ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev called 24 returned 100% blocks executed 100%
function _ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
       48:  551:    ~vector()
       24:  552:    {
       24:  553:        __annotate_delete();
        -:  554:#if _LIBCPP_DEBUG_LEVEL == 2
        -:  555:        __get_db()->__erase_c(this);
        -:  556:#endif
       48:  557:    }
       24:  557-block  0
    $$$$$:  557-block  1
    $$$$$:  557-block  2
    $$$$$:  557-block  3
    $$$$$:  557-block  4
    $$$$$:  557-block  5
    $$$$$:  557-block  6
    $$$$$:  557-block  7
    $$$$$:  557-block  8
    $$$$$:  557-block  9
    $$$$$:  557-block 10
    $$$$$:  557-block 11
    $$$$$:  557-block 12
    $$$$$:  557-block 13
    $$$$$:  557-block 14
    $$$$$:  557-block 15
    $$$$$:  557-block 16
    $$$$$:  557-block 17
       24:  557-block 18
    $$$$$:  557-block 19
    $$$$$:  557-block 20
    $$$$$:  557-block 21
    $$$$$:  557-block 22
    $$$$$:  557-block 23
    $$$$$:  557-block 24
    $$$$$:  557-block 25
    $$$$$:  557-block 26
    $$$$$:  557-block 27
    $$$$$:  557-block 28
    $$$$$:  557-block 29
    $$$$$:  557-block 30
    $$$$$:  557-block 31
        -:  558:
        -:  559:    vector(const vector& __x);
        -:  560:    vector(const vector& __x, const allocator_type& __a);
        -:  561:    _LIBCPP_INLINE_VISIBILITY
        -:  562:    vector& operator=(const vector& __x);
        -:  563:
        -:  564:#ifndef _LIBCPP_CXX03_LANG
        -:  565:    _LIBCPP_INLINE_VISIBILITY
        -:  566:    vector(initializer_list<value_type> __il);
        -:  567:
        -:  568:    _LIBCPP_INLINE_VISIBILITY
        -:  569:    vector(initializer_list<value_type> __il, const allocator_type& __a);
        -:  570:
        -:  571:    _LIBCPP_INLINE_VISIBILITY
        -:  572:    vector(vector&& __x)
        -:  573:#if _LIBCPP_STD_VER > 14
        -:  574:        _NOEXCEPT;
        -:  575:#else
        -:  576:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -:  577:#endif
        -:  578:
        -:  579:    _LIBCPP_INLINE_VISIBILITY
        -:  580:    vector(vector&& __x, const allocator_type& __a);
        -:  581:    _LIBCPP_INLINE_VISIBILITY
        -:  582:    vector& operator=(vector&& __x)
        -:  583:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));
        -:  584:
        -:  585:    _LIBCPP_INLINE_VISIBILITY
        -:  586:    vector& operator=(initializer_list<value_type> __il)
        -:  587:        {assign(__il.begin(), __il.end()); return *this;}
        -:  588:
        -:  589:#endif  // !_LIBCPP_CXX03_LANG
        -:  590:
        -:  591:    template <class _InputIterator>
        -:  592:        typename enable_if
        -:  593:        <
        -:  594:             __is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  595:            !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  596:            is_constructible<
        -:  597:                 value_type,
        -:  598:                 typename iterator_traits<_InputIterator>::reference>::value,
        -:  599:            void
        -:  600:        >::type
        -:  601:        assign(_InputIterator __first, _InputIterator __last);
        -:  602:    template <class _ForwardIterator>
        -:  603:        typename enable_if
        -:  604:        <
        -:  605:            __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  606:            is_constructible<
        -:  607:                 value_type,
        -:  608:                 typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  609:            void
        -:  610:        >::type
        -:  611:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -:  612:
        -:  613:    void assign(size_type __n, const_reference __u);
        -:  614:
        -:  615:#ifndef _LIBCPP_CXX03_LANG
        -:  616:    _LIBCPP_INLINE_VISIBILITY
        -:  617:    void assign(initializer_list<value_type> __il)
        -:  618:        {assign(__il.begin(), __il.end());}
        -:  619:#endif
        -:  620:
        -:  621:    _LIBCPP_INLINE_VISIBILITY
        -:  622:    allocator_type get_allocator() const _NOEXCEPT
        -:  623:        {return this->__alloc();}
        -:  624:
        -:  625:    _LIBCPP_INLINE_VISIBILITY iterator               begin() _NOEXCEPT;
        -:  626:    _LIBCPP_INLINE_VISIBILITY const_iterator         begin()   const _NOEXCEPT;
        -:  627:    _LIBCPP_INLINE_VISIBILITY iterator               end() _NOEXCEPT;
        -:  628:    _LIBCPP_INLINE_VISIBILITY const_iterator         end()     const _NOEXCEPT;
        -:  629:
        -:  630:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE6rbeginEv called 9 returned 100% blocks executed 66%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE6rbeginEv called 1 returned 100% blocks executed 66%
       10:  631:    reverse_iterator       rbegin() _NOEXCEPT
       10:  632:        {return       reverse_iterator(end());}
        9:  632-block  0
branch  0 taken 9
branch  1 taken 0
        9:  632-block  1
    $$$$$:  632-block  2
        1:  632-block  3
branch  2 taken 1
branch  3 taken 0
        1:  632-block  4
    $$$$$:  632-block  5
        -:  633:    _LIBCPP_INLINE_VISIBILITY
        -:  634:    const_reverse_iterator rbegin()  const _NOEXCEPT
        -:  635:        {return const_reverse_iterator(end());}
        -:  636:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE4rendEv called 18 returned 100% blocks executed 66%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE4rendEv called 1 returned 100% blocks executed 66%
       19:  637:    reverse_iterator       rend() _NOEXCEPT
       19:  638:        {return       reverse_iterator(begin());}
       18:  638-block  0
branch  0 taken 18
branch  1 taken 0
       18:  638-block  1
    $$$$$:  638-block  2
        1:  638-block  3
branch  2 taken 1
branch  3 taken 0
        1:  638-block  4
    $$$$$:  638-block  5
        -:  639:    _LIBCPP_INLINE_VISIBILITY
        -:  640:    const_reverse_iterator rend()    const _NOEXCEPT
        -:  641:        {return const_reverse_iterator(begin());}
        -:  642:
        -:  643:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE6cbeginEv called 0 returned 0% blocks executed 0%
    #####:  644:    const_iterator         cbegin()  const _NOEXCEPT
    #####:  645:        {return begin();}
    $$$$$:  645-block  0
        -:  646:    _LIBCPP_INLINE_VISIBILITY
        -:  647:    const_iterator         cend()    const _NOEXCEPT
        -:  648:        {return end();}
        -:  649:    _LIBCPP_INLINE_VISIBILITY
        -:  650:    const_reverse_iterator crbegin() const _NOEXCEPT
        -:  651:        {return rbegin();}
        -:  652:    _LIBCPP_INLINE_VISIBILITY
        -:  653:    const_reverse_iterator crend()   const _NOEXCEPT
        -:  654:        {return rend();}
        -:  655:
        -:  656:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE4sizeEv called 47 returned 100% blocks executed 100%
function _ZNKSt3__16vectorImNS_9allocatorImEEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv called 109 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE4sizeEv called 131 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE4sizeEv called 26 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE4sizeEv called 58 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE4sizeEv called 83 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE4sizeEv called 68 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE4sizeEv called 0 returned 0% blocks executed 0%
      522:  657:    size_type size() const _NOEXCEPT
      522:  658:        {return static_cast<size_type>(this->__end_ - this->__begin_);}
       47:  658-block  0
    $$$$$:  658-block  1
    $$$$$:  658-block  2
    $$$$$:  658-block  3
      109:  658-block  4
    $$$$$:  658-block  5
      131:  658-block  6
       26:  658-block  7
       58:  658-block  8
       83:  658-block  9
       68:  658-block 10
    $$$$$:  658-block 11
    $$$$$:  658-block 12
    $$$$$:  658-block 13
    $$$$$:  658-block 14
    $$$$$:  658-block 15
        -:  659:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8capacityEv called 156 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE8capacityEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE8capacityEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE8capacityEv called 40 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE8capacityEv called 55 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE8capacityEv called 5 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE8capacityEv called 15 returned 100% blocks executed 100%
      297:  660:    size_type capacity() const _NOEXCEPT
      297:  661:        {return __base::capacity();}
      156:  661-block  0
    $$$$$:  661-block  1
    $$$$$:  661-block  2
       13:  661-block  3
    $$$$$:  661-block  4
    $$$$$:  661-block  5
    $$$$$:  661-block  6
    $$$$$:  661-block  7
    $$$$$:  661-block  8
       13:  661-block  9
       40:  661-block 10
       55:  661-block 11
        5:  661-block 12
    $$$$$:  661-block 13
    $$$$$:  661-block 14
       15:  661-block 15
        -:  662:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  663:    bool empty() const _NOEXCEPT
        -:  664:        {return this->__begin_ == this->__end_;}
        -:  665:    size_type max_size() const _NOEXCEPT;
        -:  666:    void reserve(size_type __n);
        -:  667:    void shrink_to_fit() _NOEXCEPT;
        -:  668:
        -:  669:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n) _NOEXCEPT;
        -:  670:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const _NOEXCEPT;
        -:  671:    reference       at(size_type __n);
        -:  672:    const_reference at(size_type __n) const;
        -:  673:
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5frontEv called 1 returned 100% blocks executed 100%
        1:  674:    _LIBCPP_INLINE_VISIBILITY reference       front() _NOEXCEPT
        -:  675:    {
        -:  676:        _LIBCPP_ASSERT(!empty(), "front() called for empty vector");
        1:  677:        return *this->__begin_;
        1:  677-block  0
        -:  678:    }
        -:  679:    _LIBCPP_INLINE_VISIBILITY const_reference front() const _NOEXCEPT
        -:  680:    {
        -:  681:        _LIBCPP_ASSERT(!empty(), "front() called for empty vector");
        -:  682:        return *this->__begin_;
        -:  683:    }
        -:  684:    _LIBCPP_INLINE_VISIBILITY reference       back() _NOEXCEPT
        -:  685:    {
        -:  686:        _LIBCPP_ASSERT(!empty(), "back() called for empty vector");
        -:  687:        return *(this->__end_ - 1);
        -:  688:    }
        -:  689:    _LIBCPP_INLINE_VISIBILITY const_reference back()  const _NOEXCEPT
        -:  690:    {
        -:  691:        _LIBCPP_ASSERT(!empty(), "back() called for empty vector");
        -:  692:        return *(this->__end_ - 1);
        -:  693:    }
        -:  694:
        -:  695:    _LIBCPP_INLINE_VISIBILITY
        -:  696:    value_type*       data() _NOEXCEPT
        -:  697:        {return _VSTD::__to_address(this->__begin_);}
        -:  698:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4dataEv called 272 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE4dataEv called 52 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE4dataEv called 52 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE4dataEv called 64 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE4dataEv called 88 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE4dataEv called 8 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE4dataEv called 24 returned 100% blocks executed 100%
      560:  699:    const value_type* data() const _NOEXCEPT
      560:  700:        {return _VSTD::__to_address(this->__begin_);}
      272:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
       52:  700-block  3
    $$$$$:  700-block  4
    $$$$$:  700-block  5
    $$$$$:  700-block  6
    $$$$$:  700-block  7
    $$$$$:  700-block  8
       52:  700-block  9
       64:  700-block 10
       88:  700-block 11
        8:  700-block 12
    $$$$$:  700-block 13
    $$$$$:  700-block 14
       24:  700-block 15
        -:  701:
        -:  702:#ifdef _LIBCPP_CXX03_LANG
        -:  703:    _LIBCPP_INLINE_VISIBILITY
        -:  704:    void __emplace_back(const value_type& __x) { push_back(__x); }
        -:  705:#else
        -:  706:    template <class _Arg>
        -:  707:    _LIBCPP_INLINE_VISIBILITY
        -:  708:    void __emplace_back(_Arg&& __arg) {
        -:  709:      emplace_back(_VSTD::forward<_Arg>(__arg));
        -:  710:    }
        -:  711:#endif
        -:  712:
        -:  713:    _LIBCPP_INLINE_VISIBILITY void push_back(const_reference __x);
        -:  714:
        -:  715:#ifndef _LIBCPP_CXX03_LANG
        -:  716:    _LIBCPP_INLINE_VISIBILITY void push_back(value_type&& __x);
        -:  717:
        -:  718:    template <class... _Args>
        -:  719:        _LIBCPP_INLINE_VISIBILITY
        -:  720:#if _LIBCPP_STD_VER > 14
        -:  721:        reference emplace_back(_Args&&... __args);
        -:  722:#else
        -:  723:        void      emplace_back(_Args&&... __args);
        -:  724:#endif
        -:  725:#endif // !_LIBCPP_CXX03_LANG
        -:  726:
        -:  727:    _LIBCPP_INLINE_VISIBILITY
        -:  728:    void pop_back();
        -:  729:
        -:  730:    iterator insert(const_iterator __position, const_reference __x);
        -:  731:
        -:  732:#ifndef _LIBCPP_CXX03_LANG
        -:  733:    iterator insert(const_iterator __position, value_type&& __x);
        -:  734:    template <class... _Args>
        -:  735:        iterator emplace(const_iterator __position, _Args&&... __args);
        -:  736:#endif  // !_LIBCPP_CXX03_LANG
        -:  737:
        -:  738:    iterator insert(const_iterator __position, size_type __n, const_reference __x);
        -:  739:    template <class _InputIterator>
        -:  740:        typename enable_if
        -:  741:        <
        -:  742:             __is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  743:            !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  744:            is_constructible<
        -:  745:                 value_type,
        -:  746:                 typename iterator_traits<_InputIterator>::reference>::value,
        -:  747:            iterator
        -:  748:        >::type
        -:  749:        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
        -:  750:    template <class _ForwardIterator>
        -:  751:        typename enable_if
        -:  752:        <
        -:  753:            __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  754:            is_constructible<
        -:  755:                 value_type,
        -:  756:                 typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  757:            iterator
        -:  758:        >::type
        -:  759:        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
        -:  760:
        -:  761:#ifndef _LIBCPP_CXX03_LANG
        -:  762:    _LIBCPP_INLINE_VISIBILITY
        -:  763:    iterator insert(const_iterator __position, initializer_list<value_type> __il)
        -:  764:        {return insert(__position, __il.begin(), __il.end());}
        -:  765:#endif
        -:  766:
        -:  767:    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);
        -:  768:    iterator erase(const_iterator __first, const_iterator __last);
        -:  769:
        -:  770:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE5clearEv called 13 returned 100% blocks executed 66%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE5clearEv called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5clearEv called 1 returned 100% blocks executed 100%
       27:  771:    void clear() _NOEXCEPT
        -:  772:    {
       27:  773:        size_type __old_size = size();
       27:  774:        __base::clear();
       27:  775:        __annotate_shrink(__old_size);
       27:  776:        __invalidate_all_iterators();
       13:  776-block  0
branch  0 taken 13
branch  1 taken 0
    $$$$$:  776-block  1
       27:  777:    }
       13:  777-block  0
       13:  777-block  1
        1:  777-block  2
        -:  778:
        -:  779:    void resize(size_type __sz);
        -:  780:    void resize(size_type __sz, const_reference __x);
        -:  781:
        -:  782:    void swap(vector&)
        -:  783:#if _LIBCPP_STD_VER >= 14
        -:  784:        _NOEXCEPT;
        -:  785:#else
        -:  786:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -:  787:                    __is_nothrow_swappable<allocator_type>::value);
        -:  788:#endif
        -:  789:
        -:  790:    bool __invariants() const;
        -:  791:
        -:  792:#if _LIBCPP_DEBUG_LEVEL == 2
        -:  793:
        -:  794:    bool __dereferenceable(const const_iterator* __i) const;
        -:  795:    bool __decrementable(const const_iterator* __i) const;
        -:  796:    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;
        -:  797:    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;
        -:  798:
        -:  799:#endif  // _LIBCPP_DEBUG_LEVEL == 2
        -:  800:
        -:  801:private:
        -:  802:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -:  803:    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(pointer __new_last);
        -:  804:    void __vallocate(size_type __n);
        -:  805:    void __vdeallocate() _NOEXCEPT;
        -:  806:    _LIBCPP_INLINE_VISIBILITY size_type __recommend(size_type __new_size) const;
        -:  807:    void __construct_at_end(size_type __n);
        -:  808:    _LIBCPP_INLINE_VISIBILITY
        -:  809:    void __construct_at_end(size_type __n, const_reference __x);
        -:  810:    template <class _ForwardIterator>
        -:  811:        typename enable_if
        -:  812:        <
        -:  813:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -:  814:            void
        -:  815:        >::type
        -:  816:        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n);
        -:  817:    void __append(size_type __n);
        -:  818:    void __append(size_type __n, const_reference __x);
        -:  819:    _LIBCPP_INLINE_VISIBILITY
        -:  820:    iterator       __make_iter(pointer __p) _NOEXCEPT;
        -:  821:    _LIBCPP_INLINE_VISIBILITY
        -:  822:    const_iterator __make_iter(const_pointer __p) const _NOEXCEPT;
        -:  823:    void __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);
        -:  824:    pointer __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);
        -:  825:    void __move_range(pointer __from_s, pointer __from_e, pointer __to);
        -:  826:    void __move_assign(vector& __c, true_type)
        -:  827:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -:  828:    void __move_assign(vector& __c, false_type)
        -:  829:        _NOEXCEPT_(__alloc_traits::is_always_equal::value);
        -:  830:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
    #####:  831:    void __destruct_at_end(pointer __new_last) _NOEXCEPT
        -:  832:    {
    #####:  833:        __invalidate_iterators_past(__new_last);
    $$$$$:  833-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  833-block  1
    $$$$$:  833-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:  833-block  3
    #####:  834:        size_type __old_size = size();
    #####:  835:        __base::__destruct_at_end(__new_last);
    #####:  836:        __annotate_shrink(__old_size);
    #####:  837:    }
    $$$$$:  837-block  0
    $$$$$:  837-block  1
        -:  838:
        -:  839:#ifndef _LIBCPP_CXX03_LANG
        -:  840:    template <class _Up>
        -:  841:    _LIBCPP_INLINE_VISIBILITY
        -:  842:    inline void __push_back_slow_path(_Up&& __x);
        -:  843:
        -:  844:    template <class... _Args>
        -:  845:    _LIBCPP_INLINE_VISIBILITY
        -:  846:    inline void __emplace_back_slow_path(_Args&&... __args);
        -:  847:#else
        -:  848:    template <class _Up>
        -:  849:    _LIBCPP_INLINE_VISIBILITY
        -:  850:    inline void __push_back_slow_path(_Up& __x);
        -:  851:#endif
        -:  852:
        -:  853:    // The following functions are no-ops outside of AddressSanitizer mode.
        -:  854:    // We call annotatations only for the default Allocator because other allocators
        -:  855:    // may not meet the AddressSanitizer alignment constraints.
        -:  856:    // See the documentation for __sanitizer_annotate_contiguous_container for more details.
        -:  857:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  858:    void __annotate_contiguous_container(const void *__beg, const void *__end,
        -:  859:                                         const void *__old_mid,
        -:  860:                                         const void *__new_mid) const
        -:  861:    {
        -:  862:
        -:  863:      if (__beg && is_same<allocator_type, __default_allocator_type>::value)
        -:  864:        __sanitizer_annotate_contiguous_container(__beg, __end, __old_mid, __new_mid);
        -:  865:    }
        -:  866:#else
        -:  867:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_ called 68 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE31__annotate_contiguous_containerEPKvS5_S5_S5_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 16 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_ called 22 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 2 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 6 returned 100% blocks executed 100%
      140:  868:    void __annotate_contiguous_container(const void*, const void*, const void*,
      140:  869:                                         const void*) const _NOEXCEPT {}
       68:  869-block  0
    $$$$$:  869-block  1
    $$$$$:  869-block  2
       13:  869-block  3
    $$$$$:  869-block  4
    $$$$$:  869-block  5
    $$$$$:  869-block  6
    $$$$$:  869-block  7
    $$$$$:  869-block  8
       13:  869-block  9
       16:  869-block 10
       22:  869-block 11
        2:  869-block 12
    $$$$$:  869-block 13
    $$$$$:  869-block 14
        6:  869-block 15
        -:  870:#endif
        -:  871:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEm called 22 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE14__annotate_newEm called 8 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEm called 11 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE14__annotate_newEm called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE14__annotate_newEm called 3 returned 100% blocks executed 100%
       45:  872:    void __annotate_new(size_type __current_size) const _NOEXCEPT {
       90:  873:      __annotate_contiguous_container(data(), data() + capacity(),
       45:  874:                                      data() + capacity(), data() + __current_size);
       45:  875:    }
       22:  875-block  0
    $$$$$:  875-block  1
    $$$$$:  875-block  2
    $$$$$:  875-block  3
    $$$$$:  875-block  4
    $$$$$:  875-block  5
    $$$$$:  875-block  6
    $$$$$:  875-block  7
    $$$$$:  875-block  8
        8:  875-block  9
       11:  875-block 10
        1:  875-block 11
    $$$$$:  875-block 12
    $$$$$:  875-block 13
        3:  875-block 14
        -:  876:
        -:  877:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv called 45 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE17__annotate_deleteEv called 8 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv called 11 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__annotate_deleteEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE17__annotate_deleteEv called 3 returned 100% blocks executed 100%
       68:  878:    void __annotate_delete() const _NOEXCEPT {
      136:  879:      __annotate_contiguous_container(data(), data() + capacity(),
       68:  880:                                      data() + size(), data() + capacity());
       68:  881:    }
       45:  881-block  0
    $$$$$:  881-block  1
    $$$$$:  881-block  2
    $$$$$:  881-block  3
    $$$$$:  881-block  4
    $$$$$:  881-block  5
    $$$$$:  881-block  6
    $$$$$:  881-block  7
    $$$$$:  881-block  8
    $$$$$:  881-block  9
        8:  881-block 10
       11:  881-block 11
        1:  881-block 12
    $$$$$:  881-block 13
    $$$$$:  881-block 14
        3:  881-block 15
        -:  882:
        -:  883:    _LIBCPP_INLINE_VISIBILITY
        -:  884:    void __annotate_increase(size_type __n) const _NOEXCEPT
        -:  885:    {
        -:  886:      __annotate_contiguous_container(data(), data() + capacity(),
        -:  887:                                      data() + size(), data() + size() + __n);
        -:  888:    }
        -:  889:
        -:  890:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEm called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE17__annotate_shrinkEm called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE17__annotate_shrinkEm called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__annotate_shrinkEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__annotate_shrinkEm called 0 returned 0% blocks executed 0%
       27:  891:    void __annotate_shrink(size_type __old_size) const _NOEXCEPT
        -:  892:    {
       54:  893:      __annotate_contiguous_container(data(), data() + capacity(),
       27:  894:                                      data() + __old_size, data() + size());
       27:  895:    }
        1:  895-block  0
       13:  895-block  1
       13:  895-block  2
    $$$$$:  895-block  3
    $$$$$:  895-block  4
        -:  896:
        -:  897:  struct _ConstructTransaction {
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionC1ERS8_m called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionC2ERS8_m called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionC1ERS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionC2ERS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionC1ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionC2ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionC1ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionC2ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionC1ERS7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionC1ERS9_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionC2ERS9_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionC1ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionC2ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionC1ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionC2ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionC1ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionC2ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionC1ERS3_m called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionC2ERS3_m called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 1 returned 100% blocks executed 100%
       32:  898:    explicit _ConstructTransaction(vector &__v, size_type __n)
       32:  899:      : __v_(__v),  __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {
        -:  900:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  901:      __v_.__annotate_increase(__n);
        -:  902:#endif
       32:  903:    }
       12:  903-block  0
       12:  903-block  1
    $$$$$:  903-block  2
    $$$$$:  903-block  3
    $$$$$:  903-block  4
    $$$$$:  903-block  5
    $$$$$:  903-block  6
    $$$$$:  903-block  7
    $$$$$:  903-block  8
    $$$$$:  903-block  9
    $$$$$:  903-block 10
    $$$$$:  903-block 11
    $$$$$:  903-block 12
    $$$$$:  903-block 13
    $$$$$:  903-block 14
    $$$$$:  903-block 15
    $$$$$:  903-block 16
    $$$$$:  903-block 17
        1:  903-block 18
        1:  903-block 19
        2:  903-block 20
        2:  903-block 21
    $$$$$:  903-block 22
    $$$$$:  903-block 23
    $$$$$:  903-block 24
    $$$$$:  903-block 25
    $$$$$:  903-block 26
    $$$$$:  903-block 27
        1:  903-block 28
        1:  903-block 29
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionD1Ev called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionD2Ev called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionD1Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionD2Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 1 returned 100% blocks executed 100%
       32:  904:    ~_ConstructTransaction() {
       16:  905:      __v_.__end_ = __pos_;
        -:  906:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  907:      if (__pos_ != __new_end_) {
        -:  908:        __v_.__annotate_shrink(__new_end_ - __v_.__begin_);
        -:  909:      }
        -:  910:#endif
       32:  911:    }
       12:  911-block  0
       12:  911-block  1
    $$$$$:  911-block  2
    $$$$$:  911-block  3
    $$$$$:  911-block  4
    $$$$$:  911-block  5
    $$$$$:  911-block  6
    $$$$$:  911-block  7
    $$$$$:  911-block  8
    $$$$$:  911-block  9
    $$$$$:  911-block 10
    $$$$$:  911-block 11
    $$$$$:  911-block 12
    $$$$$:  911-block 13
    $$$$$:  911-block 14
    $$$$$:  911-block 15
    $$$$$:  911-block 16
    $$$$$:  911-block 17
        1:  911-block 18
        1:  911-block 19
        2:  911-block 20
        2:  911-block 21
    $$$$$:  911-block 22
    $$$$$:  911-block 23
    $$$$$:  911-block 24
    $$$$$:  911-block 25
    $$$$$:  911-block 26
    $$$$$:  911-block 27
        1:  911-block 28
        1:  911-block 29
        -:  912:
        -:  913:    vector &__v_;
        -:  914:    pointer __pos_;
        -:  915:    const_pointer const __new_end_;
        -:  916:
        -:  917:  private:
        -:  918:    _ConstructTransaction(_ConstructTransaction const&) = delete;
        -:  919:    _ConstructTransaction& operator=(_ConstructTransaction const&) = delete;
        -:  920:  };
        -:  921:
        -:  922:  template <class ..._Args>
        -:  923:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE22__construct_one_at_endIJS6_EEEvDpOT_ called 11 returned 100% blocks executed 50%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE22__construct_one_at_endIJS1_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE22__construct_one_at_endIJRKS4_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE22__construct_one_at_endIJmEEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 1 returned 100% blocks executed 50%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE22__construct_one_at_endIJiEEEvDpOT_ called 2 returned 100% blocks executed 50%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 1 returned 100% blocks executed 50%
       15:  924:  void __construct_one_at_end(_Args&& ...__args) {
       15:  925:    _ConstructTransaction __tx(*this, 1);
       30:  926:    __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_),
       11:  926-block  0
branch  0 taken 11
branch  1 taken 0
       11:  926-block  1
branch  2 taken 11
branch  3 taken 0
    $$$$$:  926-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  926-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  926-block  4
branch  8 never executed
branch  9 never executed
    $$$$$:  926-block  5
branch 10 never executed
branch 11 never executed
    $$$$$:  926-block  6
branch 12 never executed
branch 13 never executed
    $$$$$:  926-block  7
branch 14 never executed
branch 15 never executed
    $$$$$:  926-block  8
branch 16 never executed
branch 17 never executed
    $$$$$:  926-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  926-block 10
branch 20 never executed
branch 21 never executed
    $$$$$:  926-block 11
branch 22 never executed
branch 23 never executed
        1:  926-block 12
branch 24 taken 1
branch 25 taken 0
        1:  926-block 13
branch 26 taken 1
branch 27 taken 0
        2:  926-block 14
branch 28 taken 2
branch 29 taken 0
        2:  926-block 15
branch 30 taken 2
branch 31 taken 0
    $$$$$:  926-block 16
branch 32 never executed
branch 33 never executed
    $$$$$:  926-block 17
branch 34 never executed
branch 35 never executed
    $$$$$:  926-block 18
branch 36 never executed
branch 37 never executed
    $$$$$:  926-block 19
branch 38 never executed
branch 39 never executed
    $$$$$:  926-block 20
branch 40 never executed
branch 41 never executed
    $$$$$:  926-block 21
branch 42 never executed
branch 43 never executed
        1:  926-block 22
branch 44 taken 1
branch 45 taken 0
        1:  926-block 23
branch 46 taken 1
branch 47 taken 0
       15:  927:        _VSTD::forward<_Args>(__args)...);
       15:  928:    ++__tx.__pos_;
       15:  929:  }
       11:  929-block  0
    $$$$$:  929-block  1
    $$$$$:  929-block  2
    $$$$$:  929-block  3
    $$$$$:  929-block  4
    $$$$$:  929-block  5
    $$$$$:  929-block  6
    $$$$$:  929-block  7
    $$$$$:  929-block  8
    $$$$$:  929-block  9
    $$$$$:  929-block 10
    $$$$$:  929-block 11
    $$$$$:  929-block 12
    $$$$$:  929-block 13
    $$$$$:  929-block 14
    $$$$$:  929-block 15
    $$$$$:  929-block 16
    $$$$$:  929-block 17
        1:  929-block 18
    $$$$$:  929-block 19
    $$$$$:  929-block 20
        2:  929-block 21
    $$$$$:  929-block 22
    $$$$$:  929-block 23
    $$$$$:  929-block 24
    $$$$$:  929-block 25
    $$$$$:  929-block 26
    $$$$$:  929-block 27
    $$$$$:  929-block 28
    $$$$$:  929-block 29
    $$$$$:  929-block 30
    $$$$$:  929-block 31
    $$$$$:  929-block 32
        1:  929-block 33
    $$$$$:  929-block 34
    $$$$$:  929-block 35
        -:  930:};
        -:  931:
        -:  932:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -:  933:template<class _InputIterator,
        -:  934:         class _Alloc = allocator<typename iterator_traits<_InputIterator>::value_type>,
        -:  935:         class = typename enable_if<__is_allocator<_Alloc>::value, void>::type
        -:  936:         >
        -:  937:vector(_InputIterator, _InputIterator)
        -:  938:  -> vector<typename iterator_traits<_InputIterator>::value_type, _Alloc>;
        -:  939:
        -:  940:template<class _InputIterator,
        -:  941:         class _Alloc,
        -:  942:         class = typename enable_if<__is_allocator<_Alloc>::value, void>::type
        -:  943:         >
        -:  944:vector(_InputIterator, _InputIterator, _Alloc)
        -:  945:  -> vector<typename iterator_traits<_InputIterator>::value_type, _Alloc>;
        -:  946:#endif
        -:  947:
        -:  948:template <class _Tp, class _Allocator>
        -:  949:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE called 21 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE called 11 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 3 returned 100% blocks executed 100%
       44:  950:vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v)
        -:  951:{
        -:  952:
       44:  953:    __annotate_delete();
       44:  954:    _VSTD::__construct_backward_with_exception_guarantees(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
       44:  955:    _VSTD::swap(this->__begin_, __v.__begin_);
       44:  956:    _VSTD::swap(this->__end_, __v.__end_);
       44:  957:    _VSTD::swap(this->__end_cap(), __v.__end_cap());
       44:  958:    __v.__first_ = __v.__begin_;
       44:  959:    __annotate_new(size());
       44:  960:    __invalidate_all_iterators();
       44:  961:}
       21:  961-block  0
    $$$$$:  961-block  1
    $$$$$:  961-block  2
    $$$$$:  961-block  3
    $$$$$:  961-block  4
    $$$$$:  961-block  5
        8:  961-block  6
       11:  961-block  7
        1:  961-block  8
    $$$$$:  961-block  9
    $$$$$:  961-block 10
        3:  961-block 11
        -:  962:
        -:  963:template <class _Tp, class _Allocator>
        -:  964:typename vector<_Tp, _Allocator>::pointer
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EEPS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EEPS3_ called 0 returned 0% blocks executed 0%
    #####:  965:vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p)
        -:  966:{
    #####:  967:    __annotate_delete();
    #####:  968:    pointer __r = __v.__begin_;
    #####:  969:    _VSTD::__construct_backward_with_exception_guarantees(this->__alloc(), this->__begin_, __p, __v.__begin_);
    #####:  970:    _VSTD::__construct_forward_with_exception_guarantees(this->__alloc(), __p, this->__end_, __v.__end_);
    #####:  971:    _VSTD::swap(this->__begin_, __v.__begin_);
    #####:  972:    _VSTD::swap(this->__end_, __v.__end_);
    #####:  973:    _VSTD::swap(this->__end_cap(), __v.__end_cap());
    #####:  974:    __v.__first_ = __v.__begin_;
    #####:  975:    __annotate_new(size());
    #####:  976:    __invalidate_all_iterators();
    #####:  977:    return __r;
    $$$$$:  977-block  0
    $$$$$:  977-block  1
    $$$$$:  977-block  2
        -:  978:}
        -:  979:
        -:  980://  Allocate space for __n objects
        -:  981://  throws length_error if __n > max_size()
        -:  982://  throws (probably bad_alloc) if memory run out
        -:  983://  Precondition:  __begin_ == __end_ == __end_cap() == 0
        -:  984://  Precondition:  __n > 0
        -:  985://  Postcondition:  capacity() == __n
        -:  986://  Postcondition:  size() == 0
        -:  987:template <class _Tp, class _Allocator>
        -:  988:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__vallocateEm called 1 returned 100% blocks executed 66%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE11__vallocateEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE11__vallocateEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__vallocateEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE11__vallocateEm called 0 returned 0% blocks executed 0%
        1:  989:vector<_Tp, _Allocator>::__vallocate(size_type __n)
        -:  990:{
        1:  991:    if (__n > max_size())
        1:  991-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$:  991-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  991-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  991-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  991-block  4
branch  8 never executed
branch  9 never executed
    #####:  992:        this->__throw_length_error();
    $$$$$:  992-block  0
    $$$$$:  992-block  1
    $$$$$:  992-block  2
    $$$$$:  992-block  3
    $$$$$:  992-block  4
        1:  993:    this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n);
        1:  994:    this->__end_cap() = this->__begin_ + __n;
        1:  995:    __annotate_new(0);
        1:  996:}
        1:  996-block  0
    $$$$$:  996-block  1
    $$$$$:  996-block  2
    $$$$$:  996-block  3
    $$$$$:  996-block  4
        -:  997:
        -:  998:template <class _Tp, class _Allocator>
        -:  999:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__vdeallocateEv called 1 returned 100% blocks executed 50%
        1: 1000:vector<_Tp, _Allocator>::__vdeallocate() _NOEXCEPT
        -: 1001:{
        1: 1002:    if (this->__begin_ != nullptr)
    $$$$$: 1002-block  0
        1: 1002-block  1
        -: 1003:    {
    #####: 1004:        clear();
    #####: 1005:        __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());
    #####: 1006:        this->__begin_ = this->__end_ = this->__end_cap() = nullptr;
    #####: 1007:    }
    $$$$$: 1007-block  0
        1: 1008:}
        1: 1008-block  0
        -: 1009:
        -: 1010:template <class _Tp, class _Allocator>
        -: 1011:typename vector<_Tp, _Allocator>::size_type
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv called 16 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE8max_sizeEv called 8 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv called 11 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE8max_sizeEv called 1 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE8max_sizeEv called 3 returned 100% blocks executed 66%
       39: 1012:vector<_Tp, _Allocator>::max_size() const _NOEXCEPT
        -: 1013:{
       78: 1014:    return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()),
       16: 1014-block  0
branch  0 taken 16
branch  1 taken 0
       16: 1014-block  1
branch  2 taken 16
branch  3 taken 0
       16: 1014-block  2
    $$$$$: 1014-block  3
    $$$$$: 1014-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 1014-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 1014-block  6
    $$$$$: 1014-block  7
    $$$$$: 1014-block  8
branch  8 never executed
branch  9 never executed
    $$$$$: 1014-block  9
branch 10 never executed
branch 11 never executed
    $$$$$: 1014-block 10
    $$$$$: 1014-block 11
    $$$$$: 1014-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 1014-block 13
branch 14 never executed
branch 15 never executed
    $$$$$: 1014-block 14
    $$$$$: 1014-block 15
    $$$$$: 1014-block 16
branch 16 never executed
branch 17 never executed
    $$$$$: 1014-block 17
branch 18 never executed
branch 19 never executed
    $$$$$: 1014-block 18
    $$$$$: 1014-block 19
    $$$$$: 1014-block 20
branch 20 never executed
branch 21 never executed
    $$$$$: 1014-block 21
branch 22 never executed
branch 23 never executed
    $$$$$: 1014-block 22
    $$$$$: 1014-block 23
    $$$$$: 1014-block 24
branch 24 never executed
branch 25 never executed
    $$$$$: 1014-block 25
branch 26 never executed
branch 27 never executed
    $$$$$: 1014-block 26
    $$$$$: 1014-block 27
    $$$$$: 1014-block 28
branch 28 never executed
branch 29 never executed
    $$$$$: 1014-block 29
branch 30 never executed
branch 31 never executed
    $$$$$: 1014-block 30
    $$$$$: 1014-block 31
    $$$$$: 1014-block 32
branch 32 never executed
branch 33 never executed
    $$$$$: 1014-block 33
branch 34 never executed
branch 35 never executed
    $$$$$: 1014-block 34
    $$$$$: 1014-block 35
        8: 1014-block 36
branch 36 taken 8
branch 37 taken 0
        8: 1014-block 37
branch 38 taken 8
branch 39 taken 0
        8: 1014-block 38
    $$$$$: 1014-block 39
       11: 1014-block 40
branch 40 taken 11
branch 41 taken 0
       11: 1014-block 41
branch 42 taken 11
branch 43 taken 0
       11: 1014-block 42
    $$$$$: 1014-block 43
        1: 1014-block 44
branch 44 taken 1
branch 45 taken 0
        1: 1014-block 45
branch 46 taken 1
branch 47 taken 0
        1: 1014-block 46
    $$$$$: 1014-block 47
    $$$$$: 1014-block 48
branch 48 never executed
branch 49 never executed
    $$$$$: 1014-block 49
branch 50 never executed
branch 51 never executed
    $$$$$: 1014-block 50
    $$$$$: 1014-block 51
    $$$$$: 1014-block 52
branch 52 never executed
branch 53 never executed
    $$$$$: 1014-block 53
branch 54 never executed
branch 55 never executed
    $$$$$: 1014-block 54
    $$$$$: 1014-block 55
        3: 1014-block 56
branch 56 taken 3
branch 57 taken 0
        3: 1014-block 57
branch 58 taken 3
branch 59 taken 0
        3: 1014-block 58
    $$$$$: 1014-block 59
       39: 1015:                                 numeric_limits<difference_type>::max());
        -: 1016:}
        -: 1017:
        -: 1018://  Precondition:  __new_size > capacity()
        -: 1019:template <class _Tp, class _Allocator>
        -: 1020:inline _LIBCPP_INLINE_VISIBILITY
        -: 1021:typename vector<_Tp, _Allocator>::size_type
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__recommendEm called 15 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE11__recommendEm called 8 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE11__recommendEm called 11 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE11__recommendEm called 1 returned 100% blocks executed 66%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE11__recommendEm called 3 returned 100% blocks executed 66%
       38: 1022:vector<_Tp, _Allocator>::__recommend(size_type __new_size) const
        -: 1023:{
       38: 1024:    const size_type __ms = max_size();
       38: 1025:    if (__new_size > __ms)
       15: 1025-block  0
branch  0 taken 0
branch  1 taken 15
    $$$$$: 1025-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1025-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1025-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1025-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1025-block  5
branch 10 never executed
branch 11 never executed
        8: 1025-block  6
branch 12 taken 0
branch 13 taken 8
       11: 1025-block  7
branch 14 taken 0
branch 15 taken 11
        1: 1025-block  8
branch 16 taken 0
branch 17 taken 1
    $$$$$: 1025-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 1025-block 10
branch 20 never executed
branch 21 never executed
        3: 1025-block 11
branch 22 taken 0
branch 23 taken 3
    #####: 1026:        this->__throw_length_error();
    $$$$$: 1026-block  0
    $$$$$: 1026-block  1
    $$$$$: 1026-block  2
    $$$$$: 1026-block  3
    $$$$$: 1026-block  4
    $$$$$: 1026-block  5
    $$$$$: 1026-block  6
    $$$$$: 1026-block  7
    $$$$$: 1026-block  8
    $$$$$: 1026-block  9
    $$$$$: 1026-block 10
    $$$$$: 1026-block 11
       38: 1027:    const size_type __cap = capacity();
       38: 1028:    if (__cap >= __ms / 2)
       15: 1028-block  0
branch  0 taken 0
branch  1 taken 15
    $$$$$: 1028-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1028-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1028-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1028-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1028-block  5
branch 10 never executed
branch 11 never executed
        8: 1028-block  6
branch 12 taken 0
branch 13 taken 8
       11: 1028-block  7
branch 14 taken 0
branch 15 taken 11
        1: 1028-block  8
branch 16 taken 0
branch 17 taken 1
    $$$$$: 1028-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 1028-block 10
branch 20 never executed
branch 21 never executed
        3: 1028-block 11
branch 22 taken 0
branch 23 taken 3
    #####: 1029:        return __ms;
    $$$$$: 1029-block  0
    $$$$$: 1029-block  1
    $$$$$: 1029-block  2
    $$$$$: 1029-block  3
    $$$$$: 1029-block  4
    $$$$$: 1029-block  5
    $$$$$: 1029-block  6
    $$$$$: 1029-block  7
    $$$$$: 1029-block  8
    $$$$$: 1029-block  9
    $$$$$: 1029-block 10
    $$$$$: 1029-block 11
       38: 1030:    return _VSTD::max<size_type>(2*__cap, __new_size);
       15: 1030-block  0
    $$$$$: 1030-block  1
    $$$$$: 1030-block  2
    $$$$$: 1030-block  3
    $$$$$: 1030-block  4
    $$$$$: 1030-block  5
        8: 1030-block  6
       11: 1030-block  7
        1: 1030-block  8
    $$$$$: 1030-block  9
    $$$$$: 1030-block 10
        3: 1030-block 11
       38: 1031:}
       15: 1031-block  0
    $$$$$: 1031-block  1
    $$$$$: 1031-block  2
    $$$$$: 1031-block  3
    $$$$$: 1031-block  4
    $$$$$: 1031-block  5
        8: 1031-block  6
       11: 1031-block  7
        1: 1031-block  8
    $$$$$: 1031-block  9
    $$$$$: 1031-block 10
        3: 1031-block 11
        -: 1032:
        -: 1033://  Default constructs __n objects starting at __end_
        -: 1034://  throws if construction throws
        -: 1035://  Precondition:  __n > 0
        -: 1036://  Precondition:  size() + __n <= capacity()
        -: 1037://  Postcondition:  size() == size() + __n
        -: 1038:template <class _Tp, class _Allocator>
        -: 1039:void
function _ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE18__construct_at_endEm called 0 returned 0% blocks executed 0%
    #####: 1040:vector<_Tp, _Allocator>::__construct_at_end(size_type __n)
        -: 1041:{
    #####: 1042:    _ConstructTransaction __tx(*this, __n);
    #####: 1043:    const_pointer __new_end = __tx.__new_end_;
    #####: 1044:    for (pointer __pos = __tx.__pos_; __pos != __new_end; ++__pos, __tx.__pos_ = __pos) {
    $$$$$: 1044-block  0
    $$$$$: 1044-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1044-block  2
    $$$$$: 1044-block  3
    $$$$$: 1044-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1044-block  5
    #####: 1045:        __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__pos));
    $$$$$: 1045-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1045-block  1
branch  2 never executed
branch  3 never executed
    #####: 1046:    }
    $$$$$: 1046-block  0
    $$$$$: 1046-block  1
    #####: 1047:}
    $$$$$: 1047-block  0
    $$$$$: 1047-block  1
    $$$$$: 1047-block  2
    $$$$$: 1047-block  3
    $$$$$: 1047-block  4
    $$$$$: 1047-block  5
        -: 1048:
        -: 1049://  Copy constructs __n objects starting at __end_ from __x
        -: 1050://  throws if construction throws
        -: 1051://  Precondition:  __n > 0
        -: 1052://  Precondition:  size() + __n <= capacity()
        -: 1053://  Postcondition:  size() == old size() + __n
        -: 1054://  Postcondition:  [i] == __x for all i in [size() - __n, __n)
        -: 1055:template <class _Tp, class _Allocator>
        -: 1056:inline
        -: 1057:void
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE18__construct_at_endEmRKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE18__construct_at_endEmRKS7_ called 0 returned 0% blocks executed 0%
    #####: 1058:vector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x)
        -: 1059:{
    #####: 1060:    _ConstructTransaction __tx(*this, __n);
    #####: 1061:    const_pointer __new_end = __tx.__new_end_;
    #####: 1062:    for (pointer __pos = __tx.__pos_; __pos != __new_end; ++__pos, __tx.__pos_ = __pos) {
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1062-block  2
    $$$$$: 1062-block  3
    $$$$$: 1062-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1062-block  5
    #####: 1063:        __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__pos), __x);
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    #####: 1064:    }
    $$$$$: 1064-block  0
    $$$$$: 1064-block  1
    #####: 1065:}
    $$$$$: 1065-block  0
    $$$$$: 1065-block  1
    $$$$$: 1065-block  2
    $$$$$: 1065-block  3
    $$$$$: 1065-block  4
    $$$$$: 1065-block  5
        -: 1066:
        -: 1067:template <class _Tp, class _Allocator>
        -: 1068:template <class _ForwardIterator>
        -: 1069:typename enable_if
        -: 1070:<
        -: 1071:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 1072:    void
        -: 1073:>::type
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPKPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESF_SF_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESC_SC_m called 1 returned 100% blocks executed 50%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES7_S7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESB_SB_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endINS_11__wrap_iterIPKS6_EEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESF_SF_m called 0 returned 0% blocks executed 0%
        1: 1074:vector<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n)
        -: 1075:{
        1: 1076:    _ConstructTransaction __tx(*this, __n);
        1: 1077:    _VSTD::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_);
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
        1: 1077-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
        1: 1078:}
    $$$$$: 1078-block  0
    $$$$$: 1078-block  1
    $$$$$: 1078-block  2
        1: 1078-block  3
    $$$$$: 1078-block  4
    $$$$$: 1078-block  5
    $$$$$: 1078-block  6
    $$$$$: 1078-block  7
    $$$$$: 1078-block  8
    $$$$$: 1078-block  9
    $$$$$: 1078-block 10
    $$$$$: 1078-block 11
    $$$$$: 1078-block 12
    $$$$$: 1078-block 13
    $$$$$: 1078-block 14
        -: 1079:
        -: 1080://  Default constructs __n objects starting at __end_
        -: 1081://  throws if construction throws
        -: 1082://  Postcondition:  size() == size() + __n
        -: 1083://  Exception safety: strong.
        -: 1084:template <class _Tp, class _Allocator>
        -: 1085:void
        -: 1086:vector<_Tp, _Allocator>::__append(size_type __n)
        -: 1087:{
        -: 1088:    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
        -: 1089:        this->__construct_at_end(__n);
        -: 1090:    else
        -: 1091:    {
        -: 1092:        allocator_type& __a = this->__alloc();
        -: 1093:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
        -: 1094:        __v.__construct_at_end(__n);
        -: 1095:        __swap_out_circular_buffer(__v);
        -: 1096:    }
        -: 1097:}
        -: 1098:
        -: 1099://  Default constructs __n objects starting at __end_
        -: 1100://  throws if construction throws
        -: 1101://  Postcondition:  size() == size() + __n
        -: 1102://  Exception safety: strong.
        -: 1103:template <class _Tp, class _Allocator>
        -: 1104:void
        -: 1105:vector<_Tp, _Allocator>::__append(size_type __n, const_reference __x)
        -: 1106:{
        -: 1107:    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
        -: 1108:        this->__construct_at_end(__n, __x);
        -: 1109:    else
        -: 1110:    {
        -: 1111:        allocator_type& __a = this->__alloc();
        -: 1112:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
        -: 1113:        __v.__construct_at_end(__n, __x);
        -: 1114:        __swap_out_circular_buffer(__v);
        -: 1115:    }
        -: 1116:}
        -: 1117:
        -: 1118:template <class _Tp, class _Allocator>
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC1Em called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2Em called 0 returned 0% blocks executed 0%
    #####: 1119:vector<_Tp, _Allocator>::vector(size_type __n)
    #####: 1120:{
        -: 1121:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1122:    __get_db()->__insert_c(this);
        -: 1123:#endif
    #####: 1124:    if (__n > 0)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
    $$$$$: 1124-block  3
        -: 1125:    {
    #####: 1126:        __vallocate(__n);
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
    #####: 1127:        __construct_at_end(__n);
    $$$$$: 1127-block  0
    $$$$$: 1127-block  1
    #####: 1128:    }
    $$$$$: 1128-block  0
    $$$$$: 1128-block  1
    #####: 1129:}
    $$$$$: 1129-block  0
    $$$$$: 1129-block  1
    $$$$$: 1129-block  2
    $$$$$: 1129-block  3
    $$$$$: 1129-block  4
    $$$$$: 1129-block  5
    $$$$$: 1129-block  6
    $$$$$: 1129-block  7
        -: 1130:
        -: 1131:#if _LIBCPP_STD_VER > 11
        -: 1132:template <class _Tp, class _Allocator>
        -: 1133:vector<_Tp, _Allocator>::vector(size_type __n, const allocator_type& __a)
        -: 1134:    : __base(__a)
        -: 1135:{
        -: 1136:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1137:    __get_db()->__insert_c(this);
        -: 1138:#endif
        -: 1139:    if (__n > 0)
        -: 1140:    {
        -: 1141:        __vallocate(__n);
        -: 1142:        __construct_at_end(__n);
        -: 1143:    }
        -: 1144:}
        -: 1145:#endif
        -: 1146:
        -: 1147:template <class _Tp, class _Allocator>
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEEC1EmRKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEEC1EmRKS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEEC2EmRKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEEC2EmRKS7_ called 0 returned 0% blocks executed 0%
    #####: 1148:vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x)
    #####: 1149:{
        -: 1150:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1151:    __get_db()->__insert_c(this);
        -: 1152:#endif
    #####: 1153:    if (__n > 0)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
    $$$$$: 1153-block  3
        -: 1154:    {
    #####: 1155:        __vallocate(__n);
    $$$$$: 1155-block  0
    $$$$$: 1155-block  1
    #####: 1156:        __construct_at_end(__n, __x);
    $$$$$: 1156-block  0
    $$$$$: 1156-block  1
    #####: 1157:    }
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
    #####: 1158:}
    $$$$$: 1158-block  0
    $$$$$: 1158-block  1
    $$$$$: 1158-block  2
    $$$$$: 1158-block  3
    $$$$$: 1158-block  4
    $$$$$: 1158-block  5
    $$$$$: 1158-block  6
    $$$$$: 1158-block  7
        -: 1159:
        -: 1160:template <class _Tp, class _Allocator>
        -: 1161:vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
        -: 1162:    : __base(__a)
        -: 1163:{
        -: 1164:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1165:    __get_db()->__insert_c(this);
        -: 1166:#endif
        -: 1167:    if (__n > 0)
        -: 1168:    {
        -: 1169:        __vallocate(__n);
        -: 1170:        __construct_at_end(__n, __x);
        -: 1171:    }
        -: 1172:}
        -: 1173:
        -: 1174:template <class _Tp, class _Allocator>
        -: 1175:template <class _InputIterator>
        -: 1176:vector<_Tp, _Allocator>::vector(_InputIterator __first,
        -: 1177:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1178:                         !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1179:                         is_constructible<
        -: 1180:                            value_type,
        -: 1181:                            typename iterator_traits<_InputIterator>::reference>::value,
        -: 1182:                          _InputIterator>::type __last)
        -: 1183:{
        -: 1184:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1185:    __get_db()->__insert_c(this);
        -: 1186:#endif
        -: 1187:    for (; __first != __last; ++__first)
        -: 1188:        __emplace_back(*__first);
        -: 1189:}
        -: 1190:
        -: 1191:template <class _Tp, class _Allocator>
        -: 1192:template <class _InputIterator>
        -: 1193:vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 1194:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1195:                         !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1196:                         is_constructible<
        -: 1197:                            value_type,
        -: 1198:                            typename iterator_traits<_InputIterator>::reference>::value>::type*)
        -: 1199:    : __base(__a)
        -: 1200:{
        -: 1201:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1202:    __get_db()->__insert_c(this);
        -: 1203:#endif
        -: 1204:    for (; __first != __last; ++__first)
        -: 1205:        __emplace_back(*__first);
        -: 1206:}
        -: 1207:
        -: 1208:template <class _Tp, class _Allocator>
        -: 1209:template <class _ForwardIterator>
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1INS_11__wrap_iterIPKS6_EEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1IPKPKcEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2IPKPKcEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2INS_11__wrap_iterIPKS6_EEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
    #####: 1210:vector<_Tp, _Allocator>::vector(_ForwardIterator __first,
        -: 1211:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1212:                                is_constructible<
        -: 1213:                                   value_type,
        -: 1214:                                   typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1215:                                                   _ForwardIterator>::type __last)
    #####: 1216:{
        -: 1217:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1218:    __get_db()->__insert_c(this);
        -: 1219:#endif
    #####: 1220:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
    $$$$$: 1220-block  0
    $$$$$: 1220-block  1
    #####: 1221:    if (__n > 0)
    $$$$$: 1221-block  0
    $$$$$: 1221-block  1
    $$$$$: 1221-block  2
    $$$$$: 1221-block  3
        -: 1222:    {
    #####: 1223:        __vallocate(__n);
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    #####: 1224:        __construct_at_end(__first, __last, __n);
    $$$$$: 1224-block  0
    $$$$$: 1224-block  1
    #####: 1225:    }
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    #####: 1226:}
    $$$$$: 1226-block  0
    $$$$$: 1226-block  1
    $$$$$: 1226-block  2
    $$$$$: 1226-block  3
    $$$$$: 1226-block  4
    $$$$$: 1226-block  5
    $$$$$: 1226-block  6
    $$$$$: 1226-block  7
        -: 1227:
        -: 1228:template <class _Tp, class _Allocator>
        -: 1229:template <class _ForwardIterator>
        -: 1230:vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 1231:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1232:                                is_constructible<
        -: 1233:                                   value_type,
        -: 1234:                                   typename iterator_traits<_ForwardIterator>::reference>::value>::type*)
        -: 1235:    : __base(__a)
        -: 1236:{
        -: 1237:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1238:    __get_db()->__insert_c(this);
        -: 1239:#endif
        -: 1240:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1241:    if (__n > 0)
        -: 1242:    {
        -: 1243:        __vallocate(__n);
        -: 1244:        __construct_at_end(__first, __last, __n);
        -: 1245:    }
        -: 1246:}
        -: 1247:
        -: 1248:template <class _Tp, class _Allocator>
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1ERKS8_ called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_ called 2 returned 100% blocks executed 75%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC1ERKS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2ERKS7_ called 0 returned 0% blocks executed 0%
        4: 1249:vector<_Tp, _Allocator>::vector(const vector& __x)
        2: 1250:    : __base(__alloc_traits::select_on_container_copy_construction(__x.__alloc()))
        4: 1251:{
        -: 1252:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1253:    __get_db()->__insert_c(this);
        -: 1254:#endif
        2: 1255:    size_type __n = __x.size();
        2: 1256:    if (__n > 0)
        1: 1256-block  0
        1: 1256-block  1
    $$$$$: 1256-block  2
    $$$$$: 1256-block  3
    $$$$$: 1256-block  4
    $$$$$: 1256-block  5
        -: 1257:    {
        1: 1258:        __vallocate(__n);
        1: 1258-block  0
    $$$$$: 1258-block  1
    $$$$$: 1258-block  2
        1: 1259:        __construct_at_end(__x.__begin_, __x.__end_, __n);
        1: 1259-block  0
    $$$$$: 1259-block  1
    $$$$$: 1259-block  2
        1: 1260:    }
        1: 1260-block  0
    $$$$$: 1260-block  1
    $$$$$: 1260-block  2
        4: 1261:}
        2: 1261-block  0
    $$$$$: 1261-block  1
        2: 1261-block  2
    $$$$$: 1261-block  3
    $$$$$: 1261-block  4
    $$$$$: 1261-block  5
    $$$$$: 1261-block  6
    $$$$$: 1261-block  7
    $$$$$: 1261-block  8
    $$$$$: 1261-block  9
    $$$$$: 1261-block 10
    $$$$$: 1261-block 11
        -: 1262:
        -: 1263:template <class _Tp, class _Allocator>
        -: 1264:vector<_Tp, _Allocator>::vector(const vector& __x, const allocator_type& __a)
        -: 1265:    : __base(__a)
        -: 1266:{
        -: 1267:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1268:    __get_db()->__insert_c(this);
        -: 1269:#endif
        -: 1270:    size_type __n = __x.size();
        -: 1271:    if (__n > 0)
        -: 1272:    {
        -: 1273:        __vallocate(__n);
        -: 1274:        __construct_at_end(__x.__begin_, __x.__end_, __n);
        -: 1275:    }
        -: 1276:}
        -: 1277:
        -: 1278:#ifndef _LIBCPP_CXX03_LANG
        -: 1279:
        -: 1280:template <class _Tp, class _Allocator>
        -: 1281:inline _LIBCPP_INLINE_VISIBILITY
        -: 1282:vector<_Tp, _Allocator>::vector(vector&& __x)
        -: 1283:#if _LIBCPP_STD_VER > 14
        -: 1284:        _NOEXCEPT
        -: 1285:#else
        -: 1286:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 1287:#endif
        -: 1288:    : __base(_VSTD::move(__x.__alloc()))
        -: 1289:{
        -: 1290:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1291:    __get_db()->__insert_c(this);
        -: 1292:    __get_db()->swap(this, &__x);
        -: 1293:#endif
        -: 1294:    this->__begin_ = __x.__begin_;
        -: 1295:    this->__end_ = __x.__end_;
        -: 1296:    this->__end_cap() = __x.__end_cap();
        -: 1297:    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
        -: 1298:}
        -: 1299:
        -: 1300:template <class _Tp, class _Allocator>
        -: 1301:inline _LIBCPP_INLINE_VISIBILITY
        -: 1302:vector<_Tp, _Allocator>::vector(vector&& __x, const allocator_type& __a)
        -: 1303:    : __base(__a)
        -: 1304:{
        -: 1305:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1306:    __get_db()->__insert_c(this);
        -: 1307:#endif
        -: 1308:    if (__a == __x.__alloc())
        -: 1309:    {
        -: 1310:        this->__begin_ = __x.__begin_;
        -: 1311:        this->__end_ = __x.__end_;
        -: 1312:        this->__end_cap() = __x.__end_cap();
        -: 1313:        __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
        -: 1314:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1315:        __get_db()->swap(this, &__x);
        -: 1316:#endif
        -: 1317:    }
        -: 1318:    else
        -: 1319:    {
        -: 1320:        typedef move_iterator<iterator> _Ip;
        -: 1321:        assign(_Ip(__x.begin()), _Ip(__x.end()));
        -: 1322:    }
        -: 1323:}
        -: 1324:
        -: 1325:template <class _Tp, class _Allocator>
        -: 1326:inline _LIBCPP_INLINE_VISIBILITY
        -: 1327:vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il)
        -: 1328:{
        -: 1329:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1330:    __get_db()->__insert_c(this);
        -: 1331:#endif
        -: 1332:    if (__il.size() > 0)
        -: 1333:    {
        -: 1334:        __vallocate(__il.size());
        -: 1335:        __construct_at_end(__il.begin(), __il.end(), __il.size());
        -: 1336:    }
        -: 1337:}
        -: 1338:
        -: 1339:template <class _Tp, class _Allocator>
        -: 1340:inline _LIBCPP_INLINE_VISIBILITY
        -: 1341:vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
        -: 1342:    : __base(__a)
        -: 1343:{
        -: 1344:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1345:    __get_db()->__insert_c(this);
        -: 1346:#endif
        -: 1347:    if (__il.size() > 0)
        -: 1348:    {
        -: 1349:        __vallocate(__il.size());
        -: 1350:        __construct_at_end(__il.begin(), __il.end(), __il.size());
        -: 1351:    }
        -: 1352:}
        -: 1353:
        -: 1354:template <class _Tp, class _Allocator>
        -: 1355:inline _LIBCPP_INLINE_VISIBILITY
        -: 1356:vector<_Tp, _Allocator>&
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEaSEOS8_ called 1 returned 100% blocks executed 100%
        1: 1357:vector<_Tp, _Allocator>::operator=(vector&& __x)
        -: 1358:    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 1359:{
        1: 1360:    __move_assign(__x, integral_constant<bool,
        -: 1361:          __alloc_traits::propagate_on_container_move_assignment::value>());
        1: 1362:    return *this;
        1: 1362-block  0
        -: 1363:}
        -: 1364:
        -: 1365:template <class _Tp, class _Allocator>
        -: 1366:void
        -: 1367:vector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)
        -: 1368:    _NOEXCEPT_(__alloc_traits::is_always_equal::value)
        -: 1369:{
        -: 1370:    if (__base::__alloc() != __c.__alloc())
        -: 1371:    {
        -: 1372:        typedef move_iterator<iterator> _Ip;
        -: 1373:        assign(_Ip(__c.begin()), _Ip(__c.end()));
        -: 1374:    }
        -: 1375:    else
        -: 1376:        __move_assign(__c, true_type());
        -: 1377:}
        -: 1378:
        -: 1379:template <class _Tp, class _Allocator>
        -: 1380:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__move_assignERS8_NS_17integral_constantIbLb1EEE called 1 returned 100% blocks executed 100%
        1: 1381:vector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)
        -: 1382:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 1383:{
        1: 1384:    __vdeallocate();
        1: 1385:    __base::__move_assign_alloc(__c); // this can throw
        1: 1386:    this->__begin_ = __c.__begin_;
        1: 1387:    this->__end_ = __c.__end_;
        1: 1388:    this->__end_cap() = __c.__end_cap();
        1: 1389:    __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
        -: 1390:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1391:    __get_db()->swap(this, &__c);
        -: 1392:#endif
        1: 1393:}
        1: 1393-block  0
        -: 1394:
        -: 1395:#endif  // !_LIBCPP_CXX03_LANG
        -: 1396:
        -: 1397:template <class _Tp, class _Allocator>
        -: 1398:inline _LIBCPP_INLINE_VISIBILITY
        -: 1399:vector<_Tp, _Allocator>&
        -: 1400:vector<_Tp, _Allocator>::operator=(const vector& __x)
        -: 1401:{
        -: 1402:    if (this != &__x)
        -: 1403:    {
        -: 1404:        __base::__copy_assign_alloc(__x);
        -: 1405:        assign(__x.__begin_, __x.__end_);
        -: 1406:    }
        -: 1407:    return *this;
        -: 1408:}
        -: 1409:
        -: 1410:template <class _Tp, class _Allocator>
        -: 1411:template <class _InputIterator>
        -: 1412:typename enable_if
        -: 1413:<
        -: 1414:     __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1415:    !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1416:    is_constructible<
        -: 1417:       _Tp,
        -: 1418:       typename iterator_traits<_InputIterator>::reference>::value,
        -: 1419:    void
        -: 1420:>::type
        -: 1421:vector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 1422:{
        -: 1423:    clear();
        -: 1424:    for (; __first != __last; ++__first)
        -: 1425:        __emplace_back(*__first);
        -: 1426:}
        -: 1427:
        -: 1428:template <class _Tp, class _Allocator>
        -: 1429:template <class _ForwardIterator>
        -: 1430:typename enable_if
        -: 1431:<
        -: 1432:    __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1433:    is_constructible<
        -: 1434:       _Tp,
        -: 1435:       typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1436:    void
        -: 1437:>::type
        -: 1438:vector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 1439:{
        -: 1440:    size_type __new_size = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1441:    if (__new_size <= capacity())
        -: 1442:    {
        -: 1443:        _ForwardIterator __mid = __last;
        -: 1444:        bool __growing = false;
        -: 1445:        if (__new_size > size())
        -: 1446:        {
        -: 1447:            __growing = true;
        -: 1448:            __mid =  __first;
        -: 1449:            _VSTD::advance(__mid, size());
        -: 1450:        }
        -: 1451:        pointer __m = _VSTD::copy(__first, __mid, this->__begin_);
        -: 1452:        if (__growing)
        -: 1453:            __construct_at_end(__mid, __last, __new_size - size());
        -: 1454:        else
        -: 1455:            this->__destruct_at_end(__m);
        -: 1456:    }
        -: 1457:    else
        -: 1458:    {
        -: 1459:        __vdeallocate();
        -: 1460:        __vallocate(__recommend(__new_size));
        -: 1461:        __construct_at_end(__first, __last, __new_size);
        -: 1462:    }
        -: 1463:    __invalidate_all_iterators();
        -: 1464:}
        -: 1465:
        -: 1466:template <class _Tp, class _Allocator>
        -: 1467:void
        -: 1468:vector<_Tp, _Allocator>::assign(size_type __n, const_reference __u)
        -: 1469:{
        -: 1470:    if (__n <= capacity())
        -: 1471:    {
        -: 1472:        size_type __s = size();
        -: 1473:        _VSTD::fill_n(this->__begin_, _VSTD::min(__n, __s), __u);
        -: 1474:        if (__n > __s)
        -: 1475:            __construct_at_end(__n - __s, __u);
        -: 1476:        else
        -: 1477:            this->__destruct_at_end(this->__begin_ + __n);
        -: 1478:    }
        -: 1479:    else
        -: 1480:    {
        -: 1481:        __vdeallocate();
        -: 1482:        __vallocate(__recommend(static_cast<size_type>(__n)));
        -: 1483:        __construct_at_end(__n, __u);
        -: 1484:    }
        -: 1485:    __invalidate_all_iterators();
        -: 1486:}
        -: 1487:
        -: 1488:template <class _Tp, class _Allocator>
        -: 1489:inline _LIBCPP_INLINE_VISIBILITY
        -: 1490:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__make_iterEPS6_ called 58 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE11__make_iterEPS4_ called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE11__make_iterEPS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__make_iterEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE11__make_iterEPS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE11__make_iterEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE11__make_iterEPS3_ called 29 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE11__make_iterEPS3_ called 2 returned 100% blocks executed 100%
       91: 1491:vector<_Tp, _Allocator>::__make_iter(pointer __p) _NOEXCEPT
        -: 1492:{
        -: 1493:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1494:    return iterator(this, __p);
        -: 1495:#else
       91: 1496:    return iterator(__p);
       58: 1496-block  0
        2: 1496-block  1
    $$$$$: 1496-block  2
    $$$$$: 1496-block  3
    $$$$$: 1496-block  4
    $$$$$: 1496-block  5
       29: 1496-block  6
        2: 1496-block  7
        -: 1497:#endif
        -: 1498:}
        -: 1499:
        -: 1500:template <class _Tp, class _Allocator>
        -: 1501:inline _LIBCPP_INLINE_VISIBILITY
        -: 1502:typename vector<_Tp, _Allocator>::const_iterator
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__make_iterEPKS6_ called 80 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__make_iterEPKS4_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE11__make_iterEPKS2_ called 130 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 161 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 26 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 2 returned 100% blocks executed 100%
      399: 1503:vector<_Tp, _Allocator>::__make_iter(const_pointer __p) const _NOEXCEPT
        -: 1504:{
        -: 1505:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1506:    return const_iterator(this, __p);
        -: 1507:#else
      399: 1508:    return const_iterator(__p);
       80: 1508-block  0
    $$$$$: 1508-block  1
      130: 1508-block  2
      161: 1508-block  3
    $$$$$: 1508-block  4
       26: 1508-block  5
        2: 1508-block  6
        -: 1509:#endif
        -: 1510:}
        -: 1511:
        -: 1512:template <class _Tp, class _Allocator>
        -: 1513:inline _LIBCPP_INLINE_VISIBILITY
        -: 1514:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE5beginEv called 19 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5beginEv called 35 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE5beginEv called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE5beginEv called 1 returned 100% blocks executed 100%
       56: 1515:vector<_Tp, _Allocator>::begin() _NOEXCEPT
        -: 1516:{
       56: 1517:    return __make_iter(this->__begin_);
    $$$$$: 1517-block  0
    $$$$$: 1517-block  1
    $$$$$: 1517-block  2
       19: 1517-block  3
       35: 1517-block  4
        1: 1517-block  5
    $$$$$: 1517-block  6
        1: 1517-block  7
        -: 1518:}
        -: 1519:
        -: 1520:template <class _Tp, class _Allocator>
        -: 1521:inline _LIBCPP_INLINE_VISIBILITY
        -: 1522:typename vector<_Tp, _Allocator>::const_iterator
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5beginEv called 40 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE5beginEv called 5 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE5beginEv called 65 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE5beginEv called 40 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE5beginEv called 1 returned 100% blocks executed 100%
      151: 1523:vector<_Tp, _Allocator>::begin() const _NOEXCEPT
        -: 1524:{
      151: 1525:    return __make_iter(this->__begin_);
    $$$$$: 1525-block  0
       40: 1525-block  1
        5: 1525-block  2
       65: 1525-block  3
       40: 1525-block  4
    $$$$$: 1525-block  5
        1: 1525-block  6
        -: 1526:}
        -: 1527:
        -: 1528:template <class _Tp, class _Allocator>
        -: 1529:inline _LIBCPP_INLINE_VISIBILITY
        -: 1530:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE3endEv called 10 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE3endEv called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE3endEv called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE3endEv called 1 returned 100% blocks executed 100%
       24: 1531:vector<_Tp, _Allocator>::end() _NOEXCEPT
        -: 1532:{
       24: 1533:    return __make_iter(this->__end_);
    $$$$$: 1533-block  0
    $$$$$: 1533-block  1
       10: 1533-block  2
       12: 1533-block  3
        1: 1533-block  4
    $$$$$: 1533-block  5
        1: 1533-block  6
        -: 1534:}
        -: 1535:
        -: 1536:template <class _Tp, class _Allocator>
        -: 1537:inline _LIBCPP_INLINE_VISIBILITY
        -: 1538:typename vector<_Tp, _Allocator>::const_iterator
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE3endEv called 40 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE3endEv called 21 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE3endEv called 65 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE3endEv called 121 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE3endEv called 1 returned 100% blocks executed 100%
      248: 1539:vector<_Tp, _Allocator>::end() const _NOEXCEPT
        -: 1540:{
      248: 1541:    return __make_iter(this->__end_);
    $$$$$: 1541-block  0
       40: 1541-block  1
       21: 1541-block  2
       65: 1541-block  3
      121: 1541-block  4
    $$$$$: 1541-block  5
        1: 1541-block  6
        -: 1542:}
        -: 1543:
        -: 1544:template <class _Tp, class _Allocator>
        -: 1545:inline _LIBCPP_INLINE_VISIBILITY
        -: 1546:typename vector<_Tp, _Allocator>::reference
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEixEm called 18 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEEixEm called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEEixEm called 42 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEixEm called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEEixEm called 0 returned 0% blocks executed 0%
       81: 1547:vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT
        -: 1548:{
        -: 1549:    _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds");
       81: 1550:    return this->__begin_[__n];
    $$$$$: 1550-block  0
    $$$$$: 1550-block  1
    $$$$$: 1550-block  2
    $$$$$: 1550-block  3
    $$$$$: 1550-block  4
       18: 1550-block  5
       13: 1550-block  6
       42: 1550-block  7
    $$$$$: 1550-block  8
        8: 1550-block  9
    $$$$$: 1550-block 10
        -: 1551:}
        -: 1552:
        -: 1553:template <class _Tp, class _Allocator>
        -: 1554:inline _LIBCPP_INLINE_VISIBILITY
        -: 1555:typename vector<_Tp, _Allocator>::const_reference
function _ZNKSt3__16vectorImNS_9allocatorImEEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEixEm called 9 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEixEm called 20 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEEixEm called 13 returned 100% blocks executed 100%
       42: 1556:vector<_Tp, _Allocator>::operator[](size_type __n) const _NOEXCEPT
        -: 1557:{
        -: 1558:    _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds");
       42: 1559:    return this->__begin_[__n];
    $$$$$: 1559-block  0
    $$$$$: 1559-block  1
    $$$$$: 1559-block  2
        9: 1559-block  3
       20: 1559-block  4
    $$$$$: 1559-block  5
       13: 1559-block  6
        -: 1560:}
        -: 1561:
        -: 1562:template <class _Tp, class _Allocator>
        -: 1563:typename vector<_Tp, _Allocator>::reference
        -: 1564:vector<_Tp, _Allocator>::at(size_type __n)
        -: 1565:{
        -: 1566:    if (__n >= size())
        -: 1567:        this->__throw_out_of_range();
        -: 1568:    return this->__begin_[__n];
        -: 1569:}
        -: 1570:
        -: 1571:template <class _Tp, class _Allocator>
        -: 1572:typename vector<_Tp, _Allocator>::const_reference
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE2atEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE2atEm called 0 returned 0% blocks executed 0%
    #####: 1573:vector<_Tp, _Allocator>::at(size_type __n) const
        -: 1574:{
    #####: 1575:    if (__n >= size())
    $$$$$: 1575-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1575-block  1
branch  2 never executed
branch  3 never executed
    #####: 1576:        this->__throw_out_of_range();
    $$$$$: 1576-block  0
    $$$$$: 1576-block  1
    #####: 1577:    return this->__begin_[__n];
    $$$$$: 1577-block  0
    $$$$$: 1577-block  1
        -: 1578:}
        -: 1579:
        -: 1580:template <class _Tp, class _Allocator>
        -: 1581:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE7reserveEm called 6 returned 100% blocks executed 57%
        6: 1582:vector<_Tp, _Allocator>::reserve(size_type __n)
        -: 1583:{
        6: 1584:    if (__n > capacity())
        6: 1584-block  0
    $$$$$: 1584-block  1
        -: 1585:    {
        6: 1586:        allocator_type& __a = this->__alloc();
        6: 1587:        __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);
        6: 1588:        __swap_out_circular_buffer(__v);
        6: 1588-block  0
branch  0 taken 6
branch  1 taken 0
        6: 1589:    }
        6: 1589-block  0
    $$$$$: 1589-block  1
    $$$$$: 1589-block  2
        6: 1590:}
        6: 1590-block  0
        -: 1591:
        -: 1592:template <class _Tp, class _Allocator>
        -: 1593:void
        -: 1594:vector<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 1595:{
        -: 1596:    if (capacity() > size())
        -: 1597:    {
        -: 1598:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1599:        try
        -: 1600:        {
        -: 1601:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1602:            allocator_type& __a = this->__alloc();
        -: 1603:            __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);
        -: 1604:            __swap_out_circular_buffer(__v);
        -: 1605:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1606:        }
        -: 1607:        catch (...)
        -: 1608:        {
        -: 1609:        }
        -: 1610:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1611:    }
        -: 1612:}
        -: 1613:
        -: 1614:template <class _Tp, class _Allocator>
        -: 1615:template <class _Up>
        -: 1616:void
        -: 1617:#ifndef _LIBCPP_CXX03_LANG
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ called 15 returned 100% blocks executed 60%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21__push_back_slow_pathImEEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 8 returned 100% blocks executed 60%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_ called 11 returned 100% blocks executed 60%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 1 returned 100% blocks executed 60%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 3 returned 100% blocks executed 60%
       38: 1618:vector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x)
        -: 1619:#else
        -: 1620:vector<_Tp, _Allocator>::__push_back_slow_path(_Up& __x)
        -: 1621:#endif
        -: 1622:{
       38: 1623:    allocator_type& __a = this->__alloc();
       38: 1624:    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);
        -: 1625:    // __v.push_back(_VSTD::forward<_Up>(__x));
       38: 1626:    __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Up>(__x));
    $$$$$: 1626-block  0
       15: 1626-block  1
    $$$$$: 1626-block  2
    $$$$$: 1626-block  3
    $$$$$: 1626-block  4
    $$$$$: 1626-block  5
        8: 1626-block  6
       11: 1626-block  7
        1: 1626-block  8
    $$$$$: 1626-block  9
    $$$$$: 1626-block 10
        3: 1626-block 11
       38: 1627:    __v.__end_++;
       38: 1628:    __swap_out_circular_buffer(__v);
    $$$$$: 1628-block  0
       15: 1628-block  1
    $$$$$: 1628-block  2
    $$$$$: 1628-block  3
    $$$$$: 1628-block  4
    $$$$$: 1628-block  5
        8: 1628-block  6
       11: 1628-block  7
        1: 1628-block  8
    $$$$$: 1628-block  9
    $$$$$: 1628-block 10
        3: 1628-block 11
       38: 1629:}
    $$$$$: 1629-block  0
    $$$$$: 1629-block  1
    $$$$$: 1629-block  2
       15: 1629-block  3
    $$$$$: 1629-block  4
    $$$$$: 1629-block  5
    $$$$$: 1629-block  6
    $$$$$: 1629-block  7
    $$$$$: 1629-block  8
    $$$$$: 1629-block  9
    $$$$$: 1629-block 10
    $$$$$: 1629-block 11
    $$$$$: 1629-block 12
    $$$$$: 1629-block 13
    $$$$$: 1629-block 14
    $$$$$: 1629-block 15
    $$$$$: 1629-block 16
    $$$$$: 1629-block 17
        8: 1629-block 18
    $$$$$: 1629-block 19
    $$$$$: 1629-block 20
       11: 1629-block 21
    $$$$$: 1629-block 22
    $$$$$: 1629-block 23
        1: 1629-block 24
    $$$$$: 1629-block 25
    $$$$$: 1629-block 26
    $$$$$: 1629-block 27
    $$$$$: 1629-block 28
    $$$$$: 1629-block 29
    $$$$$: 1629-block 30
    $$$$$: 1629-block 31
    $$$$$: 1629-block 32
        3: 1629-block 33
    $$$$$: 1629-block 34
    $$$$$: 1629-block 35
        -: 1630:
        -: 1631:template <class _Tp, class _Allocator>
        -: 1632:inline _LIBCPP_INLINE_VISIBILITY
        -: 1633:void
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE9push_backERKS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE9push_backERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE9push_backERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE9push_backERKS3_ called 9 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE9push_backERKS3_ called 1 returned 100% blocks executed 75%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE9push_backERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE9push_backERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE9push_backERKS3_ called 4 returned 100% blocks executed 100%
       14: 1634:vector<_Tp, _Allocator>::push_back(const_reference __x)
        -: 1635:{
       14: 1636:    if (this->__end_ != this->__end_cap())
    $$$$$: 1636-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1636-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1636-block  2
branch  4 never executed
branch  5 never executed
        9: 1636-block  3
branch  6 taken 1
branch  7 taken 8
        1: 1636-block  4
branch  8 taken 0
branch  9 taken 1
    $$$$$: 1636-block  5
branch 10 never executed
branch 11 never executed
    $$$$$: 1636-block  6
branch 12 never executed
branch 13 never executed
        4: 1636-block  7
branch 14 taken 1
branch 15 taken 3
        -: 1637:    {
        2: 1638:        __construct_one_at_end(__x);
        2: 1639:    }
    $$$$$: 1639-block  0
    $$$$$: 1639-block  1
    $$$$$: 1639-block  2
        1: 1639-block  3
    $$$$$: 1639-block  4
    $$$$$: 1639-block  5
    $$$$$: 1639-block  6
        1: 1639-block  7
        -: 1640:    else
       12: 1641:        __push_back_slow_path(__x);
    $$$$$: 1641-block  0
    $$$$$: 1641-block  1
    $$$$$: 1641-block  2
        8: 1641-block  3
        1: 1641-block  4
    $$$$$: 1641-block  5
    $$$$$: 1641-block  6
        3: 1641-block  7
       14: 1642:}
    $$$$$: 1642-block  0
    $$$$$: 1642-block  1
    $$$$$: 1642-block  2
        9: 1642-block  3
        1: 1642-block  4
    $$$$$: 1642-block  5
    $$$$$: 1642-block  6
        4: 1642-block  7
        -: 1643:
        -: 1644:#ifndef _LIBCPP_CXX03_LANG
        -: 1645:
        -: 1646:template <class _Tp, class _Allocator>
        -: 1647:inline _LIBCPP_INLINE_VISIBILITY
        -: 1648:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backEOS6_ called 15 returned 100% blocks executed 75%
function _ZNSt3__16vectorImNS_9allocatorImEEE9push_backEOm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE9push_backEOi called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE9push_backEOS1_ called 0 returned 0% blocks executed 0%
       28: 1649:vector<_Tp, _Allocator>::push_back(value_type&& __x)
        -: 1650:{
       28: 1651:    if (this->__end_ < this->__end_cap())
       15: 1651-block  0
branch  0 taken 0
branch  1 taken 15
    $$$$$: 1651-block  1
branch  2 never executed
branch  3 never executed
       13: 1651-block  2
branch  4 taken 2
branch  5 taken 11
    $$$$$: 1651-block  3
branch  6 never executed
branch  7 never executed
        -: 1652:    {
        2: 1653:        __construct_one_at_end(_VSTD::move(__x));
        2: 1654:    }
    $$$$$: 1654-block  0
    $$$$$: 1654-block  1
        2: 1654-block  2
    $$$$$: 1654-block  3
        -: 1655:    else
       26: 1656:        __push_back_slow_path(_VSTD::move(__x));
       15: 1656-block  0
    $$$$$: 1656-block  1
       11: 1656-block  2
    $$$$$: 1656-block  3
       28: 1657:}
       15: 1657-block  0
    $$$$$: 1657-block  1
       13: 1657-block  2
    $$$$$: 1657-block  3
        -: 1658:
        -: 1659:template <class _Tp, class _Allocator>
        -: 1660:template <class... _Args>
        -: 1661:void
        -: 1662:vector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args)
        -: 1663:{
        -: 1664:    allocator_type& __a = this->__alloc();
        -: 1665:    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);
        -: 1666://    __v.emplace_back(_VSTD::forward<_Args>(__args)...);
        -: 1667:    __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Args>(__args)...);
        -: 1668:    __v.__end_++;
        -: 1669:    __swap_out_circular_buffer(__v);
        -: 1670:}
        -: 1671:
        -: 1672:template <class _Tp, class _Allocator>
        -: 1673:template <class... _Args>
        -: 1674:inline
        -: 1675:#if _LIBCPP_STD_VER > 14
        -: 1676:typename vector<_Tp, _Allocator>::reference
        -: 1677:#else
        -: 1678:void
        -: 1679:#endif
        -: 1680:vector<_Tp, _Allocator>::emplace_back(_Args&&... __args)
        -: 1681:{
        -: 1682:    if (this->__end_ < this->__end_cap())
        -: 1683:    {
        -: 1684:        __construct_one_at_end(_VSTD::forward<_Args>(__args)...);
        -: 1685:    }
        -: 1686:    else
        -: 1687:        __emplace_back_slow_path(_VSTD::forward<_Args>(__args)...);
        -: 1688:#if _LIBCPP_STD_VER > 14
        -: 1689:    return this->back();
        -: 1690:#endif
        -: 1691:}
        -: 1692:
        -: 1693:#endif  // !_LIBCPP_CXX03_LANG
        -: 1694:
        -: 1695:template <class _Tp, class _Allocator>
        -: 1696:inline
        -: 1697:void
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8pop_backEv called 0 returned 0% blocks executed 0%
    #####: 1698:vector<_Tp, _Allocator>::pop_back()
        -: 1699:{
        -: 1700:    _LIBCPP_ASSERT(!empty(), "vector::pop_back called for empty vector");
    #####: 1701:    this->__destruct_at_end(this->__end_ - 1);
    #####: 1702:}
    $$$$$: 1702-block  0
        -: 1703:
        -: 1704:template <class _Tp, class _Allocator>
        -: 1705:inline _LIBCPP_INLINE_VISIBILITY
        -: 1706:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5eraseENS_11__wrap_iterIPKS3_EE called 0 returned 0% blocks executed 0%
    #####: 1707:vector<_Tp, _Allocator>::erase(const_iterator __position)
        -: 1708:{
        -: 1709:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1710:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1711:        "vector::erase(iterator) called with an iterator not"
        -: 1712:        " referring to this vector");
        -: 1713:#endif
        -: 1714:    _LIBCPP_ASSERT(__position != end(),
        -: 1715:        "vector::erase(iterator) called with a non-dereferenceable iterator");
    #####: 1716:    difference_type __ps = __position - cbegin();
    #####: 1717:    pointer __p = this->__begin_ + __ps;
    #####: 1718:    this->__destruct_at_end(_VSTD::move(__p + 1, this->__end_, __p));
    #####: 1719:    this->__invalidate_iterators_past(__p-1);
    #####: 1720:    iterator __r = __make_iter(__p);
    #####: 1721:    return __r;
    $$$$$: 1721-block  0
        -: 1722:}
        -: 1723:
        -: 1724:template <class _Tp, class _Allocator>
        -: 1725:typename vector<_Tp, _Allocator>::iterator
        -: 1726:vector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 1727:{
        -: 1728:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1729:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,
        -: 1730:        "vector::erase(iterator,  iterator) called with an iterator not"
        -: 1731:        " referring to this vector");
        -: 1732:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__last) == this,
        -: 1733:        "vector::erase(iterator,  iterator) called with an iterator not"
        -: 1734:        " referring to this vector");
        -: 1735:#endif
        -: 1736:    _LIBCPP_ASSERT(__first <= __last, "vector::erase(first, last) called with invalid range");
        -: 1737:    pointer __p = this->__begin_ + (__first - begin());
        -: 1738:    if (__first != __last) {
        -: 1739:        this->__destruct_at_end(_VSTD::move(__p + (__last - __first), this->__end_, __p));
        -: 1740:        this->__invalidate_iterators_past(__p - 1);
        -: 1741:    }
        -: 1742:    iterator __r = __make_iter(__p);
        -: 1743:    return __r;
        -: 1744:}
        -: 1745:
        -: 1746:template <class _Tp, class _Allocator>
        -: 1747:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE12__move_rangeEPS6_S9_S9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE12__move_rangeEPS1_S5_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE12__move_rangeEPS3_S7_S7_ called 0 returned 0% blocks executed 0%
    #####: 1748:vector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to)
        -: 1749:{
    #####: 1750:    pointer __old_last = this->__end_;
    #####: 1751:    difference_type __n = __old_last - __to;
        -: 1752:    {
    #####: 1753:      pointer __i = __from_s + __n;
    #####: 1754:      _ConstructTransaction __tx(*this, __from_e - __i);
    #####: 1755:      for (pointer __pos = __tx.__pos_; __i < __from_e;
    $$$$$: 1755-block  0
    $$$$$: 1755-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1755-block  2
    $$$$$: 1755-block  3
    $$$$$: 1755-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1755-block  5
    $$$$$: 1755-block  6
    $$$$$: 1755-block  7
branch  4 never executed
branch  5 never executed
    $$$$$: 1755-block  8
    #####: 1756:           ++__i, ++__pos, __tx.__pos_ = __pos) {
    #####: 1757:          __alloc_traits::construct(this->__alloc(),
    $$$$$: 1757-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1757-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1757-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1757-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1757-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1757-block  5
branch 10 never executed
branch 11 never executed
    #####: 1758:                                    _VSTD::__to_address(__pos),
    #####: 1759:                                    _VSTD::move(*__i));
    #####: 1760:      }
    $$$$$: 1760-block  0
    $$$$$: 1760-block  1
    $$$$$: 1760-block  2
    #####: 1761:    }
    $$$$$: 1761-block  0
    $$$$$: 1761-block  1
    $$$$$: 1761-block  2
    $$$$$: 1761-block  3
    $$$$$: 1761-block  4
    $$$$$: 1761-block  5
    #####: 1762:    _VSTD::move_backward(__from_s, __from_s + __n, __old_last);
    #####: 1763:}
    $$$$$: 1763-block  0
    $$$$$: 1763-block  1
    $$$$$: 1763-block  2
        -: 1764:
        -: 1765:template <class _Tp, class _Allocator>
        -: 1766:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EERS8_ called 0 returned 0% blocks executed 0%
    #####: 1767:vector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x)
        -: 1768:{
        -: 1769:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1770:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1771:        "vector::insert(iterator, x) called with an iterator not"
        -: 1772:        " referring to this vector");
        -: 1773:#endif
    #####: 1774:    pointer __p = this->__begin_ + (__position - begin());
    #####: 1775:    if (this->__end_ < this->__end_cap())
    $$$$$: 1775-block  0
branch  0 never executed
branch  1 never executed
        -: 1776:    {
    #####: 1777:        if (__p == this->__end_)
    $$$$$: 1777-block  0
branch  0 never executed
branch  1 never executed
        -: 1778:        {
    #####: 1779:            __construct_one_at_end(__x);
    #####: 1780:        }
    $$$$$: 1780-block  0
        -: 1781:        else
        -: 1782:        {
    #####: 1783:            __move_range(__p, this->__end_, __p + 1);
    #####: 1784:            const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
    #####: 1785:            if (__p <= __xr && __xr < this->__end_)
    $$$$$: 1785-block  0
    $$$$$: 1785-block  1
    $$$$$: 1785-block  2
    $$$$$: 1785-block  3
    #####: 1786:                ++__xr;
    $$$$$: 1786-block  0
    #####: 1787:            *__p = *__xr;
    $$$$$: 1787-block  0
        -: 1788:        }
    #####: 1789:    }
    $$$$$: 1789-block  0
        -: 1790:    else
        -: 1791:    {
    #####: 1792:        allocator_type& __a = this->__alloc();
    #####: 1793:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    #####: 1794:        __v.push_back(__x);
    $$$$$: 1794-block  0
    #####: 1795:        __p = __swap_out_circular_buffer(__v, __p);
    $$$$$: 1795-block  0
    #####: 1796:    }
    $$$$$: 1796-block  0
    $$$$$: 1796-block  1
    $$$$$: 1796-block  2
    #####: 1797:    return __make_iter(__p);
    $$$$$: 1797-block  0
    #####: 1798:}
        -: 1799:
        -: 1800:#ifndef _LIBCPP_CXX03_LANG
        -: 1801:
        -: 1802:template <class _Tp, class _Allocator>
        -: 1803:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6insertENS_11__wrap_iterIPKS6_EEOS6_ called 11 returned 100% blocks executed 45%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEOS1_ called 0 returned 0% blocks executed 0%
       11: 1804:vector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x)
        -: 1805:{
        -: 1806:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1807:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1808:        "vector::insert(iterator, x) called with an iterator not"
        -: 1809:        " referring to this vector");
        -: 1810:#endif
       11: 1811:    pointer __p = this->__begin_ + (__position - begin());
       11: 1812:    if (this->__end_ < this->__end_cap())
       11: 1812-block  0
branch  0 taken 11
branch  1 taken 0
    $$$$$: 1812-block  1
branch  2 never executed
branch  3 never executed
        -: 1813:    {
       11: 1814:        if (__p == this->__end_)
       11: 1814-block  0
branch  0 taken 11
branch  1 taken 0
    $$$$$: 1814-block  1
branch  2 never executed
branch  3 never executed
        -: 1815:        {
       11: 1816:            __construct_one_at_end(_VSTD::move(__x));
       11: 1817:        }
       11: 1817-block  0
    $$$$$: 1817-block  1
        -: 1818:        else
        -: 1819:        {
    #####: 1820:            __move_range(__p, this->__end_, __p + 1);
    #####: 1821:            *__p = _VSTD::move(__x);
    $$$$$: 1821-block  0
    $$$$$: 1821-block  1
        -: 1822:        }
       11: 1823:    }
       11: 1823-block  0
    $$$$$: 1823-block  1
        -: 1824:    else
        -: 1825:    {
    #####: 1826:        allocator_type& __a = this->__alloc();
    #####: 1827:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    #####: 1828:        __v.push_back(_VSTD::move(__x));
    $$$$$: 1828-block  0
    $$$$$: 1828-block  1
    #####: 1829:        __p = __swap_out_circular_buffer(__v, __p);
    $$$$$: 1829-block  0
    $$$$$: 1829-block  1
    #####: 1830:    }
    $$$$$: 1830-block  0
    $$$$$: 1830-block  1
    $$$$$: 1830-block  2
    $$$$$: 1830-block  3
    $$$$$: 1830-block  4
    $$$$$: 1830-block  5
       11: 1831:    return __make_iter(__p);
       11: 1831-block  0
    $$$$$: 1831-block  1
    #####: 1832:}
        -: 1833:
        -: 1834:template <class _Tp, class _Allocator>
        -: 1835:template <class... _Args>
        -: 1836:typename vector<_Tp, _Allocator>::iterator
        -: 1837:vector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args)
        -: 1838:{
        -: 1839:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1840:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1841:        "vector::emplace(iterator, x) called with an iterator not"
        -: 1842:        " referring to this vector");
        -: 1843:#endif
        -: 1844:    pointer __p = this->__begin_ + (__position - begin());
        -: 1845:    if (this->__end_ < this->__end_cap())
        -: 1846:    {
        -: 1847:        if (__p == this->__end_)
        -: 1848:        {
        -: 1849:            __construct_one_at_end(_VSTD::forward<_Args>(__args)...);
        -: 1850:        }
        -: 1851:        else
        -: 1852:        {
        -: 1853:            __temp_value<value_type, _Allocator> __tmp(this->__alloc(), _VSTD::forward<_Args>(__args)...);
        -: 1854:            __move_range(__p, this->__end_, __p + 1);
        -: 1855:            *__p = _VSTD::move(__tmp.get());
        -: 1856:        }
        -: 1857:    }
        -: 1858:    else
        -: 1859:    {
        -: 1860:        allocator_type& __a = this->__alloc();
        -: 1861:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
        -: 1862:        __v.emplace_back(_VSTD::forward<_Args>(__args)...);
        -: 1863:        __p = __swap_out_circular_buffer(__v, __p);
        -: 1864:    }
        -: 1865:    return __make_iter(__p);
        -: 1866:}
        -: 1867:
        -: 1868:#endif  // !_LIBCPP_CXX03_LANG
        -: 1869:
        -: 1870:template <class _Tp, class _Allocator>
        -: 1871:typename vector<_Tp, _Allocator>::iterator
        -: 1872:vector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x)
        -: 1873:{
        -: 1874:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1875:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1876:        "vector::insert(iterator, n, x) called with an iterator not"
        -: 1877:        " referring to this vector");
        -: 1878:#endif
        -: 1879:    pointer __p = this->__begin_ + (__position - begin());
        -: 1880:    if (__n > 0)
        -: 1881:    {
        -: 1882:        if (__n <= static_cast<size_type>(this->__end_cap() - this->__end_))
        -: 1883:        {
        -: 1884:            size_type __old_n = __n;
        -: 1885:            pointer __old_last = this->__end_;
        -: 1886:            if (__n > static_cast<size_type>(this->__end_ - __p))
        -: 1887:            {
        -: 1888:                size_type __cx = __n - (this->__end_ - __p);
        -: 1889:                __construct_at_end(__cx, __x);
        -: 1890:                __n -= __cx;
        -: 1891:            }
        -: 1892:            if (__n > 0)
        -: 1893:            {
        -: 1894:                __move_range(__p, __old_last, __p + __old_n);
        -: 1895:                const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
        -: 1896:                if (__p <= __xr && __xr < this->__end_)
        -: 1897:                    __xr += __old_n;
        -: 1898:                _VSTD::fill_n(__p, __n, *__xr);
        -: 1899:            }
        -: 1900:        }
        -: 1901:        else
        -: 1902:        {
        -: 1903:            allocator_type& __a = this->__alloc();
        -: 1904:            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
        -: 1905:            __v.__construct_at_end(__n, __x);
        -: 1906:            __p = __swap_out_circular_buffer(__v, __p);
        -: 1907:        }
        -: 1908:    }
        -: 1909:    return __make_iter(__p);
        -: 1910:}
        -: 1911:
        -: 1912:template <class _Tp, class _Allocator>
        -: 1913:template <class _InputIterator>
        -: 1914:typename enable_if
        -: 1915:<
        -: 1916:     __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1917:    !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1918:    is_constructible<
        -: 1919:       _Tp,
        -: 1920:       typename iterator_traits<_InputIterator>::reference>::value,
        -: 1921:    typename vector<_Tp, _Allocator>::iterator
        -: 1922:>::type
        -: 1923:vector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
        -: 1924:{
        -: 1925:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1926:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1927:        "vector::insert(iterator, range) called with an iterator not"
        -: 1928:        " referring to this vector");
        -: 1929:#endif
        -: 1930:    difference_type __off = __position - begin();
        -: 1931:    pointer __p = this->__begin_ + __off;
        -: 1932:    allocator_type& __a = this->__alloc();
        -: 1933:    pointer __old_last = this->__end_;
        -: 1934:    for (; this->__end_ != this->__end_cap() && __first != __last; ++__first)
        -: 1935:    {
        -: 1936:        __construct_one_at_end(*__first);
        -: 1937:    }
        -: 1938:    __split_buffer<value_type, allocator_type&> __v(__a);
        -: 1939:    if (__first != __last)
        -: 1940:    {
        -: 1941:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1942:        try
        -: 1943:        {
        -: 1944:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1945:            __v.__construct_at_end(__first, __last);
        -: 1946:            difference_type __old_size = __old_last - this->__begin_;
        -: 1947:            difference_type __old_p = __p - this->__begin_;
        -: 1948:            reserve(__recommend(size() + __v.size()));
        -: 1949:            __p = this->__begin_ + __old_p;
        -: 1950:            __old_last = this->__begin_ + __old_size;
        -: 1951:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1952:        }
        -: 1953:        catch (...)
        -: 1954:        {
        -: 1955:            erase(__make_iter(__old_last), end());
        -: 1956:            throw;
        -: 1957:        }
        -: 1958:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1959:    }
        -: 1960:    __p = _VSTD::rotate(__p, __old_last, this->__end_);
        -: 1961:    insert(__make_iter(__p), _VSTD::make_move_iterator(__v.begin()),
        -: 1962:                             _VSTD::make_move_iterator(__v.end()));
        -: 1963:    return begin() + __off;
        -: 1964:}
        -: 1965:
        -: 1966:template <class _Tp, class _Allocator>
        -: 1967:template <class _ForwardIterator>
        -: 1968:typename enable_if
        -: 1969:<
        -: 1970:    __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1971:    is_constructible<
        -: 1972:       _Tp,
        -: 1973:       typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1974:    typename vector<_Tp, _Allocator>::iterator
        -: 1975:>::type
        -: 1976:vector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)
        -: 1977:{
        -: 1978:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1979:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1980:        "vector::insert(iterator, range) called with an iterator not"
        -: 1981:        " referring to this vector");
        -: 1982:#endif
        -: 1983:    pointer __p = this->__begin_ + (__position - begin());
        -: 1984:    difference_type __n = _VSTD::distance(__first, __last);
        -: 1985:    if (__n > 0)
        -: 1986:    {
        -: 1987:        if (__n <= this->__end_cap() - this->__end_)
        -: 1988:        {
        -: 1989:            size_type __old_n = __n;
        -: 1990:            pointer __old_last = this->__end_;
        -: 1991:            _ForwardIterator __m = __last;
        -: 1992:            difference_type __dx = this->__end_ - __p;
        -: 1993:            if (__n > __dx)
        -: 1994:            {
        -: 1995:                __m = __first;
        -: 1996:                difference_type __diff = this->__end_ - __p;
        -: 1997:                _VSTD::advance(__m, __diff);
        -: 1998:                __construct_at_end(__m, __last, __n - __diff);
        -: 1999:                __n = __dx;
        -: 2000:            }
        -: 2001:            if (__n > 0)
        -: 2002:            {
        -: 2003:                __move_range(__p, __old_last, __p + __old_n);
        -: 2004:                _VSTD::copy(__first, __m, __p);
        -: 2005:            }
        -: 2006:        }
        -: 2007:        else
        -: 2008:        {
        -: 2009:            allocator_type& __a = this->__alloc();
        -: 2010:            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
        -: 2011:            __v.__construct_at_end(__first, __last);
        -: 2012:            __p = __swap_out_circular_buffer(__v, __p);
        -: 2013:        }
        -: 2014:    }
        -: 2015:    return __make_iter(__p);
        -: 2016:}
        -: 2017:
        -: 2018:template <class _Tp, class _Allocator>
        -: 2019:void
        -: 2020:vector<_Tp, _Allocator>::resize(size_type __sz)
        -: 2021:{
        -: 2022:    size_type __cs = size();
        -: 2023:    if (__cs < __sz)
        -: 2024:        this->__append(__sz - __cs);
        -: 2025:    else if (__cs > __sz)
        -: 2026:        this->__destruct_at_end(this->__begin_ + __sz);
        -: 2027:}
        -: 2028:
        -: 2029:template <class _Tp, class _Allocator>
        -: 2030:void
        -: 2031:vector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x)
        -: 2032:{
        -: 2033:    size_type __cs = size();
        -: 2034:    if (__cs < __sz)
        -: 2035:        this->__append(__sz - __cs, __x);
        -: 2036:    else if (__cs > __sz)
        -: 2037:        this->__destruct_at_end(this->__begin_ + __sz);
        -: 2038:}
        -: 2039:
        -: 2040:template <class _Tp, class _Allocator>
        -: 2041:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4swapERS8_ called 7 returned 100% blocks executed 100%
        7: 2042:vector<_Tp, _Allocator>::swap(vector& __x)
        -: 2043:#if _LIBCPP_STD_VER >= 14
        -: 2044:    _NOEXCEPT
        -: 2045:#else
        -: 2046:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 2047:                __is_nothrow_swappable<allocator_type>::value)
        -: 2048:#endif
        -: 2049:{
        -: 2050:    _LIBCPP_ASSERT(__alloc_traits::propagate_on_container_swap::value ||
        -: 2051:                   this->__alloc() == __x.__alloc(),
        -: 2052:                   "vector::swap: Either propagate_on_container_swap must be true"
        -: 2053:                   " or the allocators must compare equal");
        7: 2054:    _VSTD::swap(this->__begin_, __x.__begin_);
        7: 2055:    _VSTD::swap(this->__end_, __x.__end_);
        7: 2056:    _VSTD::swap(this->__end_cap(), __x.__end_cap());
        7: 2057:    _VSTD::__swap_allocator(this->__alloc(), __x.__alloc(),
        -: 2058:        integral_constant<bool,__alloc_traits::propagate_on_container_swap::value>());
        -: 2059:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2060:    __get_db()->swap(this, &__x);
        -: 2061:#endif
        7: 2062:}
        7: 2062-block  0
        -: 2063:
        -: 2064:template <class _Tp, class _Allocator>
        -: 2065:bool
        -: 2066:vector<_Tp, _Allocator>::__invariants() const
        -: 2067:{
        -: 2068:    if (this->__begin_ == nullptr)
        -: 2069:    {
        -: 2070:        if (this->__end_ != nullptr || this->__end_cap() != nullptr)
        -: 2071:            return false;
        -: 2072:    }
        -: 2073:    else
        -: 2074:    {
        -: 2075:        if (this->__begin_ > this->__end_)
        -: 2076:            return false;
        -: 2077:        if (this->__begin_ == this->__end_cap())
        -: 2078:            return false;
        -: 2079:        if (this->__end_ > this->__end_cap())
        -: 2080:            return false;
        -: 2081:    }
        -: 2082:    return true;
        -: 2083:}
        -: 2084:
        -: 2085:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2086:
        -: 2087:template <class _Tp, class _Allocator>
        -: 2088:bool
        -: 2089:vector<_Tp, _Allocator>::__dereferenceable(const const_iterator* __i) const
        -: 2090:{
        -: 2091:    return this->__begin_ <= __i->base() && __i->base() < this->__end_;
        -: 2092:}
        -: 2093:
        -: 2094:template <class _Tp, class _Allocator>
        -: 2095:bool
        -: 2096:vector<_Tp, _Allocator>::__decrementable(const const_iterator* __i) const
        -: 2097:{
        -: 2098:    return this->__begin_ < __i->base() && __i->base() <= this->__end_;
        -: 2099:}
        -: 2100:
        -: 2101:template <class _Tp, class _Allocator>
        -: 2102:bool
        -: 2103:vector<_Tp, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const
        -: 2104:{
        -: 2105:    const_pointer __p = __i->base() + __n;
        -: 2106:    return this->__begin_ <= __p && __p <= this->__end_;
        -: 2107:}
        -: 2108:
        -: 2109:template <class _Tp, class _Allocator>
        -: 2110:bool
        -: 2111:vector<_Tp, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const
        -: 2112:{
        -: 2113:    const_pointer __p = __i->base() + __n;
        -: 2114:    return this->__begin_ <= __p && __p < this->__end_;
        -: 2115:}
        -: 2116:
        -: 2117:#endif  // _LIBCPP_DEBUG_LEVEL == 2
        -: 2118:
        -: 2119:template <class _Tp, class _Allocator>
        -: 2120:inline _LIBCPP_INLINE_VISIBILITY
        -: 2121:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__invalidate_all_iteratorsEv called 22 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE26__invalidate_all_iteratorsEv called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE26__invalidate_all_iteratorsEv called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE26__invalidate_all_iteratorsEv called 11 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 3 returned 100% blocks executed 100%
       71: 2122:vector<_Tp, _Allocator>::__invalidate_all_iterators()
        -: 2123:{
        -: 2124:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2125:    __get_db()->__invalidate_all(this);
        -: 2126:#endif
       71: 2127:}
       22: 2127-block  0
    $$$$$: 2127-block  1
    $$$$$: 2127-block  2
    $$$$$: 2127-block  3
       13: 2127-block  4
       13: 2127-block  5
        8: 2127-block  6
       11: 2127-block  7
        1: 2127-block  8
    $$$$$: 2127-block  9
    $$$$$: 2127-block 10
        3: 2127-block 11
        -: 2128:
        -: 2129:
        -: 2130:template <class _Tp, class _Allocator>
        -: 2131:inline _LIBCPP_INLINE_VISIBILITY
        -: 2132:void
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE27__invalidate_iterators_pastEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE27__invalidate_iterators_pastEPS3_ called 0 returned 0% blocks executed 0%
    #####: 2133:vector<_Tp, _Allocator>::__invalidate_iterators_past(pointer __new_last) {
        -: 2134:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2135:  __c_node* __c = __get_db()->__find_c_and_lock(this);
        -: 2136:  for (__i_node** __p = __c->end_; __p != __c->beg_; ) {
        -: 2137:    --__p;
        -: 2138:    const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);
        -: 2139:    if (__i->base() > __new_last) {
        -: 2140:      (*__p)->__c_ = nullptr;
        -: 2141:      if (--__c->end_ != __p)
        -: 2142:        _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));
        -: 2143:    }
        -: 2144:  }
        -: 2145:  __get_db()->unlock();
        -: 2146:#else
        -: 2147:  ((void)__new_last);
        -: 2148:#endif
    #####: 2149:}
    $$$$$: 2149-block  0
    $$$$$: 2149-block  1
        -: 2150:
        -: 2151:// vector<bool>
        -: 2152:
        -: 2153:template <class _Allocator> class vector<bool, _Allocator>;
        -: 2154:
        -: 2155:template <class _Allocator> struct hash<vector<bool, _Allocator> >;
        -: 2156:
        -: 2157:template <class _Allocator>
        -: 2158:struct __has_storage_type<vector<bool, _Allocator> >
        -: 2159:{
        -: 2160:    static const bool value = true;
        -: 2161:};
        -: 2162:
        -: 2163:template <class _Allocator>
        -: 2164:class _LIBCPP_TEMPLATE_VIS vector<bool, _Allocator>
        -: 2165:    : private __vector_base_common<true>
        -: 2166:{
        -: 2167:public:
        -: 2168:    typedef vector                                   __self;
        -: 2169:    typedef bool                                     value_type;
        -: 2170:    typedef _Allocator                               allocator_type;
        -: 2171:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -: 2172:    typedef typename __alloc_traits::size_type       size_type;
        -: 2173:    typedef typename __alloc_traits::difference_type difference_type;
        -: 2174:    typedef size_type __storage_type;
        -: 2175:    typedef __bit_iterator<vector, false>            pointer;
        -: 2176:    typedef __bit_iterator<vector, true>             const_pointer;
        -: 2177:    typedef pointer                                  iterator;
        -: 2178:    typedef const_pointer                            const_iterator;
        -: 2179:    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
        -: 2180:    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
        -: 2181:
        -: 2182:private:
        -: 2183:    typedef typename __rebind_alloc_helper<__alloc_traits, __storage_type>::type __storage_allocator;
        -: 2184:    typedef allocator_traits<__storage_allocator>    __storage_traits;
        -: 2185:    typedef typename __storage_traits::pointer       __storage_pointer;
        -: 2186:    typedef typename __storage_traits::const_pointer __const_storage_pointer;
        -: 2187:
        -: 2188:    __storage_pointer                                      __begin_;
        -: 2189:    size_type                                              __size_;
        -: 2190:    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;
        -: 2191:public:
        -: 2192:    typedef __bit_reference<vector>                  reference;
        -: 2193:    typedef __bit_const_reference<vector>            const_reference;
        -: 2194:private:
        -: 2195:    _LIBCPP_INLINE_VISIBILITY
        -: 2196:    size_type& __cap() _NOEXCEPT
        -: 2197:        {return __cap_alloc_.first();}
        -: 2198:    _LIBCPP_INLINE_VISIBILITY
        -: 2199:    const size_type& __cap() const _NOEXCEPT
        -: 2200:        {return __cap_alloc_.first();}
        -: 2201:    _LIBCPP_INLINE_VISIBILITY
        -: 2202:    __storage_allocator& __alloc() _NOEXCEPT
        -: 2203:        {return __cap_alloc_.second();}
        -: 2204:    _LIBCPP_INLINE_VISIBILITY
        -: 2205:    const __storage_allocator& __alloc() const _NOEXCEPT
        -: 2206:        {return __cap_alloc_.second();}
        -: 2207:
        -: 2208:    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);
        -: 2209:
        -: 2210:    _LIBCPP_INLINE_VISIBILITY
        -: 2211:    static size_type __internal_cap_to_external(size_type __n) _NOEXCEPT
        -: 2212:        {return __n * __bits_per_word;}
        -: 2213:    _LIBCPP_INLINE_VISIBILITY
        -: 2214:    static size_type __external_cap_to_internal(size_type __n) _NOEXCEPT
        -: 2215:        {return (__n - 1) / __bits_per_word + 1;}
        -: 2216:
        -: 2217:public:
        -: 2218:    _LIBCPP_INLINE_VISIBILITY
        -: 2219:    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -: 2220:
        -: 2221:    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)
        -: 2222:#if _LIBCPP_STD_VER <= 14
        -: 2223:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);
        -: 2224:#else
        -: 2225:        _NOEXCEPT;
        -: 2226:#endif
        -: 2227:    ~vector();
        -: 2228:    explicit vector(size_type __n);
        -: 2229:#if _LIBCPP_STD_VER > 11
        -: 2230:    explicit vector(size_type __n, const allocator_type& __a);
        -: 2231:#endif
        -: 2232:    vector(size_type __n, const value_type& __v);
        -: 2233:    vector(size_type __n, const value_type& __v, const allocator_type& __a);
        -: 2234:    template <class _InputIterator>
        -: 2235:        vector(_InputIterator __first, _InputIterator __last,
        -: 2236:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2237:                                 !__is_cpp17_forward_iterator<_InputIterator>::value>::type* = 0);
        -: 2238:    template <class _InputIterator>
        -: 2239:        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 2240:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2241:                                 !__is_cpp17_forward_iterator<_InputIterator>::value>::type* = 0);
        -: 2242:    template <class _ForwardIterator>
        -: 2243:        vector(_ForwardIterator __first, _ForwardIterator __last,
        -: 2244:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type* = 0);
        -: 2245:    template <class _ForwardIterator>
        -: 2246:        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 2247:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type* = 0);
        -: 2248:
        -: 2249:    vector(const vector& __v);
        -: 2250:    vector(const vector& __v, const allocator_type& __a);
        -: 2251:    vector& operator=(const vector& __v);
        -: 2252:
        -: 2253:#ifndef _LIBCPP_CXX03_LANG
        -: 2254:    vector(initializer_list<value_type> __il);
        -: 2255:    vector(initializer_list<value_type> __il, const allocator_type& __a);
        -: 2256:
        -: 2257:    _LIBCPP_INLINE_VISIBILITY
        -: 2258:    vector(vector&& __v)
        -: 2259:#if _LIBCPP_STD_VER > 14
        -: 2260:        _NOEXCEPT;
        -: 2261:#else
        -: 2262:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -: 2263:#endif
        -: 2264:    vector(vector&& __v, const allocator_type& __a);
        -: 2265:    _LIBCPP_INLINE_VISIBILITY
        -: 2266:    vector& operator=(vector&& __v)
        -: 2267:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));
        -: 2268:
        -: 2269:    _LIBCPP_INLINE_VISIBILITY
        -: 2270:    vector& operator=(initializer_list<value_type> __il)
        -: 2271:        {assign(__il.begin(), __il.end()); return *this;}
        -: 2272:
        -: 2273:#endif  // !_LIBCPP_CXX03_LANG
        -: 2274:
        -: 2275:    template <class _InputIterator>
        -: 2276:        typename enable_if
        -: 2277:        <
        -: 2278:            __is_cpp17_input_iterator<_InputIterator>::value &&
        -: 2279:           !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 2280:           void
        -: 2281:        >::type
        -: 2282:        assign(_InputIterator __first, _InputIterator __last);
        -: 2283:    template <class _ForwardIterator>
        -: 2284:        typename enable_if
        -: 2285:        <
        -: 2286:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2287:           void
        -: 2288:        >::type
        -: 2289:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 2290:
        -: 2291:    void assign(size_type __n, const value_type& __x);
        -: 2292:
        -: 2293:#ifndef _LIBCPP_CXX03_LANG
        -: 2294:    _LIBCPP_INLINE_VISIBILITY
        -: 2295:    void assign(initializer_list<value_type> __il)
        -: 2296:        {assign(__il.begin(), __il.end());}
        -: 2297:#endif
        -: 2298:
        -: 2299:    _LIBCPP_INLINE_VISIBILITY allocator_type get_allocator() const _NOEXCEPT
        -: 2300:        {return allocator_type(this->__alloc());}
        -: 2301:
        -: 2302:    size_type max_size() const _NOEXCEPT;
        -: 2303:    _LIBCPP_INLINE_VISIBILITY
        -: 2304:    size_type capacity() const _NOEXCEPT
        -: 2305:        {return __internal_cap_to_external(__cap());}
        -: 2306:    _LIBCPP_INLINE_VISIBILITY
        -: 2307:    size_type size() const _NOEXCEPT
        -: 2308:        {return __size_;}
        -: 2309:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 2310:    bool empty() const _NOEXCEPT
        -: 2311:        {return __size_ == 0;}
        -: 2312:    void reserve(size_type __n);
        -: 2313:    void shrink_to_fit() _NOEXCEPT;
        -: 2314:
        -: 2315:    _LIBCPP_INLINE_VISIBILITY
        -: 2316:    iterator begin() _NOEXCEPT
        -: 2317:        {return __make_iter(0);}
        -: 2318:    _LIBCPP_INLINE_VISIBILITY
        -: 2319:    const_iterator begin() const _NOEXCEPT
        -: 2320:        {return __make_iter(0);}
        -: 2321:    _LIBCPP_INLINE_VISIBILITY
        -: 2322:    iterator end() _NOEXCEPT
        -: 2323:        {return __make_iter(__size_);}
        -: 2324:    _LIBCPP_INLINE_VISIBILITY
        -: 2325:    const_iterator end()   const _NOEXCEPT
        -: 2326:        {return __make_iter(__size_);}
        -: 2327:
        -: 2328:    _LIBCPP_INLINE_VISIBILITY
        -: 2329:    reverse_iterator rbegin() _NOEXCEPT
        -: 2330:        {return       reverse_iterator(end());}
        -: 2331:    _LIBCPP_INLINE_VISIBILITY
        -: 2332:    const_reverse_iterator rbegin() const _NOEXCEPT
        -: 2333:        {return const_reverse_iterator(end());}
        -: 2334:    _LIBCPP_INLINE_VISIBILITY
        -: 2335:    reverse_iterator rend() _NOEXCEPT
        -: 2336:        {return       reverse_iterator(begin());}
        -: 2337:    _LIBCPP_INLINE_VISIBILITY
        -: 2338:    const_reverse_iterator rend()   const _NOEXCEPT
        -: 2339:        {return const_reverse_iterator(begin());}
        -: 2340:
        -: 2341:    _LIBCPP_INLINE_VISIBILITY
        -: 2342:    const_iterator         cbegin()  const _NOEXCEPT
        -: 2343:        {return __make_iter(0);}
        -: 2344:    _LIBCPP_INLINE_VISIBILITY
        -: 2345:    const_iterator         cend()    const _NOEXCEPT
        -: 2346:        {return __make_iter(__size_);}
        -: 2347:    _LIBCPP_INLINE_VISIBILITY
        -: 2348:    const_reverse_iterator crbegin() const _NOEXCEPT
        -: 2349:        {return rbegin();}
        -: 2350:    _LIBCPP_INLINE_VISIBILITY
        -: 2351:    const_reverse_iterator crend()   const _NOEXCEPT
        -: 2352:        {return rend();}
        -: 2353:
        -: 2354:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n)       {return __make_ref(__n);}
        -: 2355:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const {return __make_ref(__n);}
        -: 2356:    reference       at(size_type __n);
        -: 2357:    const_reference at(size_type __n) const;
        -: 2358:
        -: 2359:    _LIBCPP_INLINE_VISIBILITY reference       front()       {return __make_ref(0);}
        -: 2360:    _LIBCPP_INLINE_VISIBILITY const_reference front() const {return __make_ref(0);}
        -: 2361:    _LIBCPP_INLINE_VISIBILITY reference       back()        {return __make_ref(__size_ - 1);}
        -: 2362:    _LIBCPP_INLINE_VISIBILITY const_reference back()  const {return __make_ref(__size_ - 1);}
        -: 2363:
        -: 2364:    void push_back(const value_type& __x);
        -: 2365:#if _LIBCPP_STD_VER > 11
        -: 2366:    template <class... _Args>
        -: 2367:#if _LIBCPP_STD_VER > 14
        -: 2368:    _LIBCPP_INLINE_VISIBILITY reference emplace_back(_Args&&... __args)
        -: 2369:#else
        -: 2370:    _LIBCPP_INLINE_VISIBILITY void      emplace_back(_Args&&... __args)
        -: 2371:#endif
        -: 2372:    {
        -: 2373:        push_back ( value_type ( _VSTD::forward<_Args>(__args)... ));
        -: 2374:#if _LIBCPP_STD_VER > 14
        -: 2375:        return this->back();
        -: 2376:#endif
        -: 2377:    }
        -: 2378:#endif
        -: 2379:
        -: 2380:    _LIBCPP_INLINE_VISIBILITY void pop_back() {--__size_;}
        -: 2381:
        -: 2382:#if _LIBCPP_STD_VER > 11
        -: 2383:    template <class... _Args>
        -: 2384:   _LIBCPP_INLINE_VISIBILITY iterator emplace(const_iterator position, _Args&&... __args)
        -: 2385:        { return insert ( position, value_type ( _VSTD::forward<_Args>(__args)... )); }
        -: 2386:#endif
        -: 2387:
        -: 2388:    iterator insert(const_iterator __position, const value_type& __x);
        -: 2389:    iterator insert(const_iterator __position, size_type __n, const value_type& __x);
        -: 2390:    iterator insert(const_iterator __position, size_type __n, const_reference __x);
        -: 2391:    template <class _InputIterator>
        -: 2392:        typename enable_if
        -: 2393:        <
        -: 2394:             __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2395:            !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 2396:            iterator
        -: 2397:        >::type
        -: 2398:        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
        -: 2399:    template <class _ForwardIterator>
        -: 2400:        typename enable_if
        -: 2401:        <
        -: 2402:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2403:            iterator
        -: 2404:        >::type
        -: 2405:        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
        -: 2406:
        -: 2407:#ifndef _LIBCPP_CXX03_LANG
        -: 2408:    _LIBCPP_INLINE_VISIBILITY
        -: 2409:    iterator insert(const_iterator __position, initializer_list<value_type> __il)
        -: 2410:        {return insert(__position, __il.begin(), __il.end());}
        -: 2411:#endif
        -: 2412:
        -: 2413:    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);
        -: 2414:    iterator erase(const_iterator __first, const_iterator __last);
        -: 2415:
        -: 2416:    _LIBCPP_INLINE_VISIBILITY
        -: 2417:    void clear() _NOEXCEPT {__size_ = 0;}
        -: 2418:
        -: 2419:    void swap(vector&)
        -: 2420:#if _LIBCPP_STD_VER >= 14
        -: 2421:        _NOEXCEPT;
        -: 2422:#else
        -: 2423:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 2424:                    __is_nothrow_swappable<allocator_type>::value);
        -: 2425:#endif
        -: 2426:    static void swap(reference __x, reference __y) _NOEXCEPT { _VSTD::swap(__x, __y); }
        -: 2427:
        -: 2428:    void resize(size_type __sz, value_type __x = false);
        -: 2429:    void flip() _NOEXCEPT;
        -: 2430:
        -: 2431:    bool __invariants() const;
        -: 2432:
        -: 2433:private:
        -: 2434:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -: 2435:    void __vallocate(size_type __n);
        -: 2436:    void __vdeallocate() _NOEXCEPT;
        -: 2437:    _LIBCPP_INLINE_VISIBILITY
        -: 2438:    static size_type __align_it(size_type __new_size) _NOEXCEPT
        -: 2439:        {return __new_size + (__bits_per_word-1) & ~((size_type)__bits_per_word-1);}
        -: 2440:    _LIBCPP_INLINE_VISIBILITY  size_type __recommend(size_type __new_size) const;
        -: 2441:    _LIBCPP_INLINE_VISIBILITY void __construct_at_end(size_type __n, bool __x);
        -: 2442:    template <class _ForwardIterator>
        -: 2443:        typename enable_if
        -: 2444:        <
        -: 2445:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2446:            void
        -: 2447:        >::type
        -: 2448:        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);
        -: 2449:    void __append(size_type __n, const_reference __x);
        -: 2450:    _LIBCPP_INLINE_VISIBILITY
        -: 2451:    reference __make_ref(size_type __pos) _NOEXCEPT
        -: 2452:        {return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}
        -: 2453:    _LIBCPP_INLINE_VISIBILITY
        -: 2454:    const_reference __make_ref(size_type __pos) const _NOEXCEPT
        -: 2455:        {return const_reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}
        -: 2456:    _LIBCPP_INLINE_VISIBILITY
        -: 2457:    iterator __make_iter(size_type __pos) _NOEXCEPT
        -: 2458:        {return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}
        -: 2459:    _LIBCPP_INLINE_VISIBILITY
        -: 2460:    const_iterator __make_iter(size_type __pos) const _NOEXCEPT
        -: 2461:        {return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}
        -: 2462:    _LIBCPP_INLINE_VISIBILITY
        -: 2463:    iterator __const_iterator_cast(const_iterator __p) _NOEXCEPT
        -: 2464:        {return begin() + (__p - cbegin());}
        -: 2465:
        -: 2466:    _LIBCPP_INLINE_VISIBILITY
        -: 2467:    void __copy_assign_alloc(const vector& __v)
        -: 2468:        {__copy_assign_alloc(__v, integral_constant<bool,
        -: 2469:                      __storage_traits::propagate_on_container_copy_assignment::value>());}
        -: 2470:    _LIBCPP_INLINE_VISIBILITY
        -: 2471:    void __copy_assign_alloc(const vector& __c, true_type)
        -: 2472:        {
        -: 2473:            if (__alloc() != __c.__alloc())
        -: 2474:                __vdeallocate();
        -: 2475:            __alloc() = __c.__alloc();
        -: 2476:        }
        -: 2477:
        -: 2478:    _LIBCPP_INLINE_VISIBILITY
        -: 2479:    void __copy_assign_alloc(const vector&, false_type)
        -: 2480:        {}
        -: 2481:
        -: 2482:    void __move_assign(vector& __c, false_type);
        -: 2483:    void __move_assign(vector& __c, true_type)
        -: 2484:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -: 2485:    _LIBCPP_INLINE_VISIBILITY
        -: 2486:    void __move_assign_alloc(vector& __c)
        -: 2487:        _NOEXCEPT_(
        -: 2488:            !__storage_traits::propagate_on_container_move_assignment::value ||
        -: 2489:            is_nothrow_move_assignable<allocator_type>::value)
        -: 2490:        {__move_assign_alloc(__c, integral_constant<bool,
        -: 2491:                      __storage_traits::propagate_on_container_move_assignment::value>());}
        -: 2492:    _LIBCPP_INLINE_VISIBILITY
        -: 2493:    void __move_assign_alloc(vector& __c, true_type)
        -: 2494:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2495:        {
        -: 2496:            __alloc() = _VSTD::move(__c.__alloc());
        -: 2497:        }
        -: 2498:
        -: 2499:    _LIBCPP_INLINE_VISIBILITY
        -: 2500:    void __move_assign_alloc(vector&, false_type)
        -: 2501:        _NOEXCEPT
        -: 2502:        {}
        -: 2503:
        -: 2504:    size_t __hash_code() const _NOEXCEPT;
        -: 2505:
        -: 2506:    friend class __bit_reference<vector>;
        -: 2507:    friend class __bit_const_reference<vector>;
        -: 2508:    friend class __bit_iterator<vector, false>;
        -: 2509:    friend class __bit_iterator<vector, true>;
        -: 2510:    friend struct __bit_array<vector>;
        -: 2511:    friend struct _LIBCPP_TEMPLATE_VIS hash<vector>;
        -: 2512:};
        -: 2513:
        -: 2514:template <class _Allocator>
        -: 2515:inline _LIBCPP_INLINE_VISIBILITY
        -: 2516:void
        -: 2517:vector<bool, _Allocator>::__invalidate_all_iterators()
        -: 2518:{
        -: 2519:}
        -: 2520:
        -: 2521://  Allocate space for __n objects
        -: 2522://  throws length_error if __n > max_size()
        -: 2523://  throws (probably bad_alloc) if memory run out
        -: 2524://  Precondition:  __begin_ == __end_ == __cap() == 0
        -: 2525://  Precondition:  __n > 0
        -: 2526://  Postcondition:  capacity() == __n
        -: 2527://  Postcondition:  size() == 0
        -: 2528:template <class _Allocator>
        -: 2529:void
        -: 2530:vector<bool, _Allocator>::__vallocate(size_type __n)
        -: 2531:{
        -: 2532:    if (__n > max_size())
        -: 2533:        this->__throw_length_error();
        -: 2534:    __n = __external_cap_to_internal(__n);
        -: 2535:    this->__begin_ = __storage_traits::allocate(this->__alloc(), __n);
        -: 2536:    this->__size_ = 0;
        -: 2537:    this->__cap() = __n;
        -: 2538:}
        -: 2539:
        -: 2540:template <class _Allocator>
        -: 2541:void
        -: 2542:vector<bool, _Allocator>::__vdeallocate() _NOEXCEPT
        -: 2543:{
        -: 2544:    if (this->__begin_ != nullptr)
        -: 2545:    {
        -: 2546:        __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());
        -: 2547:        __invalidate_all_iterators();
        -: 2548:        this->__begin_ = nullptr;
        -: 2549:        this->__size_ = this->__cap() = 0;
        -: 2550:    }
        -: 2551:}
        -: 2552:
        -: 2553:template <class _Allocator>
        -: 2554:typename vector<bool, _Allocator>::size_type
        -: 2555:vector<bool, _Allocator>::max_size() const _NOEXCEPT
        -: 2556:{
        -: 2557:    size_type __amax = __storage_traits::max_size(__alloc());
        -: 2558:    size_type __nmax = numeric_limits<size_type>::max() / 2;  // end() >= begin(), always
        -: 2559:    if (__nmax / __bits_per_word <= __amax)
        -: 2560:        return __nmax;
        -: 2561:    return __internal_cap_to_external(__amax);
        -: 2562:}
        -: 2563:
        -: 2564://  Precondition:  __new_size > capacity()
        -: 2565:template <class _Allocator>
        -: 2566:inline _LIBCPP_INLINE_VISIBILITY
        -: 2567:typename vector<bool, _Allocator>::size_type
        -: 2568:vector<bool, _Allocator>::__recommend(size_type __new_size) const
        -: 2569:{
        -: 2570:    const size_type __ms = max_size();
        -: 2571:    if (__new_size > __ms)
        -: 2572:        this->__throw_length_error();
        -: 2573:    const size_type __cap = capacity();
        -: 2574:    if (__cap >= __ms / 2)
        -: 2575:        return __ms;
        -: 2576:    return _VSTD::max(2*__cap, __align_it(__new_size));
        -: 2577:}
        -: 2578:
        -: 2579://  Default constructs __n objects starting at __end_
        -: 2580://  Precondition:  __n > 0
        -: 2581://  Precondition:  size() + __n <= capacity()
        -: 2582://  Postcondition:  size() == size() + __n
        -: 2583:template <class _Allocator>
        -: 2584:inline _LIBCPP_INLINE_VISIBILITY
        -: 2585:void
        -: 2586:vector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x)
        -: 2587:{
        -: 2588:    size_type __old_size = this->__size_;
        -: 2589:    this->__size_ += __n;
        -: 2590:    if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word))
        -: 2591:    {
        -: 2592:        if (this->__size_ <= __bits_per_word)
        -: 2593:            this->__begin_[0] = __storage_type(0);
        -: 2594:        else
        -: 2595:            this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
        -: 2596:    }
        -: 2597:    _VSTD::fill_n(__make_iter(__old_size), __n, __x);
        -: 2598:}
        -: 2599:
        -: 2600:template <class _Allocator>
        -: 2601:template <class _ForwardIterator>
        -: 2602:typename enable_if
        -: 2603:<
        -: 2604:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2605:    void
        -: 2606:>::type
        -: 2607:vector<bool, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last)
        -: 2608:{
        -: 2609:    size_type __old_size = this->__size_;
        -: 2610:    this->__size_ += _VSTD::distance(__first, __last);
        -: 2611:    if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word))
        -: 2612:    {
        -: 2613:        if (this->__size_ <= __bits_per_word)
        -: 2614:            this->__begin_[0] = __storage_type(0);
        -: 2615:        else
        -: 2616:            this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
        -: 2617:    }
        -: 2618:    _VSTD::copy(__first, __last, __make_iter(__old_size));
        -: 2619:}
        -: 2620:
        -: 2621:template <class _Allocator>
        -: 2622:inline _LIBCPP_INLINE_VISIBILITY
        -: 2623:vector<bool, _Allocator>::vector()
        -: 2624:    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
        -: 2625:    : __begin_(nullptr),
        -: 2626:      __size_(0),
        -: 2627:      __cap_alloc_(0, __default_init_tag())
        -: 2628:{
        -: 2629:}
        -: 2630:
        -: 2631:template <class _Allocator>
        -: 2632:inline _LIBCPP_INLINE_VISIBILITY
        -: 2633:vector<bool, _Allocator>::vector(const allocator_type& __a)
        -: 2634:#if _LIBCPP_STD_VER <= 14
        -: 2635:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -: 2636:#else
        -: 2637:        _NOEXCEPT
        -: 2638:#endif
        -: 2639:    : __begin_(nullptr),
        -: 2640:      __size_(0),
        -: 2641:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2642:{
        -: 2643:}
        -: 2644:
        -: 2645:template <class _Allocator>
        -: 2646:vector<bool, _Allocator>::vector(size_type __n)
        -: 2647:    : __begin_(nullptr),
        -: 2648:      __size_(0),
        -: 2649:      __cap_alloc_(0, __default_init_tag())
        -: 2650:{
        -: 2651:    if (__n > 0)
        -: 2652:    {
        -: 2653:        __vallocate(__n);
        -: 2654:        __construct_at_end(__n, false);
        -: 2655:    }
        -: 2656:}
        -: 2657:
        -: 2658:#if _LIBCPP_STD_VER > 11
        -: 2659:template <class _Allocator>
        -: 2660:vector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)
        -: 2661:    : __begin_(nullptr),
        -: 2662:      __size_(0),
        -: 2663:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2664:{
        -: 2665:    if (__n > 0)
        -: 2666:    {
        -: 2667:        __vallocate(__n);
        -: 2668:        __construct_at_end(__n, false);
        -: 2669:    }
        -: 2670:}
        -: 2671:#endif
        -: 2672:
        -: 2673:template <class _Allocator>
        -: 2674:vector<bool, _Allocator>::vector(size_type __n, const value_type& __x)
        -: 2675:    : __begin_(nullptr),
        -: 2676:      __size_(0),
        -: 2677:      __cap_alloc_(0, __default_init_tag())
        -: 2678:{
        -: 2679:    if (__n > 0)
        -: 2680:    {
        -: 2681:        __vallocate(__n);
        -: 2682:        __construct_at_end(__n, __x);
        -: 2683:    }
        -: 2684:}
        -: 2685:
        -: 2686:template <class _Allocator>
        -: 2687:vector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
        -: 2688:    : __begin_(nullptr),
        -: 2689:      __size_(0),
        -: 2690:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2691:{
        -: 2692:    if (__n > 0)
        -: 2693:    {
        -: 2694:        __vallocate(__n);
        -: 2695:        __construct_at_end(__n, __x);
        -: 2696:    }
        -: 2697:}
        -: 2698:
        -: 2699:template <class _Allocator>
        -: 2700:template <class _InputIterator>
        -: 2701:vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last,
        -: 2702:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2703:                         !__is_cpp17_forward_iterator<_InputIterator>::value>::type*)
        -: 2704:    : __begin_(nullptr),
        -: 2705:      __size_(0),
        -: 2706:      __cap_alloc_(0, __default_init_tag())
        -: 2707:{
        -: 2708:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2709:    try
        -: 2710:    {
        -: 2711:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2712:        for (; __first != __last; ++__first)
        -: 2713:            push_back(*__first);
        -: 2714:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2715:    }
        -: 2716:    catch (...)
        -: 2717:    {
        -: 2718:        if (__begin_ != nullptr)
        -: 2719:            __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2720:        __invalidate_all_iterators();
        -: 2721:        throw;
        -: 2722:    }
        -: 2723:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2724:}
        -: 2725:
        -: 2726:template <class _Allocator>
        -: 2727:template <class _InputIterator>
        -: 2728:vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 2729:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2730:                         !__is_cpp17_forward_iterator<_InputIterator>::value>::type*)
        -: 2731:    : __begin_(nullptr),
        -: 2732:      __size_(0),
        -: 2733:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2734:{
        -: 2735:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2736:    try
        -: 2737:    {
        -: 2738:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2739:        for (; __first != __last; ++__first)
        -: 2740:            push_back(*__first);
        -: 2741:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2742:    }
        -: 2743:    catch (...)
        -: 2744:    {
        -: 2745:        if (__begin_ != nullptr)
        -: 2746:            __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2747:        __invalidate_all_iterators();
        -: 2748:        throw;
        -: 2749:    }
        -: 2750:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2751:}
        -: 2752:
        -: 2753:template <class _Allocator>
        -: 2754:template <class _ForwardIterator>
        -: 2755:vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last,
        -: 2756:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type*)
        -: 2757:    : __begin_(nullptr),
        -: 2758:      __size_(0),
        -: 2759:      __cap_alloc_(0, __default_init_tag())
        -: 2760:{
        -: 2761:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2762:    if (__n > 0)
        -: 2763:    {
        -: 2764:        __vallocate(__n);
        -: 2765:        __construct_at_end(__first, __last);
        -: 2766:    }
        -: 2767:}
        -: 2768:
        -: 2769:template <class _Allocator>
        -: 2770:template <class _ForwardIterator>
        -: 2771:vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 2772:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type*)
        -: 2773:    : __begin_(nullptr),
        -: 2774:      __size_(0),
        -: 2775:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2776:{
        -: 2777:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2778:    if (__n > 0)
        -: 2779:    {
        -: 2780:        __vallocate(__n);
        -: 2781:        __construct_at_end(__first, __last);
        -: 2782:    }
        -: 2783:}
        -: 2784:
        -: 2785:#ifndef _LIBCPP_CXX03_LANG
        -: 2786:
        -: 2787:template <class _Allocator>
        -: 2788:vector<bool, _Allocator>::vector(initializer_list<value_type> __il)
        -: 2789:    : __begin_(nullptr),
        -: 2790:      __size_(0),
        -: 2791:      __cap_alloc_(0, __default_init_tag())
        -: 2792:{
        -: 2793:    size_type __n = static_cast<size_type>(__il.size());
        -: 2794:    if (__n > 0)
        -: 2795:    {
        -: 2796:        __vallocate(__n);
        -: 2797:        __construct_at_end(__il.begin(), __il.end());
        -: 2798:    }
        -: 2799:}
        -: 2800:
        -: 2801:template <class _Allocator>
        -: 2802:vector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
        -: 2803:    : __begin_(nullptr),
        -: 2804:      __size_(0),
        -: 2805:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2806:{
        -: 2807:    size_type __n = static_cast<size_type>(__il.size());
        -: 2808:    if (__n > 0)
        -: 2809:    {
        -: 2810:        __vallocate(__n);
        -: 2811:        __construct_at_end(__il.begin(), __il.end());
        -: 2812:    }
        -: 2813:}
        -: 2814:
        -: 2815:#endif  // _LIBCPP_CXX03_LANG
        -: 2816:
        -: 2817:template <class _Allocator>
        -: 2818:vector<bool, _Allocator>::~vector()
        -: 2819:{
        -: 2820:    if (__begin_ != nullptr)
        -: 2821:        __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2822:    __invalidate_all_iterators();
        -: 2823:}
        -: 2824:
        -: 2825:template <class _Allocator>
        -: 2826:vector<bool, _Allocator>::vector(const vector& __v)
        -: 2827:    : __begin_(nullptr),
        -: 2828:      __size_(0),
        -: 2829:      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc()))
        -: 2830:{
        -: 2831:    if (__v.size() > 0)
        -: 2832:    {
        -: 2833:        __vallocate(__v.size());
        -: 2834:        __construct_at_end(__v.begin(), __v.end());
        -: 2835:    }
        -: 2836:}
        -: 2837:
        -: 2838:template <class _Allocator>
        -: 2839:vector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)
        -: 2840:    : __begin_(nullptr),
        -: 2841:      __size_(0),
        -: 2842:      __cap_alloc_(0, __a)
        -: 2843:{
        -: 2844:    if (__v.size() > 0)
        -: 2845:    {
        -: 2846:        __vallocate(__v.size());
        -: 2847:        __construct_at_end(__v.begin(), __v.end());
        -: 2848:    }
        -: 2849:}
        -: 2850:
        -: 2851:template <class _Allocator>
        -: 2852:vector<bool, _Allocator>&
        -: 2853:vector<bool, _Allocator>::operator=(const vector& __v)
        -: 2854:{
        -: 2855:    if (this != &__v)
        -: 2856:    {
        -: 2857:        __copy_assign_alloc(__v);
        -: 2858:        if (__v.__size_)
        -: 2859:        {
        -: 2860:            if (__v.__size_ > capacity())
        -: 2861:            {
        -: 2862:                __vdeallocate();
        -: 2863:                __vallocate(__v.__size_);
        -: 2864:            }
        -: 2865:            _VSTD::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);
        -: 2866:        }
        -: 2867:        __size_ = __v.__size_;
        -: 2868:    }
        -: 2869:    return *this;
        -: 2870:}
        -: 2871:
        -: 2872:#ifndef _LIBCPP_CXX03_LANG
        -: 2873:
        -: 2874:template <class _Allocator>
        -: 2875:inline _LIBCPP_INLINE_VISIBILITY vector<bool, _Allocator>::vector(vector&& __v)
        -: 2876:#if _LIBCPP_STD_VER > 14
        -: 2877:    _NOEXCEPT
        -: 2878:#else
        -: 2879:    _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 2880:#endif
        -: 2881:    : __begin_(__v.__begin_),
        -: 2882:      __size_(__v.__size_),
        -: 2883:      __cap_alloc_(_VSTD::move(__v.__cap_alloc_)) {
        -: 2884:    __v.__begin_ = nullptr;
        -: 2885:    __v.__size_ = 0;
        -: 2886:    __v.__cap() = 0;
        -: 2887:}
        -: 2888:
        -: 2889:template <class _Allocator>
        -: 2890:vector<bool, _Allocator>::vector(vector&& __v, const allocator_type& __a)
        -: 2891:    : __begin_(nullptr),
        -: 2892:      __size_(0),
        -: 2893:      __cap_alloc_(0, __a)
        -: 2894:{
        -: 2895:    if (__a == allocator_type(__v.__alloc()))
        -: 2896:    {
        -: 2897:        this->__begin_ = __v.__begin_;
        -: 2898:        this->__size_ = __v.__size_;
        -: 2899:        this->__cap() = __v.__cap();
        -: 2900:        __v.__begin_ = nullptr;
        -: 2901:        __v.__cap() = __v.__size_ = 0;
        -: 2902:    }
        -: 2903:    else if (__v.size() > 0)
        -: 2904:    {
        -: 2905:        __vallocate(__v.size());
        -: 2906:        __construct_at_end(__v.begin(), __v.end());
        -: 2907:    }
        -: 2908:}
        -: 2909:
        -: 2910:template <class _Allocator>
        -: 2911:inline _LIBCPP_INLINE_VISIBILITY
        -: 2912:vector<bool, _Allocator>&
        -: 2913:vector<bool, _Allocator>::operator=(vector&& __v)
        -: 2914:    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 2915:{
        -: 2916:    __move_assign(__v, integral_constant<bool,
        -: 2917:          __storage_traits::propagate_on_container_move_assignment::value>());
        -: 2918:    return *this;
        -: 2919:}
        -: 2920:
        -: 2921:template <class _Allocator>
        -: 2922:void
        -: 2923:vector<bool, _Allocator>::__move_assign(vector& __c, false_type)
        -: 2924:{
        -: 2925:    if (__alloc() != __c.__alloc())
        -: 2926:        assign(__c.begin(), __c.end());
        -: 2927:    else
        -: 2928:        __move_assign(__c, true_type());
        -: 2929:}
        -: 2930:
        -: 2931:template <class _Allocator>
        -: 2932:void
        -: 2933:vector<bool, _Allocator>::__move_assign(vector& __c, true_type)
        -: 2934:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2935:{
        -: 2936:    __vdeallocate();
        -: 2937:    __move_assign_alloc(__c);
        -: 2938:    this->__begin_ = __c.__begin_;
        -: 2939:    this->__size_ = __c.__size_;
        -: 2940:    this->__cap() = __c.__cap();
        -: 2941:    __c.__begin_ = nullptr;
        -: 2942:    __c.__cap() = __c.__size_ = 0;
        -: 2943:}
        -: 2944:
        -: 2945:#endif  // !_LIBCPP_CXX03_LANG
        -: 2946:
        -: 2947:template <class _Allocator>
        -: 2948:void
        -: 2949:vector<bool, _Allocator>::assign(size_type __n, const value_type& __x)
        -: 2950:{
        -: 2951:    __size_ = 0;
        -: 2952:    if (__n > 0)
        -: 2953:    {
        -: 2954:        size_type __c = capacity();
        -: 2955:        if (__n <= __c)
        -: 2956:            __size_ = __n;
        -: 2957:        else
        -: 2958:        {
        -: 2959:            vector __v(__alloc());
        -: 2960:            __v.reserve(__recommend(__n));
        -: 2961:            __v.__size_ = __n;
        -: 2962:            swap(__v);
        -: 2963:        }
        -: 2964:        _VSTD::fill_n(begin(), __n, __x);
        -: 2965:    }
        -: 2966:  __invalidate_all_iterators();
        -: 2967:}
        -: 2968:
        -: 2969:template <class _Allocator>
        -: 2970:template <class _InputIterator>
        -: 2971:typename enable_if
        -: 2972:<
        -: 2973:    __is_cpp17_input_iterator<_InputIterator>::value &&
        -: 2974:   !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 2975:   void
        -: 2976:>::type
        -: 2977:vector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 2978:{
        -: 2979:    clear();
        -: 2980:    for (; __first != __last; ++__first)
        -: 2981:        push_back(*__first);
        -: 2982:}
        -: 2983:
        -: 2984:template <class _Allocator>
        -: 2985:template <class _ForwardIterator>
        -: 2986:typename enable_if
        -: 2987:<
        -: 2988:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2989:   void
        -: 2990:>::type
        -: 2991:vector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 2992:{
        -: 2993:    clear();
        -: 2994:    difference_type __ns = _VSTD::distance(__first, __last);
        -: 2995:    _LIBCPP_ASSERT(__ns >= 0, "invalid range specified");
        -: 2996:    const size_t __n = static_cast<size_type>(__ns);
        -: 2997:    if (__n)
        -: 2998:    {
        -: 2999:        if (__n > capacity())
        -: 3000:        {
        -: 3001:            __vdeallocate();
        -: 3002:            __vallocate(__n);
        -: 3003:        }
        -: 3004:        __construct_at_end(__first, __last);
        -: 3005:    }
        -: 3006:}
        -: 3007:
        -: 3008:template <class _Allocator>
        -: 3009:void
        -: 3010:vector<bool, _Allocator>::reserve(size_type __n)
        -: 3011:{
        -: 3012:    if (__n > capacity())
        -: 3013:    {
        -: 3014:        vector __v(this->__alloc());
        -: 3015:        __v.__vallocate(__n);
        -: 3016:        __v.__construct_at_end(this->begin(), this->end());
        -: 3017:        swap(__v);
        -: 3018:        __invalidate_all_iterators();
        -: 3019:    }
        -: 3020:}
        -: 3021:
        -: 3022:template <class _Allocator>
        -: 3023:void
        -: 3024:vector<bool, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 3025:{
        -: 3026:    if (__external_cap_to_internal(size()) > __cap())
        -: 3027:    {
        -: 3028:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3029:        try
        -: 3030:        {
        -: 3031:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3032:            vector(*this, allocator_type(__alloc())).swap(*this);
        -: 3033:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3034:        }
        -: 3035:        catch (...)
        -: 3036:        {
        -: 3037:        }
        -: 3038:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3039:    }
        -: 3040:}
        -: 3041:
        -: 3042:template <class _Allocator>
        -: 3043:typename vector<bool, _Allocator>::reference
        -: 3044:vector<bool, _Allocator>::at(size_type __n)
        -: 3045:{
        -: 3046:    if (__n >= size())
        -: 3047:        this->__throw_out_of_range();
        -: 3048:    return (*this)[__n];
        -: 3049:}
        -: 3050:
        -: 3051:template <class _Allocator>
        -: 3052:typename vector<bool, _Allocator>::const_reference
        -: 3053:vector<bool, _Allocator>::at(size_type __n) const
        -: 3054:{
        -: 3055:    if (__n >= size())
        -: 3056:        this->__throw_out_of_range();
        -: 3057:    return (*this)[__n];
        -: 3058:}
        -: 3059:
        -: 3060:template <class _Allocator>
        -: 3061:void
        -: 3062:vector<bool, _Allocator>::push_back(const value_type& __x)
        -: 3063:{
        -: 3064:    if (this->__size_ == this->capacity())
        -: 3065:        reserve(__recommend(this->__size_ + 1));
        -: 3066:    ++this->__size_;
        -: 3067:    back() = __x;
        -: 3068:}
        -: 3069:
        -: 3070:template <class _Allocator>
        -: 3071:typename vector<bool, _Allocator>::iterator
        -: 3072:vector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x)
        -: 3073:{
        -: 3074:    iterator __r;
        -: 3075:    if (size() < capacity())
        -: 3076:    {
        -: 3077:        const_iterator __old_end = end();
        -: 3078:        ++__size_;
        -: 3079:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3080:        __r = __const_iterator_cast(__position);
        -: 3081:    }
        -: 3082:    else
        -: 3083:    {
        -: 3084:        vector __v(__alloc());
        -: 3085:        __v.reserve(__recommend(__size_ + 1));
        -: 3086:        __v.__size_ = __size_ + 1;
        -: 3087:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3088:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3089:        swap(__v);
        -: 3090:    }
        -: 3091:    *__r = __x;
        -: 3092:    return __r;
        -: 3093:}
        -: 3094:
        -: 3095:template <class _Allocator>
        -: 3096:typename vector<bool, _Allocator>::iterator
        -: 3097:vector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x)
        -: 3098:{
        -: 3099:    iterator __r;
        -: 3100:    size_type __c = capacity();
        -: 3101:    if (__n <= __c && size() <= __c - __n)
        -: 3102:    {
        -: 3103:        const_iterator __old_end = end();
        -: 3104:        __size_ += __n;
        -: 3105:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3106:        __r = __const_iterator_cast(__position);
        -: 3107:    }
        -: 3108:    else
        -: 3109:    {
        -: 3110:        vector __v(__alloc());
        -: 3111:        __v.reserve(__recommend(__size_ + __n));
        -: 3112:        __v.__size_ = __size_ + __n;
        -: 3113:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3114:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3115:        swap(__v);
        -: 3116:    }
        -: 3117:    _VSTD::fill_n(__r, __n, __x);
        -: 3118:    return __r;
        -: 3119:}
        -: 3120:
        -: 3121:template <class _Allocator>
        -: 3122:template <class _InputIterator>
        -: 3123:typename enable_if
        -: 3124:<
        -: 3125:     __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 3126:    !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 3127:    typename vector<bool, _Allocator>::iterator
        -: 3128:>::type
        -: 3129:vector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
        -: 3130:{
        -: 3131:    difference_type __off = __position - begin();
        -: 3132:    iterator __p = __const_iterator_cast(__position);
        -: 3133:    iterator __old_end = end();
        -: 3134:    for (; size() != capacity() && __first != __last; ++__first)
        -: 3135:    {
        -: 3136:        ++this->__size_;
        -: 3137:        back() = *__first;
        -: 3138:    }
        -: 3139:    vector __v(__alloc());
        -: 3140:    if (__first != __last)
        -: 3141:    {
        -: 3142:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3143:        try
        -: 3144:        {
        -: 3145:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3146:            __v.assign(__first, __last);
        -: 3147:            difference_type __old_size = static_cast<difference_type>(__old_end - begin());
        -: 3148:            difference_type __old_p = __p - begin();
        -: 3149:            reserve(__recommend(size() + __v.size()));
        -: 3150:            __p = begin() + __old_p;
        -: 3151:            __old_end = begin() + __old_size;
        -: 3152:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3153:        }
        -: 3154:        catch (...)
        -: 3155:        {
        -: 3156:            erase(__old_end, end());
        -: 3157:            throw;
        -: 3158:        }
        -: 3159:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3160:    }
        -: 3161:    __p = _VSTD::rotate(__p, __old_end, end());
        -: 3162:    insert(__p, __v.begin(), __v.end());
        -: 3163:    return begin() + __off;
        -: 3164:}
        -: 3165:
        -: 3166:template <class _Allocator>
        -: 3167:template <class _ForwardIterator>
        -: 3168:typename enable_if
        -: 3169:<
        -: 3170:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 3171:    typename vector<bool, _Allocator>::iterator
        -: 3172:>::type
        -: 3173:vector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)
        -: 3174:{
        -: 3175:    const difference_type __n_signed = _VSTD::distance(__first, __last);
        -: 3176:    _LIBCPP_ASSERT(__n_signed >= 0, "invalid range specified");
        -: 3177:    const size_type __n = static_cast<size_type>(__n_signed);
        -: 3178:    iterator __r;
        -: 3179:    size_type __c = capacity();
        -: 3180:    if (__n <= __c && size() <= __c - __n)
        -: 3181:    {
        -: 3182:        const_iterator __old_end = end();
        -: 3183:        __size_ += __n;
        -: 3184:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3185:        __r = __const_iterator_cast(__position);
        -: 3186:    }
        -: 3187:    else
        -: 3188:    {
        -: 3189:        vector __v(__alloc());
        -: 3190:        __v.reserve(__recommend(__size_ + __n));
        -: 3191:        __v.__size_ = __size_ + __n;
        -: 3192:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3193:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3194:        swap(__v);
        -: 3195:    }
        -: 3196:    _VSTD::copy(__first, __last, __r);
        -: 3197:    return __r;
        -: 3198:}
        -: 3199:
        -: 3200:template <class _Allocator>
        -: 3201:inline _LIBCPP_INLINE_VISIBILITY
        -: 3202:typename vector<bool, _Allocator>::iterator
        -: 3203:vector<bool, _Allocator>::erase(const_iterator __position)
        -: 3204:{
        -: 3205:    iterator __r = __const_iterator_cast(__position);
        -: 3206:    _VSTD::copy(__position + 1, this->cend(), __r);
        -: 3207:    --__size_;
        -: 3208:    return __r;
        -: 3209:}
        -: 3210:
        -: 3211:template <class _Allocator>
        -: 3212:typename vector<bool, _Allocator>::iterator
        -: 3213:vector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 3214:{
        -: 3215:    iterator __r = __const_iterator_cast(__first);
        -: 3216:    difference_type __d = __last - __first;
        -: 3217:    _VSTD::copy(__last, this->cend(), __r);
        -: 3218:    __size_ -= __d;
        -: 3219:    return __r;
        -: 3220:}
        -: 3221:
        -: 3222:template <class _Allocator>
        -: 3223:void
        -: 3224:vector<bool, _Allocator>::swap(vector& __x)
        -: 3225:#if _LIBCPP_STD_VER >= 14
        -: 3226:    _NOEXCEPT
        -: 3227:#else
        -: 3228:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 3229:                __is_nothrow_swappable<allocator_type>::value)
        -: 3230:#endif
        -: 3231:{
        -: 3232:    _VSTD::swap(this->__begin_, __x.__begin_);
        -: 3233:    _VSTD::swap(this->__size_, __x.__size_);
        -: 3234:    _VSTD::swap(this->__cap(), __x.__cap());
        -: 3235:    _VSTD::__swap_allocator(this->__alloc(), __x.__alloc(),
        -: 3236:        integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
        -: 3237:}
        -: 3238:
        -: 3239:template <class _Allocator>
        -: 3240:void
        -: 3241:vector<bool, _Allocator>::resize(size_type __sz, value_type __x)
        -: 3242:{
        -: 3243:    size_type __cs = size();
        -: 3244:    if (__cs < __sz)
        -: 3245:    {
        -: 3246:        iterator __r;
        -: 3247:        size_type __c = capacity();
        -: 3248:        size_type __n = __sz - __cs;
        -: 3249:        if (__n <= __c && __cs <= __c - __n)
        -: 3250:        {
        -: 3251:            __r = end();
        -: 3252:            __size_ += __n;
        -: 3253:        }
        -: 3254:        else
        -: 3255:        {
        -: 3256:            vector __v(__alloc());
        -: 3257:            __v.reserve(__recommend(__size_ + __n));
        -: 3258:            __v.__size_ = __size_ + __n;
        -: 3259:            __r = _VSTD::copy(cbegin(), cend(), __v.begin());
        -: 3260:            swap(__v);
        -: 3261:        }
        -: 3262:        _VSTD::fill_n(__r, __n, __x);
        -: 3263:    }
        -: 3264:    else
        -: 3265:        __size_ = __sz;
        -: 3266:}
        -: 3267:
        -: 3268:template <class _Allocator>
        -: 3269:void
        -: 3270:vector<bool, _Allocator>::flip() _NOEXCEPT
        -: 3271:{
        -: 3272:    // do middle whole words
        -: 3273:    size_type __n = __size_;
        -: 3274:    __storage_pointer __p = __begin_;
        -: 3275:    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
        -: 3276:        *__p = ~*__p;
        -: 3277:    // do last partial word
        -: 3278:    if (__n > 0)
        -: 3279:    {
        -: 3280:        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
        -: 3281:        __storage_type __b = *__p & __m;
        -: 3282:        *__p &= ~__m;
        -: 3283:        *__p |= ~__b & __m;
        -: 3284:    }
        -: 3285:}
        -: 3286:
        -: 3287:template <class _Allocator>
        -: 3288:bool
        -: 3289:vector<bool, _Allocator>::__invariants() const
        -: 3290:{
        -: 3291:    if (this->__begin_ == nullptr)
        -: 3292:    {
        -: 3293:        if (this->__size_ != 0 || this->__cap() != 0)
        -: 3294:            return false;
        -: 3295:    }
        -: 3296:    else
        -: 3297:    {
        -: 3298:        if (this->__cap() == 0)
        -: 3299:            return false;
        -: 3300:        if (this->__size_ > this->capacity())
        -: 3301:            return false;
        -: 3302:    }
        -: 3303:    return true;
        -: 3304:}
        -: 3305:
        -: 3306:template <class _Allocator>
        -: 3307:size_t
        -: 3308:vector<bool, _Allocator>::__hash_code() const _NOEXCEPT
        -: 3309:{
        -: 3310:    size_t __h = 0;
        -: 3311:    // do middle whole words
        -: 3312:    size_type __n = __size_;
        -: 3313:    __storage_pointer __p = __begin_;
        -: 3314:    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
        -: 3315:        __h ^= *__p;
        -: 3316:    // do last partial word
        -: 3317:    if (__n > 0)
        -: 3318:    {
        -: 3319:        const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
        -: 3320:        __h ^= *__p & __m;
        -: 3321:    }
        -: 3322:    return __h;
        -: 3323:}
        -: 3324:
        -: 3325:template <class _Allocator>
        -: 3326:struct _LIBCPP_TEMPLATE_VIS hash<vector<bool, _Allocator> >
        -: 3327:    : public unary_function<vector<bool, _Allocator>, size_t>
        -: 3328:{
        -: 3329:    _LIBCPP_INLINE_VISIBILITY
        -: 3330:    size_t operator()(const vector<bool, _Allocator>& __vec) const _NOEXCEPT
        -: 3331:        {return __vec.__hash_code();}
        -: 3332:};
        -: 3333:
        -: 3334:template <class _Tp, class _Allocator>
        -: 3335:inline _LIBCPP_INLINE_VISIBILITY
        -: 3336:bool
        -: 3337:operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3338:{
        -: 3339:    const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();
        -: 3340:    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());
        -: 3341:}
        -: 3342:
        -: 3343:template <class _Tp, class _Allocator>
        -: 3344:inline _LIBCPP_INLINE_VISIBILITY
        -: 3345:bool
        -: 3346:operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3347:{
        -: 3348:    return !(__x == __y);
        -: 3349:}
        -: 3350:
        -: 3351:template <class _Tp, class _Allocator>
        -: 3352:inline _LIBCPP_INLINE_VISIBILITY
        -: 3353:bool
        -: 3354:operator< (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3355:{
        -: 3356:    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
        -: 3357:}
        -: 3358:
        -: 3359:template <class _Tp, class _Allocator>
        -: 3360:inline _LIBCPP_INLINE_VISIBILITY
        -: 3361:bool
        -: 3362:operator> (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3363:{
        -: 3364:    return __y < __x;
        -: 3365:}
        -: 3366:
        -: 3367:template <class _Tp, class _Allocator>
        -: 3368:inline _LIBCPP_INLINE_VISIBILITY
        -: 3369:bool
        -: 3370:operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3371:{
        -: 3372:    return !(__x < __y);
        -: 3373:}
        -: 3374:
        -: 3375:template <class _Tp, class _Allocator>
        -: 3376:inline _LIBCPP_INLINE_VISIBILITY
        -: 3377:bool
        -: 3378:operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3379:{
        -: 3380:    return !(__y < __x);
        -: 3381:}
        -: 3382:
        -: 3383:template <class _Tp, class _Allocator>
        -: 3384:inline _LIBCPP_INLINE_VISIBILITY
        -: 3385:void
        -: 3386:swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y)
        -: 3387:    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
        -: 3388:{
        -: 3389:    __x.swap(__y);
        -: 3390:}
        -: 3391:
        -: 3392:#if _LIBCPP_STD_VER > 17
        -: 3393:template <class _Tp, class _Allocator, class _Up>
        -: 3394:inline _LIBCPP_INLINE_VISIBILITY typename vector<_Tp, _Allocator>::size_type
        -: 3395:erase(vector<_Tp, _Allocator>& __c, const _Up& __v) {
        -: 3396:  auto __old_size = __c.size();
        -: 3397:  __c.erase(_VSTD::remove(__c.begin(), __c.end(), __v), __c.end());
        -: 3398:  return __old_size - __c.size();
        -: 3399:}
        -: 3400:
        -: 3401:template <class _Tp, class _Allocator, class _Predicate>
        -: 3402:inline _LIBCPP_INLINE_VISIBILITY typename vector<_Tp, _Allocator>::size_type
        -: 3403:erase_if(vector<_Tp, _Allocator>& __c, _Predicate __pred) {
        -: 3404:  auto __old_size = __c.size();
        -: 3405:  __c.erase(_VSTD::remove_if(__c.begin(), __c.end(), __pred), __c.end());
        -: 3406:  return __old_size - __c.size();
        -: 3407:}
        -: 3408:#endif
        -: 3409:
        -: 3410:_LIBCPP_END_NAMESPACE_STD
        -: 3411:
        -: 3412:_LIBCPP_POP_MACROS
        -: 3413:
        -: 3414:#endif  // _LIBCPP_VECTOR
